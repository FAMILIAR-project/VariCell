{{Use dmy dates|date=July 2013}}
{{Multiple issues
 | original research=December 2007
 | {{cleanup-bare URLs|date=June 2013}}
 | long=January 2012
 | weasel=March 2011
}}
{{Correct title | title=Comparison of C# and Java|reason=hash}}
{{ProgLangCompare}}
<!-- Both C# and Java have multiple versions, some more similar than others. Perhaps the title should be "A comparison of the latest C# and Java Languages" or give explicit versions!
-->

Java and C# are similar programming languages that are statically, [[Strong typing|strongly]], and [[manifest typing|manifestly]] [[Type system|typed]], both are [[Class (computer science)|class-based]] [[Object-oriented programming|object-oriented]], both are designed with semi-[[Interpreter (computing)|interpretation]] or [[Just-in-time compilation|runtime compilation]] in mind, both use [[garbage collection (computer science)|garbage-collection]], and both are "[[Curly bracket programming language|curly brace languages]]" like [[C (programming language)|C]] and [[C++]].

== Summarized differences ==
=== Data types ===
{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"|[[#Data types|Data types]]!! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Single-root (unified) type system || {{no}} || {{yes}}<ref>The type system is unified by default, unless the compiler is switched into ''unsafe mode'' where raw pointers are available as a datatype. Pointers are not derived from object nor does it have implicit conversions to/from the object data type</ref>
|-
|[[Signedness|Signed integers]] || {{yes}}; 8, 16, 32, 64 bits || {{yes}}; 8, 16, 32, 64 bits
|-
|[[Unsigned integers]] || {{no}} || {{yes}}; 8, 16, 32, 64 bits
|-
|[[Primitive data type#Characters and strings|Character]] || {{yes}}<ref>[http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/String.html String JavaDoc]</ref> || {{yes}}
|-
|Date/time || {{yes}}; reference type<ref>[http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Data.html Date JavaDoc]</ref> || {{yes}}; value type
|-
|IEEE 754 [[binary32]] floating point number || {{yes}} || {{yes}}
|-
|IEEE 754 [[binary64]] floating point number || {{yes}} || {{yes}}
|-
|[[Boolean type]] || {{yes}} || {{yes}}
|-
|High precision decimal number || {{no}} || {{yes|128-bit (28 digits) Decimal type}}
|-
|[[#Advanced numeric types|Arbitrary size decimals]] || {{yes|Reference type; no operators}}<ref>[http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html BigDecimal JavaDoc]</ref> || {{no}}
|-
|[[Primitive data type#Characters and strings|Strings]] || {{yes|Immutable reference type, Unicode}} || {{yes|Immutable reference type, Unicode}}
|-
|[[#Advanced numeric types|Arbitrary size integers]] || {{yes|Reference type; no operators}} || {{yes}}
|-
|[[#Advanced numeric types|Complex numbers]] || {{no}} || {{yes}}
|-
|[[#Reference types|Reference types]] || {{yes}} || {{yes}}
|-
|[[#Arrays and collections|Arrays]] || {{yes}}<ref>[http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collection.html Collection JavaDoc]</ref> || {{yes}}
|-
|[[#Value types|Value types]] || {{no}}; only primitive types || {{yes}}
|-
|[[#Enumerations|Enumerated types]] || {{yes}}; reference type || {{yes}}; scalar
|-
|[[#Lifted (nullable) types|Lifted (nullable) types]] || {{no}}; but wrapper types || {{yes}}
|-
|[[Tuples]] || {{no}} || {{yes}}
|-
|[[#Pointers|Pointers]] || {{no}}<ref name="oracle.com">{{cite web|url=http://www.oracle.com/technetwork/java/simple-142616.html#4107 |title=The Java Language Environment |publisher=Oracle.com |date= |accessdate=2013-08-18}}</ref>  || {{yes}}
|}

==== Unified type system ====
The languages use very similar type systems. Both languages are statically typed with class-based object orientation. In Java the [[primitive types]] are special in that they are not [[object-oriented]] and they could not have been defined using the language itself. They also do not share a common ancestor with reference types. The Java [[reference type]]s all derive from a common root type. C# has a unified [[type system]] in which all types (besides unsafe pointers<ref name="unsafe pointers">[http://msdn.microsoft.com/en-us/library/y31yhkeb.aspx ''Pointer types (C# Programming Guide)'']</ref>) ultimately derive from a common root type. Consequently, all types implement the methods of this root type, and extension methods defined for the <code>object</code> type apply to all types, even primitive <code>int</code> literals and [[Delegate (CLI)|delegate]]s. Note, that unlike Java, this allows C# to support objects with encapsulation that are not reference types.

In Java, compound types are synonymous with reference types; methods cannot be defined for a type unless it is also a ''class'' reference type. In C# the concepts of encapsulation and methods have been decoupled from the reference requirement so that a type can support methods and encapsulation without being a reference type. Only reference types support virtual methods and specialization, however.

Both languages support a number of built-in types that are copied and passed by value rather than by reference. Java calls these types [[primitive type]]s, while they are called ''simple types'' in C#. The simple/primitive types typically have native support from the underlying processor architecture.

The C# primitive/simple types implement a number of interfaces and consequently offer a number of methods directly on instances of the types - even on the literals. The C# type names are also merely ''aliases'' for [[Common Language Runtime]] types. The C# <code>System.Int64</code> type is exactly the same type as the <code>long</code> type; the only difference is that the former is the canonical .NET name while the latter is a C# alias for it.

Java does not offer methods directly on the primitive types. Instead methods that operate on the primitive values are offered through companion [[Primitive wrapper class|wrapper classes]]. A fixed set of such wrapper classes exist, each of which wraps one of the fixed set of primitive types. As an example, the Java <code>Long</code> type is a [[reference type]] that wraps the primitive <code>long</code> type. They are ''not'' the same type, however.

==== Signed integers ====
Both Java and C# supports [[signedness|signed]] integers with bit widths of 8, 16, 32 and 64 bits. They use the same name/aliases for the types, except for the 8-bit integer which is called a <tt>byte</tt> in Java and a <tt>sbyte</tt> (signed byte) in C#.

==== Unsigned integers ====
C# supports [[signedness|unsigned]] in addition to the [[signedness|signed]] integer types. The unsigned types are <tt>byte</tt>, <tt>ushort</tt>, <tt>uint</tt> and <tt>ulong</tt> for 8, 16, 32 and 64 bit widths, respectively. Unsigned arithmetic operating on the types are supported as well. For example, adding two unsigned integers (<tt>uint</tt>s) still yields a <tt>uint</tt> as a result; not a long or signed integer.

Java does not feature unsigned integer types. In particular, Java lacks a primitive type for an unsigned [[byte]]. Instead Java's <tt>byte</tt> type is sign extended which is a common source of bugs and confusion.<ref>{{cite book|title=Java puzzlers : traps, pitfalls, and corner cases|year=2005|publisher=Addison-Wesley|location=Upper Saddle River, NJ [u.a.]|isbn=978-0-321-33678-1|author=Joshua Bloch; Neal Gafter|edition=5. print.|accessdate=6 October 2012|page=36|quote=The lesson for language designers is that sign extension of byte values is a common source of bugs and confusion. The masking that is required in order to suppress sign extension clutters programs, making them less readable. Therefore, the byte type should be unsigned.}}</ref>

Unsigned integers were deliberately left out of Java because [[James Gosling]] believed that programmers would not understand how unsigned arithmetic works.<ref><blockquote>In programming language design, one of the standard problems is that the language grows so complex that nobody can understand it. One of the little experiments I tried was asking people about the rules for unsigned arithmetic in C. It turns out nobody understands how unsigned arithmetic in C works. There are a few obvious things that people understand, but many people don't understand it.</blockquote> retrieved from [http://www.artima.com/intv/gosling3P.html http://www.artima.com/intv/gosling3P.html]</ref><ref name="oracle.com"/>

==== Characters ====
Both languages feature a native <code>char</code> (character) datatype as a simple type. Although the <code>char</code> type can be used with bit-wise operators, this is actually accomplished by promoting the <code>char</code> value to an integer value before the operation. Thus, the result of a bitwise operation is a numeric type, not a character, in both languages.

==== High-precision decimal numbers ====
C# has a type and literal notation for high-precision (28 decimal digits) decimal arithmetic which is appropriate for financial and monetary calculations.<ref>{{cite web|title=decimal|url=http://msdn.microsoft.com/en-us/library/364x0z75(v=vs.110).aspx|work=C# Reference|publisher=Microsoft}}</ref><ref name="thedecimaltype"/><ref>{{cite book|last=Mok|first=Heng Ngee|title=From Java to C? : a developer's guide|year=2003|publisher=Addison-Wesley|location=Harlow, England|isbn=978-0-321-13622-0|chapter=9.5. The decimal type}}</ref>  Contrary to the <tt>float</tt> and <tt>double</tt> data types, decimal fractional numbers such as 0.1 can be represented exactly in the decimal representation. In the float and double representations, such numbers often have non-terminating binary expansions, making those representations more prone to round-off errors.<ref name=thedecimaltype>{{cite book|last=Sestoft|first=Jon Jagger, Nigel Perry, Peter|title=C? annotated standard|year=2007|publisher=Elsevier/Morgan Kaufmann Publishers|location=Amsterdam|isbn=978-0-12-372511-0|chapter=11.1.7 The decimal type}}</ref>

While Java lacks such a built-in type, the Java library does feature an ''arbitrary precision'' decimal type. This is not considered a language type and it does not support the usual arithmetic operators; rather it is a reference type that must be manipulated using the type methods. See more about arbitrary size/precision numbers [[#Advanced numeric types|below]].

==== Advanced numeric types ====

Both languages offer library-defined [[Arbitrary-precision arithmetic|arbitrary size integer]] types.

Only Java offers a data type for [[Arbitrary-precision arithmetic|arbitrary precision decimal point]] calculations and only C# offers a type for working with [[complex numbers]].

In both languages the number of operations that can be performed on the advanced numeric types are limited compared to the built-in [[IEEE 754]] floating point types. For instance, none of the arbitrary size types support [[square root]] or [[logarithms]].

C# allows library defined types to be integrated with existing types and operators by using custom implicit/explicit conversions and operator overloading. See example [[#Integration of library defined types]]

==== Built-in compound data types ====
Both languages treat [[String (computer science)|string]]s as ([[immutable object|immutable]]) objects of reference type. In both languages the type contains a number of methods to manipulate strings, parse, format etc. In both languages [[regular expression]]s are considered an external feature and are implemented in separate classes.

Both languages' libraries define classes for working with dates and calendars in different cultures. The Java <code>java.util.Date</code> is a mutable reference type, where the C# <code>System.DateTime</code> is a struct value type. C# additionally define a <code>TimeSpan</code> type for working with time periods. Both languages support date and time arithmetic according to different cultures.

==== Value types ====
C# allows the programmer to create user-defined [[value type]]s, using the <code>struct</code> keyword. Unlike classes and like the standard primitives, such value types are passed and assigned by value rather than by reference. They can also be part of an object (either as a field or [[Boxed type|boxed]]), or stored in an array without the memory indirection that normally exists for class types.

Because value types have no notion of a ''<code>null</code>'' value and can be used in arrays without initialization, they always come with an implicit default constructor that essentially fills the struct memory space with zeroes. The programmer can only define additional constructors with one or more arguments. Value types do not have [[virtual method table]]s, and because of that (and the fixed memory footprint), they are implicitly sealed. However, value types ''can'' (and frequently do) implement interfaces. For example, the built-in integer types implement a number of interfaces.

Apart from the built-in primitive types, Java does not include the concept of value types.

==== Enumerations ====
{| class=wikitable
!
! Java
! C#
|-
| Definition
| In Java, both the enumeration type and (optionally) the individual enumeration values are Java classes. The only valid values are the ones listed in the enumeration. The enumeration type may declare or override members (such as a dedicated <code>toString()</code> method) that will be inherited by the individual enumerated values, and it can be extended by adding methods, fields or even interfaces can be implemented for it.<ref name="enum">{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = In Java, enumerated types are a full fledged class which means they are typesafe and can be extended by adding methods, fields or even implementing interfaces. Whereas in C#, an enumerated type is simply syntactic sugar around an integral type (typically an int) meaning they cannot be extended and are not typesafe.
 | accessdate  = 2012-09-06
}}</ref> The individual enumerated values may in turn override members or even define new members only valid for that specific value.
| [[Enumeration]]s in C# are implicitly derived from the <code>Enum</code> type that again is a value type derivative. The value set of a C# enumeration is defined by the ''underlying type'' that can be a signed or unsigned integer type of 8, 16, 32 or 64 bits. The enumeration definition defines names for the selected integer values and is [[syntactic sugar]].<ref name="enum"/><ref>{{cite web
 | url         = http://www.cstruter.com/
 | title       = Java 5: Taming the Tiger: Syntactic Sugar
 | last1       = Prof. Dr. Gruntz
 | first1      = Dominik
 | date        = 8 April 2005
 | language    = German
 | publisher   = Fachhochschule Aargau, Nordwestschweiz
 | archiveurl  = http://www.gruntz.ch/courses/sem/ss05/Java5_SyntacticSugar.pdf
 | archivedate = 8 April 2005
 | quote       = Enumerationen sind die heimlichen Sieger von Java 1.5. Nach vielen Beteuerungen durch Sun, Enums seien in Java ?berfl?ssig und k?nnen einfach nachgebildet werden, wurden sie nun doch eingef?hrt. Die einfachste M?glichkeit einer Enumeration der Jahreszeiten  sieht wie folgt aus ? Das Schl?sselwort  enum steht f?r eine spezielle Art von Klasse, die eine Enumeration
definiert. ? ''Im Gegensatz zu anderen Programmiersprachen wie C/C++ und C# kann man ihnen per Gleichheitszeichen keine ganzen Zahlen zuordnen.''
 | accessdate  = 2012-09-10
}}</ref><ref>{{cite web
 | url         = http://www.cstruter.com/
 | title       = Syntactic sugar (C#): Enum
 | last1       = Truter
 | first1      = Christoff
 | date        = 4 August 2011
 | publisher   = CSTr?ter
 | archiveurl  = http://www.cstruter.com/blog/325
 | archivedate = 4 August 2011
 | quote       = // Poorly designed enum don't do this ? Obviously (like with everything else), we can misuse this piece of sugar ending up with a system suffering from hyperglycemia. ? Seeing as the underlying type of our enum is an int (can also use other integral types) it can lead to some interesting issues when using an enum as bit flags via bitwise operators.
 | accessdate  = 2012-09-10
}}</ref> By default the first name is assigned the value 0 (zero) and the following names are assigned in increments of 1. Any value of the underlying primitive type is a valid value of the enumeration type, though an explicit cast may be needed to assign it.
|-
| Combining
| Java enumeration set and map collections provide functionality to combine multiple enumeration values to a combined value. These special collections allows compiler optimization to minimize the overhead incurred by using collections as the combination mechanism.
| C# supports bit-mapped enumerations where an actual value may be a combination of enumerated values bitwise or'ed together. The formatting and parsing methods implicitly defined by the type will attempt to use these values.
|}

In both C# and Java, programmers can use enumerations in a [[switch statement]] without conversion to a string or primitive integer type. However, C# disallows fall-throughs unless the case statement does not contain any code, as they are a main cause for hard-to-find bugs.<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: C. An Ever So Slight Feeling Of D?j? Vu: 4. switch Statment
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = 
 | accessdate  = 2012-09-10
}}</ref> Fall-throughs must be explicitly declared using [[goto]]<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/13940fs2(v=vs.71).aspx |title=goto (C#) |publisher=Msdn.microsoft.com |date= |accessdate=2013-08-18}}</ref>

==== Delegates / method references ====
C# implements object-oriented method pointers in the form of [[Delegate (CLI)|delegate]]s. A delegate is a special type that can capture a [[Type safety|type-safe]] reference to a method. This reference can then be stored in a delegate-type variable or passed to a method through a delegate parameter for later invocation. C# delegates support [[Covariance and contravariance (computer science)|covariance and contravariance]], and can hold a reference to any signature-compatible static method, instance method, anonymous method or [[Anonymous function|lambda expression]].

Delegates should not be confused with closures and inline functions. The concepts are related because a reference to a closure/inline function must be captured in a delegate reference to be useful at all. But a delegate does not always reference an inline function; it can also reference existing static or instance methods. Delegates form the basis of C# [[#Events|events]] but should not be confused with those either.

Delegates were deliberately left out of Java because they were considered unnecessary and detrimental to the language, and because of potential performance issues.<ref name="JavaDelegates">The Java Language Team, [http://java.sun.com/docs/white/delegates.html ''About Microsoft's "Delegates"'']</ref> Instead, alternative mechanisms are used. The [[wrapper pattern]], which resembles the delegates of C# in that it allows the client to access one or more client-defined methods through a known interface, is one such mechanism.{{citation needed | date=March 2012}} Another is the use of [[Adapter pattern|adapter]] objects using inner classes, which the designers of Java argued are a better solution than bound method references.<ref name="JavaDelegates"/>

See also example [[#C# delegates and equivalent Java constructs]]

==== Lifted (nullable) types ====
C# allows value/primitive/simple types to be "lifted" to allow the special <code>null</code> value in addition to the type's native values. A type is lifted by adding a <code>?</code> suffix to the type name. Conversions are implicitly defined to convert between values of the base and the lifted type. The lifted type can be compared against <code>null</code> or it can be tested for <code>HasValue</code>. Also, lifted operators are implicitly and automatically defined based on their non-lifted base, where ? with the exception of some boolean operators ? a null argument will propagate to the result.

Java does not support type lifting as a concept, but all of the built-in primitive types have corresponding wrapper types, which do support the <code>null</code> value by virtue of being reference types (classes).<br/>
According to the Java spec, any attempt to dereference the <code>null</code> reference must result in an exception being thrown at run-time, specifically a <code>NullPointerException</code>. (It would not make sense to dereference it otherwise, because, by definition, it points to no object in memory.) This also applies when attempting to [[Auto-unboxing|unbox]] a variable of a wrapper type, which evaluates to <code>null</code>: the program will throw an exception, because actually there is no object to be unboxed - and therefore no boxed value to take part in the subsequent computation.

The following example illustrates the different behavior. In C#, the lifted * operator propagates the <code>null</code> value of the operand; in Java, unboxing the null reference throws an exception.

Not all C# lifted operators have been defined to propagate <code>null</code> unconditionally, if one of the operands is <code>null</code>. Specifically, the [[boolean operators]] have been lifted to support [[ternary logic]] thus keeping impedance with [[SQL]].

The Java boolean operators do not support ternary logic, nor is it implemented in the base class library.

==== Late-bound (dynamic) type ====
C# features a [[Name binding|late bound]] dynamic type that supports no-reflection dynamic invocation, interoperability with dynamic languages as well as ad-hoc binding to (for example) document object models. The <code>dynamic</code> type resolves member access dynamically at runtime as opposed to statically/virtual at compile time. The member lookup mechanism is extensible with traditional reflection as a fall-back mechanism.

There are several use cases for the <code>dynamic</code> type in C#:
*Less verbose use of reflection: By casting an instance to the <code>dynamic</code> type, members such as properties, methods, events etc. can be directly invoked on the instance without using the reflection API directly.
*Interoperability with dynamic languages: The dynamic type comes with a [[hub-and-spoke]] support for implementing dynamically typed objects and common runtime infrastructure for efficient member lookup.
*Creating dynamic abstractions on the fly: For instance, a dynamic object could provide simpler access to document object models such as [[XML]] or [[XHTML]] documents.

Java does not support a late-bound type. The use cases for C# dynamic type have different corresponding constructs in Java:
*For dynamic late-bound ''by-name'' invocation of preexisting types, reflection should be used.
*For interoperability with dynamic languages, some form of interoperability API specific to that language will have to be used. The Java Virtual Machine platform does have multiple dynamic languages implemented on top of it, but there is no common standard for how to pass objects between languages. Usually this will involve some form of reflection or reflection-like API. As an example of how to use JavaFX objects from Java, see [http://blogs.sun.com/javafx/entry/how_to_use_javafx_in How to Use JavaFX in Your Swing Application].
*For creating and interacting with objects entirely at runtime, e.g. interaction with a document object model abstraction, a specific abstraction API will have to be used.

The C# <code>dynamic</code> enables seamless interoperability with dynamic (late-bound) languages by allowing C# code to manipulate foreign objects using the same syntax as, if they were native C# objects. Lacking this capability, Java developers must use a Java based API to access such objects. Consider a Ruby class (defined in a file called <code>Deepthought.rb</code>) that has two attributes (a, b) with read/write accessors and a <code>Calculate</code> method that returns the product of the attributes. The following examples illustrate how to instantiate and use such a class from within Java and C#, respectively.

See also example [[#Interoperability with dynamic languages]]

==== Pointers ====
Java does not permit pointers or pointer-arithmetic within the Java runtime environment. The Java language designers reasoned that pointers were one of the primary features that enable programmers to inject bugs into their code and chose not to support them.<ref name="oracle.com"/> Java does not allow for directly passing and receiving objects/structures to/from the underlying operating system and thus does not need to model objects/structures to such a specific memory layout, layouts which frequently would involve pointers. Java's communication with the underlying operating system is instead based upon [[Java Native Interface|JNI]] where communication with/adaption to an underlying operating system is handled through an external "glue" layer.

While C# does allow use of [[pointer (computer programming)|pointer]]s and corresponding pointer arithmetic, the C# language designers had the same concerns that pointers could potentially be used to bypass the strict rules for object access. Thus, C# by default also does not permit pointers.<ref>{{cite web|title=Unsafe Code and Pointers (C# Programming Guide)|url=http://msdn.microsoft.com/en-us/library/t2yzs44b(v=vs.80).aspx|publisher=Microsoft|accessdate=11 March 2013}}</ref> However, because pointers are required when calling many native functions, pointers are actually allowed in an explicit "unsafe" mode. Code blocks or methods that use the pointers must be marked with the <code>unsafe</code> keyword to be able to use pointers, and the compiler requires the <tt>/unsafe</tt> switch to allow compilation of such code. Assemblies are compiled using the <tt>/unsafe</tt> switch are marked as such and may only execute if explicitly trusted. This allows programmers to use pointers and pointer arithmetic to directly pass and receive objects to/from the operating system or other native APIs using the native memory layout for those objects, while at the same time isolate such potentially unsafe code in specifically trusted assemblies.

=== Reference types ===

In both languages [[Reference (computer science)|references]] are a central concept. All instances of classes are ''by reference''.

While not directly evident in the language syntax ''per se'', both languages support the concept of [[weak reference|''weak'' references]]. An instance that is only referenced by weak references is eligible for garbage collection just as if there were no references at all. In both languages this feature is exposed through the associated libraries, even though it is really a core runtime feature.

In addition to weak references, Java has ''[[soft reference]]s''. Soft references are much like weak references, but the JVM will not deallocate softly-referenced objects until the memory is actually needed.

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Reference types !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Garbage collection (computer science)|Garbage collection]] || {{yes}} || {{yes}}
|-
|[[Weak reference]]s || {{yes}} || {{yes}}
|-
|Reference queue (interaction with garbage collection) || {{yes}} || {{no}}
|-
|[[Soft reference|Soft]] and [[Phantom reference|Phantom]] references || {{yes}} || {{no}}
|-
|[[Proxy pattern|Proxy support]] || {{yes}}; proxy generation || {{yes}}; object contexts
|}

=== Object orientation ===

Both C# and Java are designed from the ground up as [[Object oriented programming|object-oriented]] languages using [[dynamic dispatch]], with syntax similar to [[C++]] (C++ in turn derives from [[C (programming language)|C]]). Neither language is a superset of C or C++, however.

Both languages mainly use [[garbage collection (computer science)|garbage collection]] as a means of reclaiming memory resources, rather than explicit deallocation of memory. In both cases, if an object holds resources of different kinds other than memory, such as file handles, graphical resources, etc., then it will have to be notified explicitly when the application no longer uses it. Both C# and Java offer interfaces for such deterministic [[dispose pattern|disposal]] and both C# and Java (since Java 7) feature automatic resource management statements that will automatically invoke the disposal/close methods on those interfaces.

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Object orientation!! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Class (computer science)|Classes]] || {{yes}} || {{yes}}
|-
|[[Interface (computer science)|Interfaces]] || {{yes}} || {{yes}}
|-
|[[Class (computer science)#Abstract and Concrete|Abstract classes]] || {{yes}} || {{yes}}
|-
|Member accessibility levels || {{yes|Yes; public, package, protected, private}} || {{yes|Yes; public, internal, protected, private, protected internal}}
|-
|Class-level [[Class (computer science)#Local and inner|inner classes]] || {{yes}};<code>static</code> inner classes are class level || {{yes}}; all inner classes are class level
|-
|Instance-level inner classes || {{yes}} || {{no}}
|-
|Statement-level (local) [[Class (computer science)#Unnamed|anonymous classes]] || {{yes}} || {{no}}
|-
|[[Partial class]]es || {{no}} || {{yes}}
|-
|Implicit (inferred) anonymous classes || {{no}} || {{yes}}<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/vstudio/bb397696.aspx |title=Anonymous Types (C# Programming Guide) |publisher=Msdn.microsoft.com |date= |accessdate=2013-08-18}}</ref>
|-
|[[Deprecation]]/obsolescence || {{yes}} || {{yes}}
|-
|Overload versioning || {{some}} || {{yes}}
|-
|Enums can implement interfaces || {{yes}} || {{no}}
|-
|[[Property (programming)|Properties]] || {{no}}, but see [[JavaBeans]] spec || {{yes}}
|-
|[[Event (computing)|Events]] || {{yes|Provided by standard libraries}} || {{yes|Built-in language feature}}
|-
|[[Operator overloading]] || {{no}} || {{yes}}
|-
|Indexers || {{no}} || {{yes}}
|-
|Implicit conversions || {{no}} || {{yes}}
|-
|Explicit conversions || {{no}} || {{yes}}
|}

==== Partial classes ====
C# allows a class definition to be split across several source files using a feature called ''partial classes''. Each part must be marked with the keyword <code>partial</code>. All the parts must be presented to the compiler as part of a single compilation. Parts can reference members from other parts. Parts can implement interfaces and one part can define a base class. The feature is useful in code generation scenarios (such as [[user interface|UI]] design), where a code generator can supply one part and the developer another part to be compiled together. The developer can thus edit their part without the risk of a code generator overwriting that code at some later time. Unlike the class extension mechanism, a partial class allows "circular" dependencies among its parts as they are guaranteed to be resolved at compile time. Java has no corresponding concept.

==== Inner and local classes ====
Both languages allow ''inner classes'', where a class is defined lexically inside another class. However, in each language these inner classes have rather different semantics.

In Java, unless the inner class is declared <code>static</code>, a reference to an instance of an inner class carries a reference to the outer class with it. As a result, code in the inner class has access to both the static and non-static members of the outer class. To create an instance of a non-static inner class, one has to name the instance of the embracing outer class.<ref name="inner instance creation">[http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#41147 Java Language Specification Third Edition: section 15.9 Class Instance Creation Expressions]</ref> This is done via a new <code>new</code>-operator introduced in JDK 1.3: <code>outerClassInstance.new Outer.InnerClass()</code>. This can be done in any class that has a reference to an instance of the outer class.

In C#, an inner class is conceptually the same as a normal class. In a sense, the outer class only acts as a namespace. Thus, code in the inner class cannot access non-static members of the outer class unless it does so through an explicit reference to an instance of the outer class. Programmers can declare the inner class ''private'' to allow only the outer class to have any access to it.

Java provides another feature called ''local classes'' or ''anonymous classes'', which can be defined within a method body. These are generally used to implement an interface with only one or two methods, which are typically event handlers. However, they can also be used to override virtual methods of a superclass. The methods in those local classes have access to the outer method's local variables declared <code>final</code>. C# satisfies the use-cases for these by providing anonymous [[Delegate (CLI)|delegate]]s; see [[#Event handling|event handling]] for more about this.

C# also provides a feature called ''anonymous types/classes'', but it is rather different from Java's concept with the same name. It allows the programmer to instantiate a class by providing only a set of names for the properties the class should have, and an expression to initialize each. The types of the properties are inferred from the types of those expressions. These implicitly-declared classes are derived directly from ''object''.

==== Events ====
C# multicast-delegates are called ''events''. Events provide support for [[event-driven programming]] and is an implementation of the [[observer pattern]]. To support this there is a specific syntax to define events in classes, and operators to register, unregister or combine event handlers.

See [[#Delegates / method references|here]] for information about how events are implemented in Java.

==== Operator overloading and implicit and explicit conversions ====
[[Operator overloading]] and user-defined [[type conversion|casts]] are separate features that both aim to allow new types to become first-class citizens in the type system. By using these features in C#, types such as [[Complex numbers|<code>Complex</code>]] and [[decimal128|<code>decimal</code>]] have been integrated so that the usual operators like addition and multiplication work with the new types. Unlike C++, C# does restrict the use of operator overloading, prohibiting it for the operators <code>new</code>, <code>( )</code>, <code>||</code>, <code>&&</code>, <code>=</code>, and any variations of compound statements like <code>+=</code>. But compound operators will call overloaded simple operators, like <code>-=</code> calling <code>-</code> and <code>=</code>.<ref name="nested">{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: Operator Overloading
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = NOTE: Unlike C++, C# does not allow the overloading of the following operators; new, ( ), &#124;, &&, =, or any variations of compound assignments such as +=, -=, etc. However, compound assignment operators will call overloaded operators, for instance, += would call overloaded +.
 | accessdate  = 2012-09-06
</code>}}</ref>

Java does not include operator overloading, nor custom conversions in order to prevent abuse of the feature and to keep the language simple.<ref>[http://www.cafeaulait.org/1998august.html August 1998 Java News]</ref>

==== Indexers ====
C# also includes ''indexers'' that can be considered a special case of operator overloading (like the C++ <code>operator[]</code>), or parameterized <code>get</code>/<code>set</code> properties. An indexer is a property named <code>this[]</code> that uses one or more parameters (indexes); the indices can be objects of any type:

<source lang=CSharp>
myList[4] = 5;
string name = xmlNode.Attributes["name"];
orders = customerMap[theCustomer];
</source>

Java does not include indexers. The common Java pattern involves writing explicit getters and setters where a C# programmer would use an indexer.

=== Fields and initialization ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Fields and initialization !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Field (computer science)|Fields]] || {{yes}} || {{yes}}
|-
|[[Constant (programming)|Constants]] || {{yes}} || {{yes}}; but no support for constant passed parameters<ref name="final">{{cite web
 | url         = http://csunwold.blogspot.co.at/
 | title       = C# Equivalent to Java's "final"
 | last1       = Sunwold
 | first1      = Corey
 | authorlink  = http://www.blogger.com/profile/03034494611188304767
 | date        = 25 February 2010
 | publisher   = Corey Sunwold
 | archiveurl  = http://csunwold.blogspot.co.at/2010/02/from-stackoverflow-im-looking-for-c.html
 | archivedate = 25 February 2010
 | quote       = There is than one use of the final keyword that C# does not have an equivalent for. When you pass a parameter to a method in Java, and you don't want that parameter's value to change within the scope of that method you can set it as final?
 | accessdate  = 2012-09-06
}}</ref>
|-
|Static (class) [[Constructor (object-oriented programming)|constructors]] || {{yes}} || {{yes}}
|-
|Instance constructors || {{yes}} || {{yes}}
|-
|[[Destructor (computer science)|Finalizers/destructors]] || {{yes}} || {{yes}}
|-
|Instance initializers || {{yes}} || {{no}}
|-
|Object [[Initialization (programming)|initialization]]  || {{yes|Bottom-up <br/>(fields and constructors)}} || {{yes|Top-down (fields); bottom-up (constructors)}}
|-
|Object initializers || {{no}} || {{yes}}
|-
|Collection initializers || {{no}}; can be modelled || {{yes}}
|-
|Array initializers || {{yes}} || {{yes}}
|}

==== Object initialization ====

In both C# and Java, an object's fields can be initialized either by ''variable initializers'' (expressions that can be assigned to variables where they are defined) or by ''constructors'' (special subroutines that are executed when an object is being created). In addition, Java contains ''instance initializers'', which are anonymous blocks of code with no arguments that are run after the explicit (or implicit) call to a superclass's constructor but before the constructor is executed.

C# initializes object fields in the following order when creating an object:

# Derived static fields
# Derived static constructor
# Derived instance fields
# Base static fields
# Base static constructor
# Base instance fields
# Base instance constructor
# Derived instance constructor

Some of the above fields may not be applicable (e.g. if an object does not have ''static fields''). ''Derived fields'' are those that are defined in the object's direct class, while ''base field'' is a term for the fields that are defined in one of the object's superclasses. Note that an object representation in memory contains all fields defined in its class or any of its superclasses, even, if some fields in superclasses are defined as private.

It is guaranteed that any field initializers take effect before any constructors are called, since both the instance constructor of the object's class and its superclasses are called after field initializers are called. There is, however, a potential trap in object initialization when a virtual method is called from a base constructor. The overridden method in a subclass may reference a field that is defined in the subclass, but this field may not have been initialized because the constructor of the subclass that contains field initialization is called after the constructor of its base class.

In Java, the order of initialization is as follows:

# Invocation of another constructor (either of the object's class or of the object's superclass)
# Instance variable initializers and instance initializers (in the order they appear in the source code)
# The constructor body

Like in C#, a new object is created by calling a specific constructor. Within a constructor, the first statement may be an invocation of another constructor. If this is omitted, the call to the argumentless constructor of the superclass is added implicitly by the compiler. Otherwise, either another overloaded constructor of the object's class can be called explicitly, or a superclass constructor can be called. In the former case, the called constructor will again call another constructor (either of the object's class or its subclass) and the chain sooner or later ends up at the call to one of the constructors of the superclass.

After another constructor is called (that causes direct invocation of the superclass constructor, and so forth, down to the Object class), instance variables defined in the object's class are initialized. Even if there are no variable initializers explicitly defined for some variables, these variables are initialized to default values. Note that instance variables defined in superclasses are already initialized by this point, because they were initialized by a superclass constructor when it was called (either by the constructor's code or by variable initializers performed before the constructor's code or implicitly to default values). In Java, variable initializers are executed according to their textual order in the source file.

Finally, the constructor body is executed. This ensures proper order of initialization, i.e. the fields of a base class finish initialization before initialization of the fields of an object class begins.

There are two main potential traps in Java's object initialization. First, variable initializers are expressions that can contain method calls. Since methods can reference any variable defined in the class, the method called in a variable initializer can reference a variable that is defined below the variable being initialized. Since initialization order corresponds to textual order of variable definitions, such a variable would not be initialized to the value prescribed by its initializer and would contain the default value.
Another potential trap is when a method that is overridden in the derived class is called in the base class constructor, which can lead to behavior the programmer would not expect when an object of the derived class is created. According to the initialization order, the body of the base class constructor is executed before variable initializers are evaluated and before the body of the derived class constructor is executed. The overridden method called from the base class constructor can, however, reference variables defined in the derived class, but these are not yet initialized to the values specified by their initializers or set in the derived class constructor. The latter issue applies to C# as well, but in a less critical form since in C# methods are not overridable by default.

=== Methods and properties ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Methods and properties !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Static imports || {{yes}} || {{no}}
|-
|Virtual methods|| {{yes|Virtual by default}} || {{yes|Non-virtual by default}}
|-
|[[Abstraction (computer science)|Abstract]] || {{yes}} || {{yes}}
|-
|Sealing || {{yes}} || {{yes}}
|-
|Explicit interface implementation || {{no}} || {{yes}}<ref name="interface">{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: D. Now For Something Completely Different: 15. Explicit Interface Implementation
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = 
 | accessdate  = 2012-09-11
}}</ref>
|-
|Value (input) parameters || {{yes}} || {{yes}}
|-
|Reference (input/output) parameters || {{no}} || {{yes}}
|-
|Output (output) parameters || {{no}} || {{yes}}
|-
|Constant (immutable) parameters || {{yes}};[[#Constant/immutable parameters|final]] parameters || {{no}}
|-
|[[Variadic function|Variadic methods]] || {{yes}} || {{yes}}
|-
|Optional arguments || {{no}} || {{yes}}
|-
|Named arguments || {{no}} || {{yes}}
|-
|[[Generator (computer programming)|Generator methods]] || {{no}} || {{yes}}
|-
|Extension methods || {{no}} || {{yes}}
|-
|Conditional methods || {{no}} || {{yes}}
|-
|Partial methods || {{no}} || {{yes}}
|}

==== Extension methods ====

Using a special ''this'' designator on the first parameter of a method, C# allows the method to act as if it were a member method of the type of the first parameter. This ''extension'' of the foreign class is purely syntactical. The extension method needs to be static and defined within a purely static class. It must obey any restriction on such external static methods and thus cannot break object encapsulation. The "extension" is only active within scopes where the namespace of the static host class has been imported. Java does not have an equivalent feature (although one is being discussed for Java 8).

==== Partial methods ====

Related to ''partial classes'' C# allows partial methods to be specified within partial classes. A partial method is an intentional declaration of a method with a number of restrictions on the signature. These restrictions ensure that if a definition is not actually provided by any class part, then the method and every call to it can be safely erased.<ref>{{cite web | title=C# Language Specification Version 4.0 | url=http://www.microsoft.com/en-us/download/details.aspx?id=7029 | publisher=Microsoft | accessdate=10 May 2012 | page=281 | quote=If no part of a partial type declaration contains an implementing declaration for a given partial method, any expression statement invoking it is simply removed from the combined type declaration. Thus the invocation expression, including any constituent expressions, has no effect at run-time. The partial method itself is also removed and will not be a member of the combined type declaration. If an implementing declaration exist for a given partial method, the invocations of the partial methods are retained. The partial method gives rise to a method declaration similar to the implementing partial method declaration except for the following: [?]}}</ref> This feature allows code to provide a large number of interception points (like the [[Template method pattern|template method]] [[Design Patterns|GoF]] design pattern) without paying any runtime overhead if these extension points are not being used by another class part at compile time. Java has no corresponding concept.

==== Virtual methods ====
''Methods'' in C# are non-[[Virtual function|virtual]] by default, and have to be declared virtual explicitly, if desired. In Java, all non-static non-private methods are virtual. Virtuality guarantees that the most recent [[Method overriding (programming)|override]] for the method will always be called, but incurs a certain runtime cost on invocation as these invocations cannot be normally [[Inline expansion|inlined]], and require an indirect call via the [[virtual method table]]. However, some JVM implementations, including the Oracle reference implementation, implement inlining of the most commonly called virtual methods.

Java methods are virtual by default (although they can be "sealed" by using the <code>final</code> modifier to disallow overriding). There is no way to let [[subclass (computer science)|derived classes]] define a new, unrelated method with the same name.

This means that by default in Java, and only when explicitly enabled in C#, new methods may be defined in a derived class with the same name and signature as those in its base class. When the method is called on a superclass reference of such an object, the "deepest" overridden implementation of the [[base class]]' method will be called according to the specific subclass of the object being referenced.

In some cases, when a subclass introduces a method with the same name and signature as a method already present in the [[base class]], problems can occur. In Java, this will mean that the method in the derived class will implicitly override the method in the base class, even though that may not be the intent of the designers of either class.

To mitigate this, C# requires that if a method should be overridden, the <code>override</code> keyword must be specified. Otherwise, the method will "hide" the inherited method. A compiler warning to this effect is issued, which can be silenced by specifying the <code>new</code> keyword. This avoids the problem that can arise from a base class being extended with a protected/public method whose signature is already in use by a derived class.

==== Constant/immutable parameters ====
In Java, it is possible to make the passed parameters to a method unchangeable by using the {{Java|final}} keyword. The language C# does not have this functionality.<ref name="final">{{cite web
 | url         = http://csunwold.blogspot.co.at/
 | title       = C# Equivalent to Java's "final"
 | last1       = Sunwold
 | first1      = Corey
 | authorlink  = http://www.blogger.com/profile/03034494611188304767
 | date        = 25 February 2010
 | publisher   = Corey Sunwold
 | archiveurl  = http://csunwold.blogspot.co.at/2010/02/from-stackoverflow-im-looking-for-c.html
 | archivedate = 25 February 2010
 | quote       = There is than one use of the final keyword that C# does not have an equivalent for.  When you pass a parameter to a method in Java, and you don't want that parameter's value to change within the scope of that method you can set it as final like this:
 | accessdate  = 2012-09-06
}}</ref>
{| class="wikitable"
|-
! Java !! C#
|-
| <source lang=Java>
    /**
     * Getter for a value from the value array
     * @param index
     * @return Requested value or -1, if the index is out of bounds.
     */
    public short getValue(final short index) {
        if (index < values.length) {
            index++;    // ERROR: The final local variable INDEX cannot be assigned.
                        // It must be blank and not using a compound assignment
            return values[index];
        }
        else return -1;
    }</source> || <center>no C# language equivalent</center>
|}

This missing feature, however, has only limited use. For primitive types that are implemented as [[call by value]], a modified value of a passed parameter inside the method does not affect the caller. Thus, for primitive types, to pass a parameter as {{Java|final}} is only preventing a change of this parameter's value. For passed objects, a {{Java|final}} parameter would prevent that another object is assigned to it, which is indeed a gain. It will, however, not prevent the data contained by the object from being mutated.

Both languages do not support essential feature of [[const-correctness]] that exists in [[C (programming language)|C]]/[[C++]], which makes a method constant.<ref>{{cite web
 | url        = http://en.wikipedia.org/wiki/Const-correctness
 | title      = const-correctness: Methods
 | publisher  = Wikipedia
 | quote      = Applying the const qualifier to instance methods thus is an essential feature for const-correctness, and is not available in many other object-oriented languages such as Java and C# or in Microsoft's C++/CLI or Managed Extensions for C++.
 | accessdate = 2012-09-06
}}</ref>

Interestingly, Java defines the word "constant" arbitrarily as a {{Java|static final}} field. Only these variables are capital-only variables, where the names are separated with an [[underscore]]. A parameter that is only {{Java|final}} is not considered as a constant, also it may be so in the case of a [[primitive data type]] or an [[immutable class]], like a {{Java|String}}.

==== Generator methods ====
{{further|Generator (computer programming)}}
Any C# method declared as returning <code>IEnumerable</code>, <code>IEnumerator</code> or the generic versions of these interfaces can be implemented using <code>yield</code> syntax. This is a form of limited, compiler-generated continuations and can drastically reduce the code required to traverse or generate sequences, although that code is just generated by the compiler instead. The feature can also be used to implement infinite sequences, e.g. the sequence of [[Fibonacci numbers]].

Java does not have an equivalent feature. Instead generators are typically defined by providing a specialized implementation of a well-known collection or iterable interface, which will compute each element on demand. For such a generator to be used in a ''for each'' statement, it must implement interface <code>java.lang.Iterable</code>.

See also example [[#Fibonacci sequence|Fibonacci sequence]] below.

==== Explicit interface implementation ====
C# also has ''explicit interface implementation'' that allows a class to specifically implement methods of an [[interface (computer science)|interface]], separate to its own class methods, or to provide different implementations for two methods with the same name and signature inherited from two base interfaces.

In either language, if a method (or property in C#) is specified with the same name and signature in multiple interfaces, the members will clash when a class is designed that implements those interfaces. An implementation will by default implement a common method for all of the interfaces. If separate implementations are required (because the methods really do serve separate purposes, or because return values differ between the interfaces) C#'s explicit interface implementation will solve the problem, though allowing different results for the same method, depending on the current cast of the object. In Java there is no way to solve this problem other than refactoring one or more of the interfaces to avoid name clashes.<ref name="interface" />

=== Reference (input/output) parameters ===

The arguments to a method are passed by value in Java, if they are primitive types and not objects. The String is also treated like a primitive type. This means that a method operates on copies of the items passed to it instead of on the actual items. In C#, it is possible to enforce a reference with the <code lang=CSharp>ref</code> keyword, similar to C++ and in a sense to C. This feature of C# is particularly useful when one wants to create a method that returns more than one object. In Java trying to return multiple values from a method is not supported.<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: D. Now For Something Completely Different: 12. Pass by Reference
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = In Java the arguments to a method are passed by value meaning that a method operates on copies of the items passed to it instead of on the actual items. In C#, as in C++ and in a sense C, it is possible to specify that the arguments to a method actually be references to the items being passed to the method instead of copies. This feature is particularly useful when one wants to create a method that returns more than one object. In Java trying to return multiple values from a method is not supported and leads to interesting anomalies like the fact that a method that swaps two numbers which has been the hallmark of freshman computer science classes for years is impossible to do in Java without resorting to coding tricks.
 | accessdate  = 2012-09-10
}}</ref>

See also example [[#Pass by reference]] below.

=== Generics ===

{{Further|Generic programming}}

In the field of [[generic programming|generics]] the two languages show a superficial syntactical similarity, but they have deep underlying differences.

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Generics !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Implementation || {{yes|[[Type erasure]]}} || {{yes|[[Reification (computer science)|Reification]]}}
|-
|Runtime realization || {{no}} || {{yes}}
|-
|[[Covariance and contravariance (computer science)|Covariance]] || {{yes}} || {{yes}}
|-
|[[Covariance and contravariance (computer science)|Contravariance]] || {{yes}} || {{yes}}
|-
|Reference type constraint || {{yes}}; implicit || {{yes}}
|-
|Value/primitive type constraint || {{no}} || {{yes}}
|-
|Constructor constraint || {{no}} || {{yes}}
|-
|Relation constraint || {{yes}} || {{yes}}
|-
|Primitive/value type support || {{no}} || {{yes}}
|-
|Migration compatibility || {{yes}} || {{no}}
|}

==== Type erasure versus reified generics ====
[[Generics in Java]] are a language-only construction; they are implemented only in the compiler. The generated classfiles include generic signatures only in form of metadata (allowing the compiler to compile new classes against them). The runtime has no knowledge of the generic type system; generics are not part of the [[JVM]]. Instead, generics classes and methods are transformed during compilation through a process known as [[type erasure]]. During this process the compiler replaces all generic types with their ''raw'' version and inserts casts/checks appropriately in client code where the type and its methods are used. The resulting byte code will contain no references to any generic types or parameters (See also [[Generics in Java]]). <br/>
The language specification intentionally prohibits certain uses of generics; this is necessary to allow for implementing generics through [[type erasure]], and to allow for migration compatibility.<ref>[http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#113528 The Java Language Specification].</ref>

C# builds on support for generics from the virtual execution system itself, i.e. it is not just a language feature. The language is merely a front-end for cross-language generics support in the [[Common Language Runtime|CLR]]. During compilation generics are verified for correctness, but code generation for actually ''implementing'' the generics are deferred to class-load time. Client code (code invoking generic methods/properties) are fully compiled and can safely assume generics to be type-safe. This is called [[Reification (computer science)|reification]]. At runtime, when a unique set of type parameters for a generic class/method/delegate is encountered for the first time, the class loader/verifier will synthesize a concrete class descriptor and generate method implementations. During the generation of method implementations all reference types will be considered a single type, as reference types can safely share the same implementations. Note, this is merely for the purpose of ''implementing'' code. Different sets of reference types will still have unique type descriptors; their method tables will merely point to the same code.

The following list illustrates some differences between Java and C# when managing generics. It is not exhaustive:<ref>see also [http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html Java Generics FAQs - Frequently Asked Questions] by Angelika Langer</ref>

{| class="wikitable"
|-
! style="width:50%;"|Java !! style="width:50%;"|C#
|-
| Type checks and downcasts are injected into client code (the code ''referencing'' the generics). Compared to non-generic code with manual casts, these casts will be the same,<ref>{{cite web|author=Angelika Langer |url=http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ110 |title=Java Generics FAQs - Under The Hood Of The Compiler - Angelika Langer Training/Consulting |publisher=AngelikaLanger.com |date=2013-04-16 |accessdate=2013-08-18}}</ref> but compared to compile-time verified code that would not need runtime casts and checks, these operations represent a performance overhead.
| C#/.NET generics guarantee type-safety and are verified at compile time, making extra checks/casts are unnecessary at runtime. Hence, generic code will run ''faster'' than non-generic (or type-erased) code that require casts when handling non-generic or type-erased objects.
|-
| Cannot use primitive types as type parameters; instead, the developer must use the wrapper type corresponding to the primitive type. This incurs extra performance overhead by requiring boxing and unboxing conversions as well a memory and garbage collection pressure, as the wrappers will be heap-allocated as opposed to stack-allocated.
| Primitive and value types are allowed as type parameters in generic realizations. At runtime code will be synthesized and compiled for each unique combination of type parameters upon first use. Generics that are realized with primitive/value type do not require boxing/unboxing conversions.
|-
| Generic exceptions are not allowed<ref>{{cite web|author=Angelika Langer |url=http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ302 |title=Java Generics FAQs - Under The Hood Of The Compiler - Angelika Langer Training/Consulting |publisher=AngelikaLanger.com |date=2013-04-16 |accessdate=2013-08-18}}</ref> and a type parameter cannot be used in a catch clause<ref>{{cite web|author=Angelika Langer |url=http://www.angelikalanger.com/GenericsFAQ/FAQSections/TechnicalDetails.html#FAQ304 |title=Java Generics FAQs - Under The Hood Of The Compiler - Angelika Langer Training/Consulting |publisher=AngelikaLanger.com |date=2013-04-16 |accessdate=2013-08-18}}</ref>
| Can both define generic exceptions and use those in catch clauses
|-
| Static members are shared across all generic realizations<ref>[http://www.angelikalanger.com/GenericsFAQ/FAQSections/TypeParameters.html#Is there one instances of a static field per instantiation of a parameterized type?]</ref> (during type erasure all realizations are folded into a single class)
| Static members are separate for each generic realization. A generic realization is a unique class.
|-
| Type parameters cannot be used in declarations of static fields/methods or in definitions of static inner classes
| No restrictions on use of type parameters
|-
| Cannot create an array where the component type is a generic realization (concrete parameterized type)
<source lang=Java>
Object tenPairs =
    new Pair<Integer, String>[10]; // error
</source>
| A generic realization is a 1st class citizen and can be used as any other class; also an array component
<source lang=CSharp>
object tenPairs =
    new Pair<int, string>[10]; // OK
</source>
|-
| Cannot create an array where the component type is a type parameter
<source lang=Java>
public class Lookup<TKey,TValue> {
    public TValue[] getEmptyValues(TKey key) {
        return new TValue[0]; // error
    }
}
</source>
| Type parameters represent actual, discrete classes and can be used like any other type within the generic definition.
<source lang=CSharp>
public class Lookup<TKey, TValue> {
    public TValue[] GetEmptyValues(TKey key) {
        return new TValue[0]; // OK
    }
}
</source>
|-
| There is no class literal for a concrete realization of a generic type
| A generic realization is an actual class.
|-
| <code>instanceof</code> is not allowed with type parameters or concrete generic realizations
| The <code>is</code> and <code>as</code> operators work the same for type parameters as for any other type.
|-
| Cannot create new instances using a type parameter as the type
| With a constructor constraint, generic methods or methods of generic classes can create instances of classes that have default constructors.
|-
| Type information is erased during compilation. Special extensions to reflection must be used to discover the original type.
| Type information about C# generic types is fully preserved at runtime, and allows complete reflection support as well as instantiation of generic types.
|-
| Reflection cannot be used to construct new generic realizations. During compilation extra code (typecasts) are injected into the ''client'' code of generics. This precludes creating new realizations later.
| Reflection can be used to create new realizations for new combinations of type parameters.
|}

C# allows generics directly for primitive types. Java, instead, allows the use of boxed types as type parameters (e.g., <code>List&lt;Integer&gt;</code> instead of <code>List&lt;int&gt;</code>). This comes at a cost since all such values need to be boxed/unboxed when used, and they all need to be heap-allocated. However, a generic type can be specialized with an array type of a primitive type in Java, for example <code>List&lt;int[]&gt;</code> is allowed.<ref name="generics">[http://www.artima.com/intv/genericsP.html Generics in C#, Java, and C++]</ref>

==== Migration compatibility ====
Java's type erasure design was motivated by a design requirement to achieve ''migration compatibility'' - not to be confused with [[backward compatibility]]. In particular, the original requirement was "''? there should be a clean, demonstrable migration path for the Collections APIs that were introduced in the Java 2 platform''".<ref>JSR 14: http://www.jcp.org/en/jsr/detail?id=14</ref> This was designed so that any new generic collections should be passable to methods that expected one of the pre-existing collection classes.<ref>{{cite web|author=Neal Gafter |url=http://gafter.blogspot.com/2004/09/puzzling-through-erasure-answer.html |title=Neal Gafter's blog: Puzzling Through Erasure: answer section |publisher=Gafter.blogspot.com |date=2004-09-23 |accessdate=2013-08-18}}</ref>

C# generics were introduced into the language while preserving full backward compatibility, but did not preserve full ''migration compatibility'': Old code (pre C# 2.0) runs unchanged on the new generics-aware runtime without recompilation. As for ''migration compatibility'', new generic collection classes and interfaces were developed that supplemented the non-generic .NET 1.x collections rather than replacing them. In addition to generic collection interfaces, the new generic collection classes implement the non-generic collection interfaces where possible. This prevents the use of new generic collections with pre-existing (non-generic aware) methods, if those methods are coded to use the collection ''classes''.

==== Covariance and contravariance ====
{{Further|Covariance and contravariance (computer science)}}
Covariance and contravariance is supported by both languages. Java has use-site variance that allows a single generic class to declare members using both co- and contravariance. C# has define-site variance for generic interfaces and delegates. Variance is not supported directly on classes but is supported through their implementation of variant interfaces. C# also has use-site covariance support for methods and delegates.

=== Functional programming ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[#Functional programming|Functional programming]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Method references || {{no}}; but see [[#Delegates / method references|Delegates / method references]] || {{yes}}
|-
|[[Closure (computer science)|Closures]] || {{no}}; but see [[#Delegates / method references|Delegates / method references]] || {{yes}}
|-
|[[Lambda expressions]] || {{no}}; but see [[#Delegates / method references|Delegates / method references]] || {{yes}}
|-
|[[Abstract syntax tree|Expression trees]] || {{no}} || {{yes}}
|-
|Generic query language || {{no}} || {{yes}}
|}

==== Closures ====
A closure is an inline function that captures variables from its lexical scope.

C# supports closures as anonymous methods or [[Anonymous function#C#lambda expressions|lambda expressions]] with full-featured [[Closure (computer science)|closure]] semantics.<ref>{{cite web| url = http://msdn.microsoft.com/en-ca/magazine/cc301810.aspx | work = MSDN Magazine | title = An Introduction to Delegates | year = 2001 | month = April | accessdate = 2008-12-23 | last = Richter | first = Jeffrey | authorlink = Jeffrey Richter}}</ref><ref>{{cite web| url = http://diditwith.net/PermaLink,guid,235646ae-3476-4893-899d-105e4d48c25b.aspx | work = Did it with .NET | title = What's In A Closure? | last = Campbell | first = Dustin | date = 9 February 2007 | accessdate = 2008-12-23}}</ref>

In Java, anonymous inner classes remains the preferred way to emulate closures. This is a more verbose construction.

This approach also has some differences compared to real closures, notably more controlled access to variables from the enclosing scopes: only final members can be referenced.

When a reference to a method can be passed around for later execution, a problem arises about what to do when the method has references to variables/parameters in its lexical scope. C# closures can access any variable/parameter from its lexical scope. In Java's anonymous inner classes, only references to final members of the lexical scope are allowed, thus requiring the developer to mark which variables to make available, and in what state (possibly requiring boxing).

While Java does not currently feature closures, it has been announced that some form of closures or lambdas will be included in JDK 8 that at latest update (10 October 2010) is scheduled for release "late 2012".<ref>Mark Reinhold?s Blog: Plan B: The details [http://blogs.sun.com/mr/entry/plan_b_details] retrieved {{date}}</ref>

==== Lambdas and expression trees ====

C# features a special type of in-line [[Closure (computer science)|closure]]s called [[Anonymous function#C#lambda expressions|lambdas]]. These are anonymous methods: they have a signature and a body, but no name. They are mainly used to specify local function-valued arguments in calls to other methods, a technique mainly associated with [[functional programming]]. On top of that, lambda functions can double as a way to define special data structures called expression trees. Whether they are seen as an executable function or as a data structure depends on compiler [[type inference]] and what type of variable or parameter they are assigned or cast to. Lambdas and expression trees play key roles in [[LINQ]]. Java does not feature lambdas or expression trees; its primary mechanism for inline scope capture and method definition is the anonymous inner class syntax.

=== Late binding ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[#Runtime binding|Runtime (dynamic) binding]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Late-bound (dynamic) type || {{no}} || {{yes}}
|}

=== Runtime type information and manipulation ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[#Runtime type information and manipulation|Runtime type information and manipulation]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Runtime type information || {{yes}}; but with type erasure || {{yes}}
|-
|Runtime generics realization || {{no}} || {{yes}}
|-
|Runtime type construction || {{no}}; third party tools exist  || {{yes}}
|}

=== Statements ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Statements !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Loop (computing)|Loops]] || {{yes}} || {{yes}}
|-
|[[Conditional (programming)|Conditionals]] || {{yes}} || {{yes}}
|-
|Flow control || {{yes}} || {{yes}}
|-
|[[Assignment (computer science)|Assignment]] || {{yes}} || {{yes}}
|-
|Exception control || {{yes}} || {{yes}}
|-
|Variable declaration || {{yes}} || {{yes}}
|-
|Variable type inference || {{no}} || {{yes}}
|-
|Deterministic disposal (ARM-blocks) || {{yes}} (starting with [[Java 7]]) || {{yes}}
|}

=== Expressions and operators ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Expressions and operators !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Arithmetic operators || {{yes}} || {{yes}}
|-
|Logical operators || {{yes}} || {{yes}}
|-
|Bitwise logic operators || {{yes}} || {{yes}}
|-
|Conditional || {{yes}} || {{yes}}
|-
|String concatenation || {{yes}} || {{yes}}
|-
|Casts || {{yes}} || {{yes}}
|-
|[[Boxing (programming)|Boxing]] || {{yes}}; implicit || {{yes}}; implicit
|-
|[[Auto-unboxing|Unboxing]] || {{yes}}; implicit || {{yes}}; explicit
|-
|Lifted operators || {{no}} || {{yes}}
|-
|Overflow control || {{no}} || {{yes}}
|-
|Strict floating point evaluation || {{yes}}; opt-in/out || {{no}}
|-
|Verbatim (here-)strings || {{no}} || {{yes}}<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: D. Now For Something Completely Different: 13. Verbatim Strings
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = 
 | accessdate  = 2012-09-11
}}</ref>
|}

==== Boxing and unboxing ====
Both languages allow [[Autoboxing|automatic boxing]] and unboxing, i.e. they allow for implicit casting between any primitive types and the corresponding reference types. <br/>
In C#, the primitive types are subtypes of the Object type. In Java this is not true; any given primitive type and the corresponding wrapper type have no specific relationship with each other, except for autoboxing and unboxing, which act as [[syntactic sugar]] for interchanging between them. This was done intentionally, to maintain backward compatibility with prior versions of Java, in which no automatic casting was allowed, and the programmer worked with two separate sets of types: the primitive types, and the wrapper (reference) type hierarchy.<ref>''The separation of primitive and reference types is a fundamental property of the Java programming language.'': [http://www.jcp.org/en/jsr/detail?id=14]</ref>

This difference has the following consequences. First of all, in C#, primitive types can define methods, such as an override of Object's <code>ToString()</code> method. In Java, this task is accomplished by the [[primitive wrapper class]]es. <br/>
Secondly, in Java an extra cast is needed whenever one tries to directly [[Reference (computer science)|dereference]] a primitive value, as it will not be boxed automatically. The expression <code>((Integer)42).toString()</code> will convert an integer literal to string in Java while <code>42.ToString()</code> performs the same operation in C#. This is because the latter one is actually an instance call on the primitive value <code>42</code>, while the former one is an instance call on an object of type <tt>java.lang.Integer</tt>.

Finally, another difference is that Java makes heavy use of boxed types in [[Generic programming|generics]] (see [[#Generics|below]]).

=== Exceptions ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Exceptions !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Checked exceptions || {{yes}} || {{no}}
|-
|Try-catch-finally || {{yes}} || {{yes}}
|}

==== Checked exceptions ====

Java supports [[checked exceptions]] (in addition to [[checked exceptions|unchecked exceptions]]). C# only supports unchecked exceptions. Checked exceptions force the programmer to either declare the exception thrown in a method, or to catch the thrown exception using a <code>try-catch</code> clause.

Checked exceptions can encourage good programming practice, ensuring that all errors are dealt with. However [[Anders Hejlsberg]], chief C# language architect, argues that they were to some extent an experiment in Java and that they have not been shown to be worthwhile except in small example programs.<ref>[http://www.artima.com/intv/handcuffs.html The Trouble with Checked Exceptions]</ref><ref>[http://msdn2.microsoft.com/en-us/vcsharp/aa336812.aspx Why doesn't C# have exception specifications?]</ref>

One criticism is that checked exceptions encourage programmers to use an empty catch block (<code>catch (Exception e) {}</code>),<ref name=bruceeckel>{{cite web |last=Eckel |first=Bruce |url=http://www.mindview.net/Etc/Discussions/CheckedExceptions |title=Does Java need Checked Exceptions? |deadurl=no |accessdate=2012-12-06}}</ref> which silently swallows exceptions, rather than letting the exceptions propagate to a higher-level exception-handling routine. In some cases, however, [[exception chaining]] can be applied instead, by re-throwing the exception in a wrapper exception. For example, if an object is changed to access a database instead of a file, an {{Javadoc:SE|java/sql|SQLException}} could be caught and re-thrown as an {{Javadoc:SE|java/io|IOException}}, since the caller may not need to know the inner workings of the object.

However, not all programmers agree with this stance, with James Gosling and others maintaining that checked exceptions are a good idea and it's people misusing them that cause the issues. Silently catching exceptions is possible, yes, but you have to explicitly say what you want to do with the exception as oppose to unchecked exceptions that let you do nothing by default. You can ignore it, but you have to explicitly write code to ignore it.<ref>{{cite web|url=http://www.artima.com/intv/solid.html |title=Failure and Exceptions |publisher=Artima.com |date=2003-09-22 |accessdate=2013-08-18}}</ref><ref>{{cite web|url=http://www.shaunabram.com/checked-exceptions-article/ |title=Checked Exceptions |publisher=Shaun Abram |date= |accessdate=2013-08-18}}</ref>

==== Try-catch-finally ====

There are also differences between the two languages in treating the <code>try-finally</code> statement. The <code>finally</code> block is always executed, even if the <code>try</code> block contains control-passing statements like <code>throw</code> or <code>return</code>. In Java, this may result in unexpected behavior, if the <code>try</code> block is left by a <code>return</code> statement with some value, and then the <code>finally</code> block that is executed afterward is also left by a <code>return</code> statement with a different value. C# resolves this problem by prohibiting any control-passing statements like <code>return</code> or <code>break</code> in the <code>finally</code> block.

A common reason for using <code>try-finally</code> blocks is to guard resource managing code, thus guaranteeing the release of precious resources in the finally block. C# features the <code>using</code> statement as a syntactic shorthand for this common scenario, in which the <code>Dispose()</code> method of the object of the <code>using</code> is always called.

A rather subtle difference is the moment a stack trace is created when an exception is being thrown. In Java, the stack trace is created in the moment the exception is created.

<source lang=Java>
class Foo {
    Exception e = new Exception();
    int foo() throws Exception {
        throw e;
    }
}
</source>

The exception in the statement above will always contain the constructor's stack-trace - no matter how often foo is called.
In C# on the other hand, the stack-trace is created the moment "throw" is executed.
<source lang=CSharp>
class Foo 
{
    Exception e = new Exception();
    int foo() 
    {
        try 
        {
            throw e;
        } 
        catch (Exception e) 
        {
            throw;
        }
    }
}
</source>

In the code above, the exception will contain the stack-trace of the first throw-line. When catching an exception, there are two options in case the exception should be rethrown: <code>throw</code> will just rethrow the original exception with the original stack, while <code>throw e</code> would have created a new stack trace.

==== Finally blocks ====

Java allows flow of control to leave the <code>finally</code> block of a <code>try</code> statement, regardless of the way it was entered. This can cause another control flow statement (such as <code>return</code>) to be terminated mid-execution. For example:

<source lang=Java>
int foo() {
    try {
        return 0;
    } finally {
        return 1;
    }
}
</source>

In the above code, the <code>return</code> statement within <code>try</code> block causes control to leave it, and therefore <code>finally</code> block is executed before the actual return happens. However, <code>finally</code> block itself performs a return as well; thus, the original return that caused it to be entered is not actually executed, and the above method returns 1 rather than 0.

C# does not allow any statements that allow control flow to leave the <code>finally</code> block prematurely, except for <code>throw</code>. In particular, <code>return</code> is not allowed at all, <code>goto</code> is not allowed, if the target label is outside the <code>finally</code> block, and <code>continue</code> and <code>break</code> are not allowed, if the nearest enclosing loop is outside the <code>finally</code> block.

=== Arrays and collections ===

[[Array data structure|Arrays]] and [[Collection (computing)|collections]] are concepts featured by both languages.

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[Array data type|Arrays]] and [[Collection (computing)|Collections]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Abstract data type]]s || {{yes}} || {{yes}}
|-
|One-dimensional, zero-based index arrays || {{yes}} || {{yes}}
|-
|Multidimensional arrays, rectangular (single array)|| {{no}} || {{yes}}
|-
|Multidimensional arrays, jagged (arrays of arrays)|| {{yes}} || {{yes}}
|-
|Non-zero based arrays || {{no}} || {{some}}
|-
|Unified arrays and collections || {{no}} || {{yes}}
|-
|[[Associative array|Maps/dictionaries]] || {{yes}} || {{yes}}
|-
|Sorted dictionaries || {{yes}} || {{yes}}<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/f7fta44c.aspx |title=SortedDictionary(TKey, TValue) Class (System.Collections.Generic) |publisher=Msdn.microsoft.com |date= |accessdate=2013-08-18}}</ref>
|-
|Sets || {{yes}} || {{yes}}
|-
|Sorted sets || {{yes}} || {{yes}}<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/dd412070.aspx |title=SortedSet(T) Class (System.Collections.Generic) |publisher=Msdn.microsoft.com |date= |accessdate=2013-08-18}}</ref>
|-
|Lists/vectors || {{yes}} || {{yes}}
|-
|[[Queue (data structure)|Queues/stacks]] || {{yes}} || {{yes}}
|-
|[[Priority queue]] || {{yes}} || {{no}}
|-
|Bags/multisets || {{yes}} || {{yes}}
|-
|Concurrency optimized collections || {{yes}} || {{yes}}<ref>{{cite web|title=System.Collections.Concurrent Namespace|url=http://msdn.microsoft.com/en-us/library/system.collections.concurrent.aspx|publisher=Microsoft|accessdate=12 March 2013}}</ref> 
|}

The syntax used to declare and access arrays is identical, except that C# has added syntax for declaring and manipulating multidimensional arrays.

{| class="wikitable" style="width:90%;"
|-
! style="width:50%;"| Java !! style="width:50%;"| C#
|-
| Arrays are implicitly direct specializations of <code>Object</code>. They are not unified with collection types.
| Arrays in C# are implicit specializations of the <code>System.Array</code> class that implements a number of collection interfaces.
|-
| Arrays and collections are completely separate with no unification. Arrays cannot be passed where sequences or collections are expected
| Arrays can be passed where sequences (<code>IEnumerable</code>s) or collections/list interfaces are expected. However, the collection operations that alter the number of elements (insert/add/remove) will throw exceptions as these operations are not supported by arrays.
|-
| The <code>for</code> statement accepts either arrays or <code>Iterable</code>s. All collections implement <code>Iterable</code>. This means that the same short syntax can be used in for-loops.
| The <code>foreach</code> statement iterates through a sequence using the <code>IEnumerable</code> or<code>IEnumerable&lt;T&gt;</code> interface. Because arrays always implicitly implement these interfaces, the loop will iterate through arrays as well.
|-
|colspan=2|In both languages arrays are covariant. This means that a <code>String[]</code> array is assignable to variables of <code>Object[]</code> because <code>String</code> is a specialization of (assignable to) <code>Object</code>. In both languages the arrays will perform a type check when inserting new values because type-safety would otherwise be compromised. This is in contrast to how generic collections have been implemented in both languages.
|-
| No [[Two-dimensional array|multidimensional arrays]] (rectangular arrays), but arrays of references to arrays ([[Array data structure#Efficiency comparison with other data structures|jagged array]]s).
| [[Two-dimensional array|Multidimensional arrays]] (rectangular arrays), as well as arrays of references to arrays ([[Array data structure#Efficiency comparison with other data structures|jagged array]]s).
|-
| Arrays cannot be resized (though use of the <code>System.arraycopy()</code> method can allow for multi-step array resizing)
| Arrays can be resized while preserving existing values using the <code>Array.Resize()</code> static array method.
|-
| Implemented as a [[retrofit]] for the <code lang=Java>java.util</code> library having extra features, like data structures like sets and linked sets that are not present in C#, and has a number of algorithms to manipulate elements of a collection, like finding the largest element based on some Comparator object, finding the smallest element, finding sublists within a list, reverse the contents of a list, shuffle the contents of a list, create immutable versions of a collection, performs sorts, and make binary searches.<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: C. An Ever So Slight Feeling Of D?j? Vu: 6. Collections
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = The Java collection framework is similar to that in C# except for the fact that it can be considered a superset of the C# collection framework since it contains a number of extra features. The Java collection framework contains data structures that are missing from those in C# such as sets and linked lists. Also the Java collections framework not only has methods that enable one to access unsafe collections in a thread safe manner but contains thread-safe versions of most of the data structures as well. Finally, the Java collections framework has a number of algorithms for manipulating the elements within the data structures including algorithms that can do the following; find the largest element based on some Comparator, find the smallest element, find sublists within a list, reverse the contents of a list, shuffle the contents of a list, creates immutable versions of a colection, performs sorts, and binary searches.
 | accessdate  = 2012-09-10
}}</ref>
| The C# collections framework consists of classes from the <code>System.Collections</code> and the <code>System.Collections.Generic</code> namespaces with a number of useful interfaces, abstract classes, and data structures.<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: C. An Ever So Slight Feeling Of D?j? Vu: 6. Collections
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = The C# collections framework consists of the classes in the System.Collections and the System.Collections.Generic namespaces. The Systems.Collections namespace contains interfaces and abstract classes that represent abstract data types such as IList, IEnumerable, IDictionary, ICollection, and CollectionBase which enable developers to manipulate data structures independently of how they are actually implemented as long as the data structures inherit from the abstract data types. The System.Collections namespace also contains some concrete implementations of data structures such as ArrayList, Stack, Queue, HashTable and SortedList. All four of the concrete data structure implementations enable one to obtain synchronized wrappers to the collection which allows for access in a thread-safe manner. The System.Collections.Generic namespace has generic implementations of the key data structures in the System.Collections namespace including generic List<T>, Stack<T>,Queue<T>, Dictionary<K,T> and SortedDictionary<K,T> classes.
 | accessdate  = 2012-09-10
}}</ref>
|}

Multidimensional arrays can in some cases increase performance because of increased [[Memory locality|locality]] (as there is a single pointer dereference instead of one for every dimension of the array, as is the case for jagged arrays). However, since all array element access in a multidimensional array requires multiplication/shift between the two or more dimensions, this is an advantage only in very random access scenarios.

Another difference is that the entire multidimensional array can be allocated with a single application of operator <code>new</code>, while jagged arrays require loops and allocations for every dimension. Note, though, that Java provides a syntactic construct for allocating a jagged array with regular lengths; the loops and multiple allocations are then performed by the virtual machine and need not be explicit at the source level.

Both languages feature an extensive set of collection types that includes various ordered and unordered types of lists, maps/dictionaries, sets, etc.

Java does support also the syntax of C/C++, which is not so clear to read:<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | accessdate  = 2012-09-06
}}</ref>

{| class="wikitable"
|-
! Java !! C#
|-
| <source lang=Java>
 // Is valid, as numbers is an object of type short[] 
 short[] numbers = new short[100];
 // Is valid, but it isn't clear that values 
 // is an object of type double[]
 double values[] = new double[100];</source> || <source lang=CSharp>
 // Is valid, as numbers is an object of type short[] 
 short[] numbers = new short[100];
 double values[] = new double[100]; // Won't compile!</source>
|}

=== Metadata annotations ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[Metadata]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Metadata annotations/attributes || {{yes|Interface based}}; user-defined annotations can be created<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: Metadata Annotations
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = However a key difference between C# attributes and Java annotations is that one can create meta-annotations (i.e. annotations on annotations) in Java but can not do the same in C#. Developers can create their own custom annotations by creating an annotation type which is similar to an interface except that the keyword @interface is used to define it.
 | accessdate  = 2012-09-06
}}</ref> || {{yes|Class based}}
|-
|Positional arguments || {{no}}; unless a single argument || {{yes}}
|-
|Named arguments || {{yes}} || {{yes}}
|-
|Default values || {{yes|At definition}} || {{yes|Through initialization}}
|-
|Nested types || {{yes}} || {{yes}}
|-
|Specialization || {{no}} || {{yes}}
|-
|Conditional metadata || {{no}} || {{yes}}
|}

=== Preprocessing, compilation and packaging ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[Preprocessor|Preprocessing]], [[Compiler|Compilation]] and [[Modular programming|Packaging]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Namespaces]] || {{yes|Packages}} || {{yes|Namespaces}}
|-
|File contents || {{no|Restricted}} || {{yes|Free}}
|-
|Packaging || {{yes|Package}} || {{yes|Assembly}}
|-
|Classes/assembly search path || {{partial|ClassPath}} || {{yes|Both compile-time and runtime}}<ref>{{cite web|url=http://msdn.microsoft.com/en-us/library/823z9h8w.aspx |title=Element |publisher=Msdn.microsoft.com |date= |accessdate=2013-08-18}}</ref><ref>{{cite web|url=http://www.vcskicks.com/csharp_assembly.php |title=C# Assembly - Custom Reference Path - Visual C# Kicks |publisher=Vcskicks.com |date= |accessdate=2013-08-18}}</ref>
|-
|Conditional compilation || {{no}} || {{yes}}
|-
|Custom errors/warnings || {{no}} || {{yes}}
|-
|Explicit regions || {{no}} || {{yes}}
|}

==== Namespaces and file contents ====

In C#, [[namespace]]s are similar to those in [[C++]]. Unlike [[Java package|package]] names in Java, a namespace is not in any way tied to the location of the source file. While it is not strictly necessary for a Java source file location to mirror its package directory structure, it is the conventional organization.

Both languages allow importing of classes (e.g., <code>'''import''' java.util.*</code> in Java), allowing a class to be referenced using only its name. Sometimes classes with the same name exist in multiple namespaces or packages. Such classes can be referenced by using fully qualified names, or by importing only selected classes with different names. To do this, Java allows importing a single class (e.g., <code>'''import''' java.util.List</code>). C# allows importing classes under a new local name using the following syntax: <code>'''using''' Console = System.Console</code>. It also allows importing specializations of classes in the form of <code>'''using''' IntList = System.Collections.Generic.List&lt;'''int'''&gt;</code>.

Java has a [[static import]] syntax that allows using the short name of some or all of the static methods/fields in a class (e.g., allowing <code>foo(bar)</code> where <code>foo()</code> can be statically imported from another class). C# has a static class syntax (not to be confused with static inner classes in Java), which restricts a class to only contain static methods. C# 3.0 introduces [[extension method]]s to allow users to statically add a method to a type (e.g., allowing <code>foo.bar()</code> where <code>bar()</code> can be an imported extension method working on the type of <code>foo</code>).

The [[Sun Microsystems]] Java compiler requires that a source file name must match the only public class inside it, while C# allows multiple public classes in the same file, and puts no restrictions on the file name. C# 2.0 and later allows splitting a class definition into several files by using the <code>partial</code> keyword in the source code. In Java, a public class will always be in its own source file. In C#, source code files and logical units separation are not tightly related.

==== Conditional compilation ====

Unlike Java, C# implements [[conditional compilation]] using [[preprocessor directive]]s. It also provides a <code>Conditional</code> [[Annotation|attribute]] to define methods that are only called when a given compilation constant is defined. This way, [[Assertion (computing)|assertions]] can be provided as a framework feature with the method <code>Debug.Assert()</code>, which is only evaluated when the <code>DEBUG</code> constant is defined. Since version 1.4, Java provides a language feature for assertions, which are turned off at runtime by default but can be enabled using the <code>-enableassertions</code> or <code>-ea</code> switch when invoking the JVM.

=== Threading and asynchronous features ===

Both languages include thread [[synchronization]] mechanisms as part of their language syntax.

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| [[Thread (computer science)|Threading]] and [[Synchronization (computer science)|Synchronization]] !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|Threads || {{yes}} || {{yes}}
|-
|[[Thread pool pattern|Thread pool]] || {{yes}} || {{yes}}
|-
|Task-based parallelism || {{partial}}<ref>Fork-join framework included with Java SE 7. Will be part of Java EE 7 when released.</ref> || {{yes}}<ref>[http://msdn.microsoft.com/en-us/library/dd460717.aspx Microsoft Task Parallel Library]</ref>
|-
|[[Semaphore (programming)|Semaphores]] || {{yes}} || {{yes}}
|-
|[[Monitor (synchronization)|Monitors]] || {{yes}} || {{yes}}
|-
|Thread local variables || {{yes}} || {{yes}}; ThreadStaticAttribute
|}

=== Native interoperability ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Native interoperability !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Cross-language interoperability]] || {{no}} (only with [[CORBA]] or [[JNI]])<ref name="cross-plattform" /> || {{yes}}; C# was designed for it<ref name="cross-plattform">{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: C. An Ever So Slight Feeling Of D?j? Vu: 15. Cross Language Interoperability
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = There are a number of ways cross language interoperability works in Java. First of all, there is the Java Native Interface (JNI) ? Java also has the ability to interact with distributed objects that use the common object request broker architecture (CORBA) via Java IDL. ? C# and the .NET runtime were created with seamless cross-language interoperability as a design goal.
 | accessdate  = 2012-09-10
}}</ref>
|-
|External/native methods || {{yes}} || {{yes}}
|-
|[[Marshalling (computer science)|Marshalling]] || {{no|External glue code required}} || {{yes}}; metadata controlled
|-
|[[Pointer (computer programming)|Pointer]]s and arithmetics || {{no}} || {{yes}}
|-
|Native types || {{no}} || {{yes}}
|-
|Fixed-size buffers || {{no}} || {{yes}}
|-
|Explicit stack allocation || {{no}} || {{yes}}
|-
|Address-of || {{no}} || {{yes}}
|-
|[[Object pinning#Moving vs. non-moving|Object pinning (fix variable to address)]] || {{no}} || {{yes}}
|}

The [[Java Native Interface]] (JNI) feature allows Java programs to call non-Java code. However, JNI does require the code being called to follow several conventions and imposes restrictions on types and names used. This means that an extra adaption layer between legacy code and Java is often needed. This adaption code must be coded in a non-Java language, often C or C++. [[Java Native Access]] (JNA) allows easier calling of native code that only requires writing Java code, but comes at a performance cost.

In addition, third party [[Library (computing)|libraries]] provide for Java-[[Component Object Model|COM]] bridging, e.g. [http://jacob-project.sourceforge.net/ JACOB] ([[Free software|free]]), and [http://j-integra.intrinsyc.com/products/com/ J-Integra for COM] ([[Proprietary software|proprietary]]).

.NET Platform Invoke ([[Platform Invocation Services|P/Invoke]]) offers the same capability by allowing calls from C# to what Microsoft refers to as [[Managed code|unmanaged code]]. Through metadata attributes the programmer can control exactly how the parameters and results are [[Marshalling (computer science)|marshalled]], thus avoiding the need for extra adaption code. P/Invoke allows almost complete access to procedural APIs (such as Win32 or POSIX), but limited access to C++ class libraries.

In addition, .NET Framework also provides a .NET-COM bridge, allowing access to COM components as, if they were first-class .NET objects.

C# also allows the programmer to disable the normal type-checking and other safety features of the [[Common Language Runtime|CLR]], which then enables the use of [[Pointer (computer programming)|pointer variables]]. When using this feature, the programmer must mark the code using the <code>unsafe</code> keyword. JNI, P/Invoke, and "unsafe" code are equally risky features, exposing possible security holes and application instability. An advantage of unsafe, managed code over P/Invoke or JNI is that it allows the programmer to continue to work in the familiar C# environment to accomplish some tasks that otherwise would require calling out to unmanaged code. An assembly (program or library) using unsafe code must be compiled with a special switch and will be marked as such. This enables runtime environments to take special precautions before executing potentially harmful code.

=== Platform support ===

{| class="wikitable" style="width:80%;"
|-
! style="width:40%;"| Platform support !! style="width:30%;"|Java !! style="width:30%;"|C#
|-
|[[Linux]] || {{yes}} || {{yes|via [[Mono (software)|Mono]]}}
|-
|[[Mac OS X]] || {{yes}} || {{yes|via [[Mono (software)|Mono]]}}
|-
|[[Solaris (operating system)|Solaris]] || {{yes}} || {{yes|via [[Mono (software)|Mono]]}}
|-
|[[FreeBSD]] || {{yes}} || {{yes|via [[Mono (software)|Mono]]}}
|-
|[[IBM AIX|AIX]] || {{yes}} || {{partial}}?
|-
|[[iOS (Apple)|iOS]] || {{no|only partially via C# or Objective C<ref>{{cite web|url=http://code.google.com/p/j2objc/ |title=j2objc - A Java to iOS Objective-C translation tool and runtime. - Google Project Hosting |publisher=Code.google.com |date= |accessdate=2013-08-18}}</ref> code generators, or the HTML5-based Oracle ADF Mobile framework<ref>{{cite web|url=http://www.oracle.com/technetwork/developer-tools/adf-mobile/overview/index.html |title=Oracle ADF Mobile |publisher=Oracle.com |date= |accessdate=2013-08-18}}</ref>}} || {{yes|via [[Mono (software)|Mono]]}}
|-
|[[Microsoft Windows|Windows]] || {{yes}} || {{yes}}
|-
|[[Windows Mobile]] || {{yes}} || {{yes}}
|-
|[[Windows Phone]] || {{no|via C# code generator only}}<ref>{{cite web|author=By markpiller on April 20th, 2011 |url=http://blog.themidnightcoders.com/index.php/category/windows-phone7/ |title=Windows Phone7 ? Midnight Coders Blog |publisher=Blog.themidnightcoders.com |date= |accessdate=2013-08-18}}</ref> || {{yes}}
|-
|[[Android (operating system)|Android]] || {{yes|via [[Dalvik (software)|Dalvik]]}} || {{yes|via [[Mono (software)|Mono]]}}
|-
|[[Java ME|Feature phones]] || {{yes}} || {{no}}
|-
|[[Symbian]] || {{yes}} || {{partial|Deprecated}}<ref>{{cite web|author=?esky |url=http://en.wikipedia.org/wiki/Symbian#Other_languages |title=Symbian - Wikipedia, the free encyclopedia |publisher=En.wikipedia.org |date= |accessdate=2013-08-18}}</ref>
|-
|[[BlackBerry OS|Blackberry]] || {{yes}} || {{yes|via cross-compiler}}<ref>{{cite web|url=http://code.google.com/p/csharpblackberry/ |title=csharpblackberry - A tool that allow you to write applications for a Blackberry mobile device using C# - Google Project Hosting |publisher=Code.google.com |date= |accessdate=2013-08-18}}</ref>
|}

=== Syntax ===
Both languages are considered "curly brace" languages in the C/C++ family. Overall the syntaxes of the languages are very similar. The syntax at the statement and expression level is almost identical with obvious inspiration from the C/C++ tradition. At type definition level (classes and interfaces) some minor differences exist. Java is explicit about extending classes and implementing interfaces, while C# infers this from the kind of types a new class/interface derives from.

C# supports more features than Java, which to some extent is also evident in the syntax that specifies more keywords and more grammar rules than Java.

==== Keywords and backward compatibility ====
As the languages evolved, the language designers for both languages have faced situations where they wanted to extend the languages with new keywords or syntax. New keywords in particular may break existing code at source level, i.e. older code may no longer compile, if presented to a compiler for a later version of the language. Language designers are keen to avoid such regressions. The designers of the two languages have been following different paths when addressing this problem.

Java language designers have avoided new keywords as much as possible, preferring instead to introduce new syntactic constructs that were not legal before or to reuse existing keywords in new contexts. This way they didn't jeopardize backward compatibility. An example of the former can be found in how the <code>for</code> loop was extended to accept iterable types. An example of the latter can be found in how the <code>extends</code> and (especially) the <code>super</code> keywords were reused for specifying type bounds when generics were introduced in Java 1.5. At one time (Java 1.4) a new keyword <code>assert</code> was introduced that was not reserved as a keyword before. This had the potential to render previously valid code invalid, if for instance the code used <code>assert</code> as an identifier. The designers chose to address this problem with a four step solution: 1) Introducing a compiler switch that indicates if Java 1.4 or later should be used, 2) Only marking <code>assert</code> as a keyword when compiling as Java 1.4 and later, 3) Defaulting to 1.3 to avoid rendering previous (non 1.4 aware code) invalid and 4) Issue warnings, if the keyword is used in Java 1.3 mode, in order to allow the developers to change the code.

C# language designers have introduced several new keywords since the first version. However, instead of defining these keywords as ''global'' keywords, they define them as ''context sensitive'' keywords. This means that even when they introduced (among others) the <code>partial</code> and <code>yield</code> keywords in C# 2.0, the use of those words as identifiers is still valid as there is no clash possible between the use as keyword and the use as identifier, given the context. Thus, the present C# syntax is fully backward compatible with source code written for any previous version without specifying the language version to be used.

== Notation and special features ==

=== Special feature keywords ===

{| class="wikitable"
|-
! keyword !! feature, example usage
|-
| <code>checked</code>, <code>unchecked</code> || In C#, <code>checked</code> statement blocks or expressions can enable run-time checking for [[arithmetic overflow]].<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: D. Now For Something Completely Different: 14. Overflow Detection
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html
 | archivedate = 2007
 | quote       = 
 | accessdate  = 2012-09-11
}}</ref>
|-
| <code>get</code>, <code>set</code> || C# implements [[property (computer science)|properties]] as part of the language syntax with their optional corresponding <code>get</code> and <code>set</code> accessors, as an alternative for the [[accessor method]]s used in Java, which is not a language feature but a coding-pattern based on method name conventions.
|-
| <code>goto</code> || C# supports the <code>[[goto (command)|goto]]</code> keyword. This can occasionally be useful, for example for implementing [[finite state machine]]s or for [[Code generation (compiler)|generated code]], but the use of a more structured method of [[control flow]] is usually recommended (see [[Goto#Usage|criticism of the goto statement]]). Java does not support the <code>goto</code> statement (but <code>goto</code> is a reserved word). However, Java does support labeled <code>break</code> and <code>continue</code> statements, which in certain situations can be used when a <code>goto</code> statement might otherwise be used.

<source lang=CSharp>
switch(color)
{
    case Color.Blue:
         Console.WriteLine("Color is blue"); break;
    case Color.DarkBlue:
         Console.WriteLine("Color is dark");
         goto case Color.Blue;
    // ...
}
</source>
|-
| <code>lock</code> || In C#, the <code>lock</code> keyword is a shorthand for synchronizing access to a block of code across threads (using a <code>Monitor</code>), wrapped in a <code>try</code> ? <code>finally</code> block.
|-
| <code>out</code>, <code>ref</code> || C# has support for output and reference [[parameter (computer science)|parameters]]. These allow returning multiple output values from a method, or passing values by reference.
|-
| <code>strictfp</code> || Java uses <code>[[strictfp]]</code> to guarantee the results of floating point operations remain the same across platforms.  C# always requires that results are the same and has no equivalent keyword.
|-
| <code>switch</code> || In C#, the [[switch statement]] also operates on strings and longs. Fallthrough is allowed for empty statements and possible via 'goto case' for statements containing code. Java's switch statement does not operate on strings (before [[Java 7]]) nor <code>long</code> primitive type but falls through for all statements (excluding those with '<code>break</code>').<ref>{{cite web
 | url         = http://www.25hoursaday.com/
 | title       = A COMPARISON OF MICROSOFT'S C# PROGRAMMING LANGUAGE TO SUN MICROSYSTEMS' JAVA PROGRAMMING LANGUAGE: An Ever So Slight Feeling Of D?j? Vu: 4. switch Statment
 | author      = Dare Obasanjo
 | authorlink  = http://www.25hoursaday.com/weblog
 | year        = 2007
 | work        = 
 | publisher   = Dare Obasanjo
 | archiveurl  = http://www.25hoursaday.com/CsharpVsJava.html#dejavu
 | archivedate = 2007
 | quote       = 
 | accessdate  = 2012-09-07
}}</ref>
|-
| <code>synchronized</code> || In Java, the <code>synchronized</code> keyword is a shorthand for synchronizing access to a block of code across threads (using a <code>Monitor</code>), wrapped in a <code>try</code> ? <code>finally</code> block.
|-
| <code>throws</code> || Java requires every method to declare the checked exceptions or superclasses of the checked exceptions that it can throw. Any method can also optionally declare the unchecked exception that it throws. C# has no such syntax.
<source lang=Java>
public int readItem() throws java.io.IOException
{
    // ...
}
</source>
|-
| <code>using</code> || In C#, <code>using</code> causes the <code>Dispose</code> method (implemented via the <code>IDisposable</code> interface) of the object declared to be executed after the code block has run or when an exception is thrown within the code block.
<source lang=CSharp>
// Create a small file "test.txt", write a string,
// ... and close it (even if an exception occurs)
using (StreamWriter file = new StreamWriter("test.txt"))
{
    file.Write("test");
}
</source>
|}

=== Numeric applications ===
To adequately support applications in the field of mathematical and financial computation, several language features exist.<ref name="computation">[http://www.pds.ewi.tudelft.nl/pubs/papers/scicomp01.pdf Java for Scientific Computation: Prospects and Problems]</ref>  For floating point operations, C# always requires that the result of an operation be the same regardless of platform, a behavior available in Java by using the [[strictfp]] keyword, which enables strict floating-point calculations for a region of code.  C# also provide provides a built-in <code>decimal</code> type which has higher accuracy than the Java/C# double (128 bits vs 64 bits).

The {{Javadoc:SE|java/math|BigDecimal}} and {{Javadoc:SE|java/math|BigInteger}} types provided with Java allow arbitrary-precision representation of numbers. {{As of| 2010}} the current stable release of the .NET framework (4.0) includes classes for manipulating arbitrary-precision integers and complex numbers (with operators overloaded for easy use so that C# BigInteger objects can be used just like any other primitive data type), but still the .NET Framework lacks classes to deal with arbitrary-precision floating point numbers (see [[Arbitrary-precision arithmetic#Arbitrary-precision software|software for arbitrary-precision arithmetic]]).

C# can help mathematical applications with the <code>checked</code> and <code>unchecked</code> operators that allow the enabling or disabling of run-time checking for [[arithmetic overflow]] for a region of code.

=== Language integrated query (LINQ) ===

{{Further|LINQ}}

C#s [[LINQ|Language Integrated Query (LINQ)]] is a collection of features designed to work together to allow for in-language querying capabilities and is a distinguishing feature between Java and C#.

LINQ consists of the following features:

* Extension methods allow existing interfaces or classes to be extended with new methods. Implementations can be shared or an interface can have a dedicated implementation.
* Lambdas allow for expression of criteria in a functional fashion.
* Expression trees allow a specific implementation to capture a lambda as an [[abstract syntax tree]] rather than an executable block. This can be utilized by implementations to represent criteria in a different language, e.g. in the form of an [[Where (SQL)|SQL where clause]] as is the case with e.g. [[Linq#LINQ to SQL (formerly called DLINQ)|Linq, LINQ to SQL]].
* Anonymous types and type inference supports capturing and working with the result type of a query. A query may both join and project over query sources that may lead to a result type that cannot be named.
* Query expressions to support a syntax familiar to [[SQL]] users.
* Nullable (lifted) types to allow for a better match with query providers that support nullable types, like e.g. [[SQL]].

== Examples ==

=== Input/output ===

Example illustrating how to copy text one line at a time from one file to another, using both languages.

{| width=100% |class="wikitable"
|-
!width=50%| Java
!width=50%| C#
|-
|valign=top|<source lang=Java>
import java.io.*;
public class FileIOTest {
    public static void main(String... args) throws IOException {
        String string = null;
        try (
            BufferedReader br = new BufferedReader(
                new FileReader( new File("input.txt") ));
            BufferedWriter bw = new BufferedWriter(
                new FileWriter( new File("output.txt") ))
        ) {
            while ((string = br.readLine()) != null) 
                bw.write(string);
        }
    }
}
</source>
|valign=top|<source lang=CSharp>
using System.IO;
class FileIOTest 
{
    public static void Main(string[] args) 
    {
        var lines = File.ReadLines("input.txt");
        using ((IDisposable)lines) 
            File.WriteAllLines("output.txt", lines);
    }
}
</source>
|-
|valign=top|Notes on the Java implementation:
* A <tt>BufferedReader</tt> is used because the program would read the input file one character at a time otherwise.
* A try-with-resources block is used to ensure the streams are properly closed even in the case of abnormal termination
|valign=top|Notes on the C# implementation:
* The <tt>ReadLines</tt> method returns an enumerable object which upon enumeration will read the file one line at a time.
* The <tt>WriteAllLines</tt> method takes an enumerable and retrieves a line at a time and writes it until the enumeration ends.
* The underlying reader will automatically allocate a buffer, thus there is no need to explicitly introduce a buffered stream.
* A <tt>using</tt> block is used to ensure that the input stream is properly closed in case of abnormal termination.
* <tt>WriteAllLines</tt> automatically closes the output stream, also in the case of an abnormal termination.
|}

=== Integration of library defined types ===

C# allows library defined types to be integrated with existing types and operators by using custom implicit/explicit conversions and operator overloading as illustrated by the following example:
{| style="width:100%;"
|-
! style="width:50%;"|Java !! style="width:50%;"| C#
|-
|
<source lang=Java>
BigInteger bigNumber =
   new BigInteger("123456789012345678901234567890");

BigInteger answer = bigNumber.multiply(new BigInteger("42"));
BigInteger square = bigNumber.multiply(bigNumber);
BigInteger sum = bigNumber.add(bigNumber);
</source>
|
<source lang=CSharp>
var bigNumber =
   BigInteger.Parse("123456789012345678901234567890");

var answer = bigNumber * 42;
var square = bigNumber * bigNumber;
var sum = bigNumber + bigNumber;
</source>
|}

=== C# delegates and equivalent Java constructs ===

{| style="width:100%;"
|-
! style="width:50%;"| Java !! style="width:50%;"| C#
|- valign="top"
|
<source lang=Java>
    // define a common interface for all invokeable objects
    // (will use the wrapper pattern)
    interface Invokeable {
        boolean invoke(String arg);
    }

    // a target class
    class Target {
        public boolean targetMethod(String arg) {
            // do something
            return true;
        }
    }

    // usage
    void doSomething() {

        // construct a target with the target method
        final Target target = new Target();

        // wrap the target
        Invokeable ivk = new Invokeable() {
            public boolean invoke(String arg) {
                return target.targetMethod(arg);
            }
        };

        // use the target through the wrapper
        boolean result = ivk.invoke("argumentstring");
    }
</source>
|<!-- This is Visual Studio Default Style. C# is generally GNU not Ritchie -->
<source lang=CSharp>
    // a target class
    class Target
    {
        public bool TargetMethod(string arg)
        {
            // do something
            return true;
        }
    }

    // usage
    void DoSomething()
    {
        // construct a target with the target method
        var target = new Target();

        // capture the delegate for later invocation
        Func<string, bool> dlg = target.TargetMethod;

        // invoke the delegate
        bool result = dlg("argumentstring");
    }
</source>
|}

=== Type lifting ===

{| style="width:100%;"
|-
! style="width:50%;"| Java !! style="width:50%;"| C#
|-
|
<source lang=Java>
Integer a = 42;
Integer b = null;

// This will generate a runtime NullPointerException,
// because it attempts to unbox the null value.
Integer c = a * b; </source>
|
<source lang=CSharp>
int? a = 42;
int? b = null;

// c will receive the null value
// because * is lifted and one of the operands are null
int? c = a * b;
</source>
|}

=== Interoperability with dynamic languages ===

This example illustrates how Java and C# can be used to create and invoke an instance of class which is implemented in another programming language. The "Deepthought" class is implemented using the [[Ruby (programming language)|Ruby programming language]] and represents a simple calculator which will multiply two input values (<tt>a</tt> and <tt>b</tt>) when the <tt>Calculate</tt> method is invoked.
{|  style="width:100%; border:none;"
|-
!width=50%|Java
!width=50%|C#
|-
|valign=top|<source lang=Java>
// initialize the engine

ScriptEngineManager factory = new ScriptEngineManager();
ScriptEngine engine = factory.getEngineByName("jruby");
Invocable invocable = (Invocable) engine;

FileReader fr = new FileReader("Deepthought.rb");
engine.eval(fr);
</source>
|valign=top|<source lang=CSharp>
// initialize the engine

var runtime = ScriptRuntime.CreateFromConfiguration();
dynamic globals = runtime.Globals;

runtime.ExecuteFile("Deepthought.rb");
</source>
|-
|valign=top|<source lang=Java>
// create a new instance of "Deepthought" calculator
Object calcClass = engine.eval("Deepthought");
Object calc = invocable.invokeMethod(calcClass, "new");

// set calculator input values
invocable.invokeMethod(calc, "a=", 6);
invocable.invokeMethod(calc, "b=", 7);

// calculate the result 
Object answer = invocable.invokeMethod(calc, "Calculate");

</source>
|valign=top|<source lang=CSharp>
// create a new instance of "Deepthought" calculator
var calc = globals.Deepthought.@new();

// set calculator input values
calc.a = 6;
calc.b = 7;

// calculate the result 
var answer = calc.Calculate();
</source>
|- valign=top
|
Notes for the Java implementation:
* Ruby accessors names are generated from the attribute name with a <code>=</code> suffix. When assigning values, Java developers must use the Ruby accessor method name.
* Dynamic objects from a foreign language are not first-class objects in that they must be manipulated through an API.
|
Notes for the C# implementation:
* Objects returned from properties or methods of <code>dynamic</code> objects are themselves of <code>dynamic</code> type. When type inference (the <code>var</code> keyword) is used, the variables calc and answer are inferred dynamic/late-bound.
* Dynamic, late-bounds objects are first-class citizens that can be manipulated using C# syntax even though they have been created by an external language.
*<code>new</code> is a reserved word. The <code>@</code> prefix allows keywords to be used as identifiers.
|
|}

=== Pass by reference ===

{|  style="width:100%; border:none;"
|-
!width=50%| Java !! style="width:50%;"| C#
|- valign=top
| <source lang=Java>public class PassByRefTest {

    public static void changeMe(String string) {
        string = "Changed";
    }
    
    public static void swap(int x, int y) {
        int temp = x;
        
        x = y;
        y = temp;
    }
    
    public static void main(String[] args) {
        int a = 5, b = 20;
        String s = "still unchanged";
        
        swap(a, b);
        changeMe(s);
        
        System.out.println( "a = " + a + ", " + 
                            "b = " + b + ", " +
                            "s = " + s );
    }
}</source> || <source lang=CSharp>class PassByRefTest {

    public static void ChangeMe(out string s) {
        s = "Changed"; 
    }

    public static void Swap(ref int x, ref int y) {
        int temp = x;

        x = y;
        y = temp;
    }

    public static void Main(string[] args) {
        int a = 5, b = 10; 
        string s;

        Swap(ref a, ref b); 
        ChangeMe(out s);

        System.Console.WriteLine("a = " + a + ", " +
                                 "b = " + b + ", " +
                                 "s = " + s);
    }
}</source>
|- valign=top
| <code>a = 5, b = 20, s = still unchanged</code>  || <code>a := 10, b := 5, s = Changed</code>
|}

=== Fibonacci sequence ===

This example illustrates how the [[Fibonacci sequence]] can be implemented using the two languages. The C# version takes advantage of C# [[#Generator methods|generator methods]]. Both the Java and the C# version uses [[1 true brace style|K&R style]] for code formatting of classes,  methods and statements.

{|  style="width:100%; border:none;"
|-
!Java
!C#
|-
|width=50%|<source lang=Java>
// The fibonacci sequence
class Fibonacci implements Iterable<Integer> {

    public Iterator<Integer> iterator() {
        return new Iterator<Integer>() {
            private int a = 0;
            private int b = 1;

            @Override
            public boolean hasNext() {
                return true; // infinite sequence
            }

            @Override
            public Integer next() {
                int tmp = a;
                a = b;
                b = a + tmp;
                return tmp; //boxing conversion
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException(
                        "Not supported by the Fibonacci sequence.");
            }
        };
    }
}
</source>
|width=50% valign=top|<source lang=CSharp>
// The Fibonacci sequence
public static IEnumerable<int> Fibonacci() {
    int a = 0;
    int b = 1;

    while (true) {
        yield return a;
        a += b;
        yield return b;
        b += a;
    }
}
</source>
|-
|width=50%|<source lang=Java>
// print the 10 first Fibonacci numbers
int i = 0;
for(int it : new Fibonacci()) {
    System.out.println(it);
    if (++i >= 10) break;
}
</source>
|width=50% valign=top|<source lang=CSharp>
// print the 10 first Fibonacci numbers
var i = 0;
foreach (var it in Fibonacci()) {
    Console.WriteLine(it);
    if (++i >= 10) break;
}
</source>
|- valign="top"
|Notes for the Java version:
* The infinite Fibonacci sequence is represented by the <tt>Fibonacci</tt> class (as opposed to a method). 
* The <tt>Fibonacci</tt> class implements the <tt>Iterator</tt> interface, which allows client code to request the Fibonacci numbers one at a time.
* The class implements the <tt>hasNext()</tt> method as always returning <tt>true</tt> since the Fibonacci sequence is infinite
* The <tt>next()</tt> method calculates and returns the next number.
* The <tt>Iterator</tt> interface formally also allows the client to request removal of numbers. As the Fibinacci sequence is a mathematically defined sequence, the <tt>remove</tt> method is implemented as ''unsupported''.
* The <tt>@Override</tt> annotation is necessary to avoid compiler warnings about possible unintentional overriding of base class methods.
* Because <tt>int</tt> is a primitive type and <tt>Iterable<></tt> is a generic interface, the Java compiler generates a boxing conversion for each number.

|Notes for the C# version:
* The infinite Fibonacci sequence is represented the static <tt>Fibonacci</tt> method (as opposed to a class).
* The method is defined as returning instances of the interface <tt>IEnumerable&lt;int&gt;</tt>, which allows client code to repeatedly request the next number of a sequence
* The <tt>yield</tt> keyword converts the method into a generator method. 
* The method body calculates and returns Fibonacci numbers.
* The <tt>yield return</tt> statement returns the next number of the sequence and creates a continuation so that subsequent invocations of the <tt>IEnumerable</tt> interface's <tt>MoveNext</tt> method will continue execution from the following statement with all local variables intact.
* The implementation uses two <tt>yield return</tt> statements to alternate calculations instead of using a temporary tmp variable.
|}

== Runtime environments ==

Java (the programming language) is designed to execute on the Java platform via the [[Java Runtime Environment]] (JRE). The Java platform includes the [[Java Virtual Machine]] (JVM) as well as a common set of libraries. The JRE was originally designed to support interpreted execution with final compilation as an option. Most JRE environments execute fully or at least partially compiled programs, possibly with [[adaptive optimization]]. The Java compiler produces [[Java bytecode]]. Upon execution the bytecode is loaded by the Java runtime and either interpreted directly or compiled to machine instructions and then executed. {{Further|Java Runtime Environment}}

C# is designed to execute on the [[Common Language Runtime]] (CLR). The CLR is designed to execute fully compiled code. The C# compiler produces [[Common Intermediate Language]] instructions. Upon execution the runtime loads this code and compiles to machine instructions on the target architecture. {{Further|Common Language Runtime}}

== Language history and evolution ==

=== Java ===
{{Original research | date=December 2007}}
{{Weasel | date=March 2011}}
{{relevance | date=March 2011}}

Java (first released in 1995) is older than C# (first released 2002): it has been implemented and freely distributed, as the Java Runtime Environment (JRE) on a much wider variety of computer-vendor platforms. By contrast, C# and the .NET framework (Microsoft's equivalent of JRE) are primarily based on [[Microsoft Windows]]-based platforms. (Note: though the laudable [[Mono (software)|Mono]] project has made C# and .NET available on Linux since 2004, this open-source effort is independent of, and not tightly coordinated with, Microsoft's development efforts). This lead has translated to a larger user base,<ref>{{cite web | url=http://radar.oreilly.com/2006/08/programming-language-trends.html  | title=Programming Language Trends |last=O'Reilly |first=Tim  | date=2 August 2006 |work=Radar  | publisher=O'Reilly }}</ref> a larger number of third-party libraries{{citation needed|date=December 2012}} (many of them open-source), and wider use in education and many modern branches of computer science{{citation needed|date=December 2012}}.

Compared to C#, Java versions have evolved more slowly with respect to features. This conservative approach to language change has consequences that may be both negative (slower evolution to meet perceived programmer needs) and positive (less risk of prematurely adopting approaches that might later prove to be dead-ends). It is now fair to say, however, that while C# was originally designed to be highly similar to Java in many respects, recent versions of Java (notably version 5.0) have in turn implemented ideas originally implemented in C#, such as the [[foreach]] construct, autoboxing, methods with variable number of parameters ([[varargs]]), [[enumerated type]]s, and [[annotation]]s.<ref>Barry Cornelus, University of Oxford Computing Services. 5 Aug 2004. Java 5 catches up with C# URL: http://www.barrycornelius.com/papers/java5/</ref>

=== C# ===

Before creating C#, Microsoft had implemented a modified version of Java, called [[Visual J++|J++]] and a modified version of the [[Java Runtime Environment]] (JRE). In 1997, Sun Microsystems sued Microsoft, claiming that Microsoft had added new features in a manner that contravened Sun's standards and conventions for Java platform neutrality, and which features therefore violated the license agreement between Microsoft and Sun. The suit was settled in 2001: Microsoft agreed to pay Sun $20 million and gradually phase out the Microsoft JRE over seven years.<ref>{{cite web | url=http://news.cnet.com/2100-1001-251401.html |author=Stephen Shankland , Michael Kanellos and Wylie Wong  | publisher=CNET news  | title=Sun, Microsoft settle Java suit  | date=Jan 23,2001 }}</ref>

At time of the settlement Microsoft had already revealed the first version of C# which was based on [[.NET Framework|.NET]] as opposed to the JRE. While developing C#, [[Anders Hejlsberg]]'s team at Microsoft studied a number of existing languages including [[C++]], Java, [[Modula-2]], [[C (programming language)|C]] and [[Smalltalk]].<ref name="deepinside">John Osborn. Deep Inside C#: An Interview with Microsoft Chief Architect Anders Hejlsberg. 08/01/2000 URL: http://windowsdevcenter.com/pub/a/oreilly/windows/news/hejlsberg_0800.html</ref>

The first version of C# implemented roughly the same features as Java although it was deliberately closer to C++ in syntax.<ref name="deepinside"/> The most notable differences was the C# support for delegates and events, metadata attributes/annotations and the way programs could call into the underlying platform. C# delegates and events supported the same use cases as the Java anonymous and local classes, i.e. support for event-based programming and [[callbacks]]. When calling into the underlying operating system, C# P/Invoke relied on marshalling controlled by metadata attributes as opposed to the external glue code required by the equivalent [[JNI]] in Java.

C# 2.0 introduced generic types into the language (at roughly the same time generics also appeared in Java). C# 2.0 also introduced closures in the form of anonymous methods (an inline <tt>delegate</tt> syntax) as well as generator methods, partial classes and -methods.

C# 3.0 added [[SQL]]-like [[Language Integrated Query|language integrated queries]] suited for querying data from [[Collection class|collections]], [[database]]s or [[XML]] documents, building upon general-purpose language features, including lambda expressions and [[extension method]]s, to allow queries to be expressed and optimized for user types.

C# 4 introduced features from dynamic scripting languages such as [[Ruby programming language|Ruby]] and [[Python programming language|Python]].<ref>Eric White. Anders Hejlsberg Talks about C#, Mentions Dynamic Language Features for C# 4.0. 5 October 2008. URL: http://blogs.msdn.com/b/ericwhite/archive/2008/10/05/anders-hejlsberg-talks-about-c-mentions-dynamic-language-features-for-c-4-0.aspx</ref>

C# 5 focused on improving language support for asynchronous and parallel/concurrent programming by making asynchronous continuations a first-class language feature through the new <tt>async</tt> and <tt>await</tt> syntax.

== See also ==

* [[Comparison of C sharp and Visual Basic .NET|Comparison of C# and VB.NET]]
* [[Comparison of Java and C++]]
* [[Java (programming language)|Java programming language]]
* [[Comparison of the Java and .NET platforms]]

== References ==
{{Reflist|2}}

==External links==
* [http://msdn.microsoft.com/en-us/gg715299.aspx Moving to C# and the .NET Framework] at [[MSDN]]
* [http://msdn.microsoft.com/en-us/library/ms836794.aspx C# and Java: Comparing Programming Languages] at [[MSDN]]
* [http://www.javacamp.org/javavscsharp/ Java vs. C# - Code for Code Comparison]
* [http://www.osnews.com/story.php?news_id=5602 Nine Language Performance Round-up]
* [[Microsoft Developer Network|MSDN]]: [http://msdn.microsoft.com/en-us/library/ms228602.aspx The C# Programming Language for Java Developers]
* [http://www.ecma-international.org/publications/standards/Ecma-334.htm Standard ECMA-334 C# Language specification]
* [http://java.sun.com/docs/books/jls/ Java Language Specification (Sun)]

{{DotNET}}
{{Java (Sun)}}

{{Use dmy dates | date=September 2010}}

{{DEFAULTSORT:Comparison Of Java And C Sharp}}
[[Category:Programming language comparisons|C Sharp and Java]]
[[Category:Java programming language]]
[[Category:C programming language family]]