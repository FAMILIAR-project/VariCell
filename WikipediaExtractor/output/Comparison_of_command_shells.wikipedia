{{multiple issues|
{{Incomplete|date=February 2009}}
{{Refimprove|date=August 2011}}
}}

{{details|Shell (computing)}}

A [[command shell]] is a [[command line interface]] computer program to an [[operating system]].

== General characteristics ==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
!Usual environment
!Usually invoked
!Introduced
![[Cross-platform|Platform-independent]]
!Default login shell in
!Default script shell in
!License
![[Unicode]]
![[Standard streams|Stream]] [[Redirection (Unix)|redirection]]
!Native [[Common Information Model (computing)|CIM]]/[[Web-Based Enterprise Management|WBEM]] support
!available as statically linked, independent single file executable

|-

![[Bourne shell]]
|[[Version 7 Unix|7th Ed. UNIX]]
|sh
|1977
|{{yes|Yes<ref>A [http://www.collyer.net/who/geoff/v7sh.tar platform independent version] based on the historical UNIX V7 original source code is available from [http://www.collyer.net/who/geoff/ Geoff Collyer]</ref><ref>A [ftp://ftp.berlios.de/pub/schily/ platform independent version] based on the SVr4/Solaris source code is available from [[J?rg Schilling]]</ref>}}
|[[Version 7 Unix|7th Ed. UNIX]]
|[[Version 7 Unix|7th Ed. UNIX]],
|Proprietary, [[Common Development and Distribution License|CDDL]]<ref>The historic UNIX V7 version is available under [http://minnie.tuhs.org/Archive/Caldera-license.pdf a BSD-style license] through the [[Unix Heritage Society]] and others.</ref><ref>The SVr4 (OpenSolaris) version http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/cmd/sh/ is available under CDDL, older versions (except UNIX V7) are available under a AT&T proprietray license. However, most extent versions (AIX, IRIX64, HPUX, Tru64) remain under AT&T licence.</ref>
|{{yes}}
|{{yes|Yes (arbitrary [[file descriptor|fd]]s)}}
|{{no}}
|{{yes}}

|-

![[POSIX]] shell<ref>{{cite book | author = [[IEEE]] | title = 1003.1 Standard for Information Technology ? Portable Operating System Interface (POSIX): Shell and Utilities, Issue 6 | date = 6 December 2001}}</ref>
|[[POSIX]]
|sh
|1992<ref>As part of IEEE Std.1003.2-1992 (POSIX.2); integrated into IEEE Std.1003.1 with the 2001 revision.</ref>
|{{yes}}
|N/A
|[[POSIX]]
|N/A
|{{yes|Yes, if used by configured locale}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|N/A

|-

![[Bash (Unix shell)|bash]] (v4.0)
|[[POSIX]]
|bash, sh
|1989<ref>
{{Cite newsgroup
 | title = Bash is in beta release!
 | author = Brian Fox (forwarded by Leonard H. Tower Jr.)
 | date = 7 June 1989
 | newsgroup = gnu.announce
 | id = 8906080235.AA01983@wheat-chex.ai.mit.edu
 | url = http://groups.google.com/group/gnu.announce/msg/a509f48ffb298c35?hl=en
 | accessdate =28 October 2010
}}
</ref>
|{{yes}}
|[[GNU]], [[Linux]], [[Mac OS X]] 10.3+
|[[GNU]], [[Linux]], [[Haiku (operating system)|Haiku]], [[Mac OS X]]
|[[GPL]]
|{{yes}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|{{yes}}

|-

![[C shell|csh]]
|[[POSIX]]
|csh
|1978
|{{yes}}
|[[SunOS]]
|?
|[[BSD licenses|BSD]]
|{{no}}
|{{yes|Yes (stdin, out, out+err)}}
|{{no}}
|{{yes}}

|-

![[tcsh]]
|[[POSIX]]
|tcsh, csh
|1983<ref name=Greer>
{{Cite newsgroup
| author     = Ken Greer
| title      = C shell with command and filename recognition/completion
| date       = 3 October 1983
| newsgroup  = net.sources
| url        = http://groups.google.com/group/net.sources/msg/7073bf41cc5da330?hl=en
| accessdate = 29 December 2010
}}</ref>
|{{yes}}
|[[FreeBSD]], formerly [[Mac OS X]]
|?
|[[BSD licenses|BSD]]
|{{yes}}
|{{yes|Yes (stdin, out, out+err)}}
|{{no}}
|{{yes}}

|-

![[Scsh]]
|[[POSIX]]
|scsh
|1994
|{{yes}}
|?
|?
|[[BSD licenses|BSD]]-style
|{{?}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|[[POSIX]]
|ksh
|1983<ref name=Gomes>
{{Cite newsgroup
| author     = Ron Gomes
| title      = Toronto USENIX Conference Schedule (tentative)
| date       = 9 June 1983
| newsgroup  = net.usenix
| url        = http://groups.google.com/group/net.usenix/msg/fa6e1f7de3b63bba?hl=en
| accessdate = 29 December 2010
}}</ref><ref name=Harris>
{{Cite newsgroup
| author     = Guy Harris
| title      = csh question
| date       = 10 October 1983
| newsgroup  = net.flame
| url        = http://groups.google.com/group/net.flame/msg/4f868085b65af530?hl=en
| accessdate = 29 December 2010
}}</ref>
|{{yes}}
|[[AIX]], [[HP-UX]]
|[[OpenSolaris]]
|[[Common Public License]]
|{{yes}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|{{yes}}

|-

![[pdksh]]
|[[POSIX]]
|ksh, sh
|1989 {{?}}
|{{yes}}
|[[OpenBSD]]<ref name="default OpenBSD">[http://www.openbsd.org/faq/faq10.html#rootshell Default shell in OpenBSD] is ksh (pdksh).</ref>
|[[OpenBSD]]<ref name="default OpenBSD" />
|[[Public Domain]]
|{{no}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|{{yes}}

|-

![[zsh]]
|[[POSIX]]
|zsh
|1990
|{{yes}}
|[[Grml]], [[Gobolinux]]
|[[Grml]]
|[[MIT license|MIT]]-style
|{{yes}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|{{yes}}

|-

![[Almquist shell|ash]]
|[[POSIX]]
|sh
|1989
|{{yes}}
|[[Minix]], [[BusyBox]] based systems
|[[FreeBSD]], [[NetBSD]], [[Minix]], [[BusyBox]] based systems
|[[BSD licenses|BSD]]-style
|{{yes}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|{{yes}}

|-

!Windows [[cmd.exe]]<ref name="cmd /x">Command extensions enabled, or "cmd /x".</ref>
|[[Win32]]
|cmd
|1993
|{{no}}
|[[Windows]] NT, 2000, XP, Server 2003, Vista
|[[Windows]] NT, 2000, XP, Server 2003, Vista
|[[Microsoft|MS]]-[[Software license agreement|EULA]]<ref name="ReferenceA">Windows component ? covered by a valid license for Microsoft Windows</ref>
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[Take Command Console|TCC]] (formerly 4NT)
|[[Win32]]
|?
|1993
|{{no}}
|?
|?
|[[Shareware]]
|{{yes}}
|{{yes|Yes (stdin, out, err)}}
|{{no}}
|{{no}}

|-

![[Windows PowerShell]]
|[[.NET Framework|.NET]]
|powershell
|2006
|{{no}}
|[[Windows]] Server 2008, 7, Vista, XP<ref name="optional">Windows PowerShell is installed with Windows 7, however, it is an optional download for users of Windows Vista or Windows XP.</ref>
|[[Windows]] Server 2008, 7
|[[Microsoft|MS]]-[[Software license agreement|EULA]]<ref name="ReferenceA"/>
|{{yes}}
|{{yes}}
|{{yes}}
|{{no}}

|-

![[COMMAND.COM]]
|[[DOS]]
|command
|1980
|{{no|No (3rd party available<ref name="3rd party">Third-party re-implementations, such as [[DosBox]], [[Wine (software)|Wine]], and [[FreeDOS]] are available.</ref>)}}
|[[DOS]], [[Windows]] 95, 98, ME
|[[DOS]], [[Windows]] 95, 98, ME
|[[Microsoft|MS]]-[[Software license agreement|EULA]]<ref>MS-DOS and Windows component ? covered by a valid license for MS-DOS or Microsoft Windows</ref> or [[BSD]]/[[GPL]] (free clones)
|{{no}}
|{{yes|Yes (stdin, out, COMn/LPT only)}}
|{{no}}
|{{yes}}

|-

![[4DOS]]
|[[DOS]]
|?
|1989
|{{no}}
|?
|?
|[[MIT License]], with restrictions
|{{no}}
|{{yes|Yes (stdin, out, err)}}
|{{no}}
|{{no}}

|-

!OS/2 [[cmd.exe]]
|[[OS/2]]
|cmd
|1987
|{{no}}
|[[OS/2]]
|[[OS/2]]
|[[IBM]]-[[Software license agreement|EULA]]<ref>OS/2 component ? covered by a valid license for OS/2</ref>
|{{no}}
|{{yes|Yes (stdin, out, err)}}
|{{no}}
|{{?}}

|-

![[rc]]
|[[Plan 9 from Bell Labs|Plan 9]], [[POSIX]]
|rc
|1989
|{{yes}}
|[[Plan 9]], [[Version 10 Unix]]
|[[Plan 9]], [[Version 10 Unix]]
|[[Lucent Public License]]
|{{yes}}
|{{yes}}
|{{no}}
|{{yes}}

|-

![[BeanShell]]
|[[Java Runtime Environment|Java]]
|?
|2005
|{{yes}}
|?
|?
|[[LGPL]]
|{{yes}}
|{{yes}}
|{{?}}
|{{yes|Yes (bsh.jar)}}

|-

![[Python (programming language)|Python shell]]
|[[Python (programming language)|Python]]
|python, ipython
|1991
|{{yes}}
|?
|?
|Python
|{{yes}}
|{{yes}}
|{{?}}
|{{yes|Yes py2exe (Windows), pypy (Linux), jython (Java)}}

|-

![[Interactive Ruby Shell|Ruby shell]]
|[[Ruby (programming language)|Ruby]]
|irb
|1995
|{{yes}}
|?
|?
|Ruby, [[BSD licenses|BSD]]
|{{yes|1.9: Yes 1.8: limited}}
|{{yes}}
|{{?}}
|{{yes|Yes with rubyscript2exe.rb}}

|-

![[DIGITAL Command Language|VMS DCL]]<ref>{{cite web
 | url = http://h71000.www7.hp.com/doc/732final/9996/9996pro_contents.html
 | title = HP OpenVMS DCL Dictionary
 | accessdate =23 March 2009
}}</ref>
|[[OpenVMS]]
|?
|1977 {{?}}
|{{no}}
|VMS
|VMS
|?
|{{no}}
|{{yes|Yes (sys$input, sys$output assignment)}}
|{{no}}
|{{no}}

|-

![[Friendly interactive shell|fish]]
|[[POSIX]]
|fish
|2005<ref>
{{Cite web
 | title = Fish - The friendly interactive shell
 | author = Axel Liljencrantz
 | date = 17 May 2005
 | url = http://lwn.net/Articles/136232/
 | accessdate = 8 April 2013
}}
</ref>
|{{yes}}
|?
|?
|[[GPL]]
|{{yes}}
|{{yes|Yes (arbitrary fds)}}
|{{no}}
|?

|}

=== Notes ===
{{reflist|close}}

== Interactive features ==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"

|-

!
![[#Completions|Command<br/>name<br/>completion]]
![[#Completions|Path/file<br/>argument<br/>completion]]
![[#Completions|Non-Path/file<br/>argument<br/>completion]]
![[#Completions|Wildcard<br/>completion]]
![[#Command history|Command<br/>history]]
![[#Mandatory argument prompt|Mandatory<br/>argument<br/>prompt]]
![[#Automatic suggestions|Automatic<br/>suggestions]]
![[#Syntax highlighting|Syntax<br/>highlighting]]
![[#Directory history|Directory<br/>history]]
![[#Implicit directory change|Implicit<br/>directory<br/>change]]
![[#Spell checking|Spell<br/>checking]]
![[#Integrated environment|Integrated<br/>environment]]
![[#Snippets|Snippets]]
![[#Value prompt|Value<br/>prompt]]
![[#Menu/options selector|Menu/options<br/>prompt]]
![[#Progress indicator|Progress<br/>indicator]]
![[#Interactive table|Interactive<br/>table]]
![[#Context sensitive help|Context<br/>sensitive<br/>help]]
![[#Command builder|Command<br/>builder]]

|-

![[Bourne shell]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[POSIX]] shell
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes}}
|{{yes}}
|{{yes2|when defined}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|optional}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[C shell|csh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|optional}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[tcsh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|optional}}
|{{yes2|experimental}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Scsh]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes|Yes (extendable)}}
|{{yes|Yes (extendable)}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[pdksh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[zsh]]
|{{yes}}
|{{yes}}
|{{yes2|when defined}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}<ref>zsh does not feature syntax highlighting, but a 3rd party projekt exists which offer this capability as an add-on</ref>
|{{no}}
|{{yes|optional}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Almquist shell|ash]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!Windows<br/>[[cmd.exe]]
|{{yes}} (partial)
|{{yes}} (partial)
|{{no}}
|{{no}}
|{{yes|Yes (F8)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly 4NT)
|{{yes}} (partial)
|{{yes}} (partial)
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|popup}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}
|{{yes}}
|{{some}}<ref>TCC has special prompt function for yes, no, cancel, close, retry.</ref>
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Windows PowerShell]]
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes (F8)}}
|{{yes}}
|{{yes}}<ref name="powershell_ise" />
|{{yes}}<ref name="powershell_ise" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}<ref name="powershell_ise">Available in PowerShell Integrated Scripting Environment (ISE) which offers integrated command line pane, script editor, intellisense, help, scriting snippets, source-level debugging, syntax highlighting, automatic suggestions ([[IntelliSense]]) and more.</ref>
|{{yes}}<ref name="powershell_ise" />
|{{yes}}
|{{yes}}<ref>The [http://technet.microsoft.com/en-us/library/ff730939.aspx $host.ui.PromptForChoice] function allows for a menu-style prompt for choices. The prompt works from background jobs as well as from remote sessions, displaying the menu prompt on the console of the controlling session.</ref>
|{{yes}}<ref>The [http://technet.microsoft.com/en-us/library/hh849902.aspx <tt>Write-Progress</tt>] cmdlet writes a progress bar which can indicate percentage, remaining seconds etc. The progress bar messages work from background jobs or remote sessions in addition to interactive scripts, i.e. the progress bar is displayed on the console of the controlling session, not as part of the regular output.</ref>
|{{yes|popup window}}<ref>The [http://technet.microsoft.com/en-us/library/hh849920.aspx <tt>Out-GridView</tt>] (with a the alias <tt>ogv</tt>) opens an interactive "grid view" (table) where the user can sort, filter and select/choose rows, rearrange columns etc.</ref>
|{{yes}}<ref name="powershell_ise" />
|{{yes|popup window}}<ref>The [http://technet.microsoft.com/en-us/library/hh849915.aspx <tt>Show-Command</tt>] cmdlet inspects the command definition and opens an interactive windows with a named input field for each parameter/switch</ref>

|-

![[COMMAND.COM]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}<ref name="doskey" >Available through the DOSKEY add-on</ref><ref name="drdos">Available in DR-DOS</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|popup}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!OS/2<br/>[[cmd.exe]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[rc]]
|{{yes}}<ref name="rio">Handled by [[Rio (program)|rio]], [[GNU readline]], [[editline]] or [[vrl]]</ref>
|{{yes}}<ref name="rio">Handled by [[Rio (program)|rio]], [[GNU readline]], [[editline]] or [[vrl]]</ref>
|{{no}}
|{{no}}
|{{yes}}<ref name="rio" />
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{?}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[BeanShell]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Python (programming language)|Python shell]]
|{{yes}}<ref name="ReferenceB">provided by the rlcompleter module or IPython</ref>
|{{yes}}<ref name="ReferenceB"/>
|{{no}}
|{{no}}
|{{yes2|with IPython}}<ref name="ipython">When used with IPython)</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{?}}
|{{?}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Interactive Ruby Shell|Ruby shell]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes2|with UtilityBelt}}<ref name="utilitybelt">When used with UtilityBelt gem</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{?}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|}

=== Completions ===
{{main|Command-line completion}}
Completion features assist the user in typing commands at the command line. The simplest form of completion is command name completion where
the shell looks for and suggests matching internal and/or external commands when the user enters a partial command and presses the completion key (often the {{keypress|TAB}} key).

For each command there is usually also a set of parameters/arguments/options. parameters/arguments/options are often identified by a name or letter preceding a value. Some shells allow completion on parameter/option names and -values. 

Bash and zsh offer parameter name completion through a definition external to the command, distributed in a separate completion definition file. For command parameter name/value completions, the shell assumes path/filename completion if no completion is defined for the command. Completion can be set up to suggest completions by calling a shell function.<ref>http://zsh.sourceforge.net/Doc/Release/Completion-System.html</ref>

As opposed to traditional shells where parameters are parsed internally by each command, all types of PowerShell commands (cmdlets, functions, script files) expose data about their parameters, names, types, value ranges and more. This discoverable data is used by the shell to automatically support argument name and value completion for built-in commands/functions, user-defined commands/functions 
as well as for script files. Cmdlets can also define dynamic completion of argument values where the completion values are computed dynamically on the running system.

=== Command history ===
{{main|Command history}}
A user of a shell may find that he/she is typing something similar to what the user typed before. If the shell supports ''command history'' the user can call 
the previous command into the line editor and edit it before issuing it again.

Shells that support completion may also be able to directly complete the command from the command history given a partial/initial part of the previous command.

Most modern shells support command history. Shells which support command history in general also supports completion from history rather than just recalling
commands from the history. In addition to the plain command text, PowerShell also records execution start- and end time and execution status in the command history.

=== Mandatory argument prompt ===
{{further|Named parameter#Optional_parameters}}
Mandatory arguments/parameters are arguments/parameters which must be assigned a value upon invocation the command, function or script file. A shell that can determine ahead 
of invocation that there are missing mandatory values, can assist the interactive user by prompting for those values instead of letting the command fail.
Having the shell prompt for missing values will allow the author of a script, command or function to mark a parameter as mandatory instead of creating script code to either 
prompt for the missing values (after determining that it is being run interactively) or fail with a message.

PowerShell allows commands, functions and scripts to define arguments/parameters as ''mandatory''. The shell determines prior to invocation if there is any
mandatory arguments/parameters which have not been bound, and will then prompt the user for the value(s) before actual invocation.
<ref name="ps-mandatoryparameter">{{cite web|title=Use PowerShell to Make Mandatory Parameters|url=http://blogs.technet.com/b/heyscriptingguy/archive/2011/05/22/use-powershell-to-make-mandatory-parameters.aspx}}</ref>

=== Automatic suggestions ===
{{main|Autocomplete}}
With automatic suggestions the shell monitors while the interactive user is typing and displays context-relevant suggestions without interrupting the typing instead of 
the user [[#Command, parameter and -value completion|explicitly requesting completion]].

=== Directory history ===
{{see also|#Directtory stack|l1=Directory stack}}
A shell may record the locations the user has used as current locations and allow fast switching to any location/directory in the history.

4DOS and Take Command Console record history of current directories and allows the user to switch to a directory in the history using a popup a window.

=== Implicit directory change ===
A directory name can be used directly as a command which implicitly changes the current location to the directory.

=== Spell checking ===
{{main|Spell checker}}

When a command line does not match a command or arguments directly, spell checking can look for common typing mistakes and match possible alternatives with known valid alternatives. The shell can then suggest
probable corrections to the interactive user.

The tsch and zsh shells feature optional spell checking/correction.

=== Integrated environment ===
{{main|Integrated environment}}

An integrated environment is the integration of the command line interface with editors (typically multiple documents), [[online help|help system]] and possibly [[debugger|debugging]] and other tools.

[[Take Command Console]] (TCC) comes with an integrated environment with command line pane, file explorer, editor, batch debugger and more.<ref>http://jpsoft.com/take-command-windows-scripting.html</ref>

[[Windows PowerShell|PowerShell ISE]] includes a command line pane with support for integrated command line, copy-paste, multiple document editors, [[source level debugging]], help pane, command explorer pane and scripting interface allowing scripts/modules to manipulate menus, add-ons etc. The ISE (menus, windows, shortcuts, addons) are customizable through scripts.<ref name="technet.microsoft.com">http://technet.microsoft.com/en-us/library/hh849182.aspx</ref>

=== Snippets ===
{{main|Snippet (programming)}}

Snippets are small regions of re-usable of script code. Snippets are often used to save keystrokes, or to assist the user with common scripting patterns. 

PowerShell supports snippets in the Integrated Scripting Environment (ISE) using {{keypress|Ctrl J}}.<ref>http://www.powershellmagazine.com/2011/09/28/powershell-v3-ise-and-ise-scripting-model-changes-improvements/</ref>

=== Value prompt ===
A shell script can prompt the interactive user for a value.

=== Menu/options selector ===
A shell script can present the interactive user with a list of choices.

=== Progress indicator ===
A shell script (or job) can report progress of long running tasks to the interactive user.

Unix/Linux systems may offer other tools support using progress indicators from scripts. These are not integrated features of the shells, however. 

PowerShell has a built-in command and API functions (to be used when authoring commands) for writing/updating a progress bar. Progress bar messages are sent separates from regular command output 
and the progress bar is always displayed at the ultimate interactive users console regardless of whether the progress messages originates from an interactive script, from a background job or from a remote session.

=== Interactive table ===
Output from a command execution can be displayed in a table/grid which can be interactively sorted and filtered and/or otherwise manipulated after command execution ends.

PowerShell <tt>Out-GridView</tt> cmdlet displays data in an interactive window with interactive sorting and filtering.

=== Syntax highlighting ===
{{main|Syntax highlighting}}

An independent project offers syntax highlighting as an add-on to the Z Shell (zsh).<ref>[https://github.com/zsh-users/zsh-syntax-highlighting]</ref> This is not part of the shell, however.
PowerShell ISE has syntax highlighting on the current command line as well as in the script pane.<ref name="technet.microsoft.com"/>
Take Command Console (TCC) offers syntax highlighting in the integrated environment.

=== Context sensitive help ===
{{main|Context-sensitive help}}

Take Command Console and PowerShell (in PowerShell ISE) looks up context-sensitive help information when {{keypress|F1}} is pressed.

=== Command builder ===
A command builder is a guided dialog which assists the user in filling in a command. PowerShell has a command builder which is available in PowerShell ISE or which can be displayed separately through the <tt>Show-Command</tt> cmdlet.<ref>http://technet.microsoft.com/en-us/library/hh849915.aspx</ref>

=== Notes ===
{{reflist|close}}

== Programming features ==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
![[Subroutine|Functions]]
![[Exception handling]]
!Search and replace on variables
![[Assignment (computer science)#Parallel assignment|Parallel assignment]]
![[Variadic function]]s
![[Default argument]]s
![[Named parameter]]s
![[Lambda calculus|Lambda functions]]
![[eval|eval function]]
![[PRNG|Pseudorandom number generation]]
![[Bytecode]]

|-

![[Bourne shell]]
|{{yes| Yes since SVr2}}
|{{yes| Yes (via trap)}}
|{{no}}
|{{no}}
|{{yes|Since SVr2}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[POSIX]] shell
|{{yes}}
|{{yes| Yes (via trap)}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes}}
|{{yes| Yes (via trap)}}
|{{yes|Yes (via ${//} syntax)}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|Yes ($RANDOM) }}
|{{no}}

|-

![[C shell|csh]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[tcsh]]
|{{no}}
|{{no}}
|{{yes|Yes (via ${:s//} syntax}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Scsh]]
|{{yes}}
|{{?}}
|{{yes|Yes (via string functions and regular expressions)}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{yes|Yes (random-integer, random-real)}}
|{{yes|Yes (compiler is Scheme48 virtual machine, "scshvm")}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes}}
|{{yes| Yes (via trap)}}
|{{yes|Yes (via ${//} syntax and builtin commands)}}
|{{?}}
|{{yes}}
|{{yes}}
|{{yes|Yes (for user-defined "types")}}
|{{no}}
|{{yes}}
|{{yes|Yes ($RANDOM)}}
|{{yes|Yes (compiler is called "shcomp")}}

|-

![[pdksh]]
|{{yes}}
|{{yes| Yes (via trap)}}
|{{no}}
|{{?}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|Yes ($RANDOM)}}
|{{no}}

|-

![[zsh]]
|{{yes}}
|{{yes}}
|{{yes|Yes (via ${:s//} and ${//} syntax)}}
|{{?}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|Yes ($RANDOM)}}
|{{yes|Yes (built-in command "zcompile")}}

|-

![[Almquist shell|ash]]
|{{yes}}
|{{yes| Yes (via trap)}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

!Windows [[cmd.exe]]
|{{yes|Yes (via "call :label")}}
|{{no}}
|{{yes|Yes (via set %''varname'':''expression'' syntax)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes|Yes (%random%)}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly 4NT)
|{{yes}}
|{{no}}
|{{yes|Yes (via %@replace[&nbsp;] function)}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes|Yes (%@random[&nbsp;] function)}}
|{{no}}

|-

![[Windows PowerShell]]
|{{yes}}
|{{yes}}
|{{yes|Yes (-replace operator)}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes, automatic}}

|-

![[COMMAND.COM]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes}}
|{{no}}
|{{yes|Yes (via %@replace[&nbsp;] function)}}
|{{no}}
|{{?}}
|{{no}}
|{{?}}
|{{no}}
|{{yes}}
|{{yes|Yes (%@random[&nbsp;] function)}}
|{{no}}

|-

!OS/2 [[cmd.exe]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[rc]]
|{{yes}}
|{{yes}}
|{{no}}
|{{?}}
|{{yes}}
|{{yes}}
|{{?}}
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[BeanShell]]
|{{yes}}
|{{yes}}
|{{?}}
|{{?}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{yes}}
|{{yes}}

|-

![[Python (programming language)|Python shell]]
|{{yes}}
|{{yes}}
|{{yes|Yes (via string methods and regular expressions)}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes (standard [[CPython]], [[IronPython]] or [[Jython]])}}

|-

![[Interactive Ruby Shell|Ruby shell]]
|{{yes}}
|{{yes}}
|{{yes|Yes (via string functions and regular expressions)}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes ([[NetRuby]], [[JRuby]], [[YARV|version 1.9/YARV]])}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|}

=== Notes ===
{{reflist|close}}

== String and filename matching ==
{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
!Pattern Matching ([[regular expression]]s built-in)
!Pattern Matching ([[glob (programming)|globbing]])
![[Globbing qualifier]]s (filename generation based on file attributes)
![[Recursive globbing]] (generating files from any level of subdirectories)

|-

![[Bourne shell]]
|{{no}}
|{{yes|Yes (*, ?, [...])}}
|{{no}}
|{{no}}

|-

![[POSIX]] shell
|{{no}}
|{{yes|Yes (*, ?, [...])}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes}}
|{{yes|Yes (*, ?, [...], {...})}}
|{{no}}
|{{yes}} (''**/...'')

|-

![[C shell|csh]]
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[tcsh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Scsh]]
|{{yes}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes}}
|{{yes|Yes (*, ?, [...])}}
|{{no}}
|{{yes}} (with set -G, no following of symlinks)

|-

![[pdksh]]
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[zsh]]
|{{yes}}
|{{yes|Yes (*, ?, [...], ext'd globbing<ref name="extended globbing">Zsh offers a variety of [http://zsh.sourceforge.net/Guide/zshguide05.html#l135 globbing options].</ref>)}}
|{{yes}}
|{{yes}} (''**/...'' or ''***/...'' to follow symlinks)

|-

![[Almquist shell|ash]]
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

!Windows [[cmd.exe]]
|{{yes}} (via the ''findstr /r'' command)
|{{yes|Yes (*, ?)}}
|{{?}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly 4NT)
|bgcolor=#ffffdd | Limited support
|{{yes|Yes (*, ?, [...])}}
|{{?}}
|{{yes}} (via FOR /R)

|-

![[Windows PowerShell]]
|{{yes|Yes (full regex support)<ref>PowerShell leverages the full [[.NET Framework|.NET]] regular expression engine which features named captures, zero-width lookahead/-behind, greedy/non-greedy, character classes, level counting etc.</ref>}}
|{{yes|Yes (*, ?, [...])}}
|{{?}}
|{{?}}

|-

![[COMMAND.COM]]
|{{no}}
|{{yes|Yes (*, ?)}}
|{{?}}
|{{no}}

|-

![[4DOS]]
|{{no}}
|{{yes|Yes (*, ?, [...])}}
|{{?}}
|{{yes}} (via FOR /R)

|-

!OS/2 [[cmd.exe]]
|{{no}}
|{{yes|Yes (*, ?)}}
|{{?}}
|{{?}}

|-

![[rc]]
|{{no}}
|{{yes}}
|{{no}}
|{{no}}

|-

![[BeanShell]]
|{{yes}}
|{{?}}
|{{?}}
|{{?}}

|-

![[Python (programming language)|Python shell]]
|{{yes}}
|{{yes}}
|{{yes|Yes (via glob module)}}
|{{yes|Yes (via glob module)}}

|-

![[Interactive Ruby Shell|Ruby shell]]
|{{yes}}
|{{yes|Yes (via Dir.glob method)}}
|{{?}}
|{{yes|Yes (via Dir.glob method)}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{no}}
|{{yes}}
|{{no}}
|{{yes}} (via [SUBDIR...] )

|}

=== Notes ===
{{reflist|close}}

== Inter-process communication ==

{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
![[Pipeline (software)|Pipes]]
![[Command substitution]]
![[Process substitution]]
!Subshells
![[Transmission Control Protocol|TCP]]/[[User Datagram Protocol|UDP]] connections as streams

|-

![[Bourne shell]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[POSIX]] shell
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes|bytes concurrent}}
|{{yes}}
|{{yes|Yes (if system supports /dev/fd/''<n>'' or named pipes}}
|{{yes}}
|{{yes|Yes (client only)}}

|-

![[C shell|csh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[tcsh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Scsh]]
|{{yes|text}}
|{{?}}
|{{?}}
|{{?}}
|{{yes}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{yes|bytes (may contain serialized objects if '''print -C''' is used) concurrent}}
|{{yes|Yes ($(...) and ${<space>...;})}}
|{{yes|Yes (if system supports /dev/fd/''<n>''}}
|{{yes}}
|{{yes|Yes (and SCTP support, client only)}}

|-

![[pdksh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[zsh]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{yes}}
|{{yes}}
|{{yes|Yes (client and server but only TCP)}}

|-

![[Almquist shell|ash]]
|{{yes|bytes concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{no}}

|-

!Windows [[cmd.exe]]
|{{yes|text concurrent}}
|{{yes|Yes (via FOR /F command)}}
|{{no}}
|{{yes|Yes (Backtick: ` in for /f usebackq)}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly 4NT)
|{{yes|text}}
|{{yes|Yes (via FOR /F command)}}
|{{?}}
| bgcolor=#ffffdd | Limited, via %@execstr[&nbsp;] and %@exec[&nbsp;]
|{{no}}

|-

![[Windows PowerShell]]
|{{yes|objects concurrent}}
|{{yes}}
|{{no}}
|{{yes}}
|{{yes}}

|-

![[COMMAND.COM]]
|{{yes|text sequential temporary files}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes|text sequential temporary files}}
|{{yes|Yes (via FOR /F command)}}
|{{?}}
| bgcolor=#ffffdd | Limited, via %@execstr[&nbsp;] and %@exec[&nbsp;]
|{{no}}

|-

!OS/2 [[cmd.exe]]
|{{yes|text concurrent}}
|{{no}}
|{{no}}
|{{?}}
|{{no}}

|-

![[rc]]
|{{yes|text concurrent}}
|{{yes}}
|{{yes|Yes (via: <{cmd} if system supports /dev/fd/''<n>'')}}
|{{yes}}
|{{no}}

|-

![[BeanShell]]
|{{no|not supported}}
|{{?}}
|{{?}}
|{{?}}
|{{yes}}

|-

![[Python (programming language)|Python shell]]
|{{yes|objects (when using IPython+IPipe)}}
|{{yes}}
|{{yes|Yes (via subprocess module)}}
|{{yes}}
|{{yes}}

|-

![[Interactive Ruby Shell|Ruby shell]]
|{{no|not supported}}
|{{yes}}
|{{yes}}
|{{yes|Yes (Backtick: `)}}
|{{yes}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{yes|text (via PIPE command)}}
|{{no}}
|{{no}}
|{{yes|Yes (spawn)}}
|{{yes|Yes (server TCP only)}}
|}

=== Notes ===
{{reflist|close}}

== Security features ==

{| class="wikitable sortable" style="width: auto; text-align: center; font-size: smaller;"
|-

!
![[#Secure prompt|Secure (password) prompt]]
![[#Secure credentials prompt|Secure credentials prompt]]
![[#Encrypted variables/parameters|Encrypted variables/ parameters]]
![[#General execution restriction|General execution restriction]]
![[#Script origin execution restriction|Script origin execution restriction]]
![[#Signed script restriction|Signed script restriction]]
![[#Multilevel execution policies|Multilevel execution policies]]
![[#Restricted shell subset|Restricted shell subset]]
![[#Safe data subset|Safe data subset]]

|-

![[Bourne shell]]
|{{some|via stty}}<ref name="tty">The shell can use the <tt>stty</tt> utility to supress echoing of typed characters to the screen. This requires multiple steps: 1. reading the current echo state, 2. switching echo off, 3. read the input 4. switch echo state back to the original state.</ref>
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit">Scripts can only be invoked directly if user has ''execute permission'' on the file. Scripts can still be piped as input to the shell processor without execute permission.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[POSIX]] shell
|{{some|via stty}}<ref name="tty">The shell can use the <tt>stty</tt> utility to supress echoing of typed characters to the screen. The shell does not support appending the characters to an encrypted string, however.</ref>
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit">Scripts can only be invoked directly if user has ''execute permission'' on the file. Scripts can still be piped as input to the shell processor without execute permission.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Bash (Unix shell)|bash]] (v4.0)
|{{yes|<tt>read -s</tt>}}
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[C shell|csh]]
|{{some|via stty}}<ref name="tty">The shell can use the <tt>stty</tt> utility to supress echoing of typed characters to the screen. The shell does not support appending the characters to an encrypted string, however.</ref>
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit">Scripts can only be invoked directly if user has ''execute permission'' on the file. Scripts can still be piped as input to the shell processor without execute permission.</ref>
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[tcsh]]
|{{some|via stty}}<ref name="tty" />
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Scsh]]
|{{some|via stty}}<ref name="tty" />
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Korn Shell|ksh]] (ksh93t+)
|{{some|via stty}}<ref name="tty" />
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[pdksh]]
|{{some|via stty}}<ref name="tty" />
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[zsh]]
|{{yes|<tt>read -s</tt>}}
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

![[Almquist shell|ash]]
|{{some|via stty}}<ref name="tty" />
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}
|{{no}}

|-

!Windows [[cmd.exe]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Take Command Console|TCC]] (formerly 4NT)
|{{yes}}<ref name="input/p" />
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Windows PowerShell]]
|{{yes}}<ref><tt>Read-Host -AsSecureString</tt> reads a string of characters from the input device into an encrypted string, one character at a time thus ensuring that there is no memory image of the clear text which could be gleaned from scanning memory, or from crash dumps, memory dumps, paging files, log files or similar</ref>
|{{yes}}
|{{yes}}
|{{no}}<ref>PowerShell script files (.ps1 files) are by default associated with the Notepad editor, not with the PowerShell execution engine. Invoking a .ps1 file will launch Notepad rather than executing the script. Even though the underlying operating system (Windows) supports an</ref>
|{{yes}}<ref>PowerShell allows an execution policy to specify if scripts with zone identifiers indicating that they were obtained from an untrusted zone should be allowed to execute.[http://technet.microsoft.com/en-us/library/hh847748.aspx]</ref>
|{{yes}}<ref>PowerShell scripts can be signed with a [[digital certificate]], and PowerShell can be set to block execution of unsigned scripts.[http://technet.microsoft.com/en-us/library/hh847748.aspx]</ref>
|{{yes}}<ref>PowerShell defines 5 levels (scopes) where execution policies can be defined, where a higher level overrides a lower level. [http://technet.microsoft.com/en-us/library/hh847748.aspx]</ref>
|{{yes}}<ref>Startup scripts per computer/user can import modules and expose a subset the commands/functions available in the modules.</ref>
|{{yes}}<ref>PowerShell ''Data sections'' define sections of scripts which can be evaluated using a restricted subset of commands.[http://technet.microsoft.com/en-us/library/hh848302.aspx]</ref>

|-

![[COMMAND.COM]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[4DOS]]
|{{yes}}<ref name="input/p"><tt>INPUT /P</tt> echoes back asterisks for each typed character</ref>
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

!OS/2 [[cmd.exe]]
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[rc]]
|{{some|via stty}}<ref name="tty" />
|{{no}}
|{{no}}
|{{yes}}<ref name="executebit" />
|{{no}}
|{{no}}
|{{no}}
|{{yes}}<ref><tt>-l</tt> makes rc behave as a restricted login shell.[http://manpages.ubuntu.com/manpages/precise/man1/rc.1.html]</ref>
|{{no}}

|-

![[Python (programming language)|Python shell]]
|{{?}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[Interactive Ruby Shell|Ruby shell]]
|{{?}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|-

![[DIGITAL Command Language|VMS DCL]]
|{{?}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}
|{{no}}

|}

=== Secure prompt ===
Some shell scripts need to query the user for sensitive information such as [[password]]s, private digital keys, [[PIN code]]s or other confidential information. Sensitive input should not be echoed back to the screen/input device where it could be gleaned by unauthorized persons. Plaintext memory representation of sensitive information should also be avoided as it could allow the information to be compromised e.g. through swap files, core dumps etc.<ref name="encryptmemory">{{cite web|last=Provos|first=Niels|title=Encrypting Virtual Memory|url=http://www.openbsd.org/papers/swapencrypt.ps|publisher=Center for Information Technology Integration, University of Michigan|accessdate=20 December 2012}}</ref>

The shells bash, zsh and Windows PowerShell offer this as a specific feature.<ref>{{cite web|url=http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html|title=bash - GNU Bourne-Again SHell|quote=read -s Silent mode. If input is coming from a terminal, characters are not echoed.}}</ref><ref>{{cite web|url=http://technet.microsoft.com/en-us/library/ee176935.aspx|title=Using the Read-Host Cmdlet|quote=By adding the -assecurestring parameter you can mask the data entered at the prompt}}</ref> Shells which do not offer this as a specific feature may still be able to turn off echoing through some other means. Shells executing on a Unix/Linux operating system can use the <tt>stty</tt> external command to switch off/on echoing of input characters.<ref>{{cite web|title=Linux / Unix Command: stty|url=http://linux.about.com/od/commands/l/blcmdl1_stty.htm}}</ref> In addition to not echoing back the characters, PowerShell's <tt>-AsSecureString</tt> option also encrypts the input character-by-character during the input process, ensuring that the string is never represented unencrypted in memory where it could be compromised through memory dumps, scanning, transcription etc.

=== Secure credentials prompt ===
Scripts that connect to resources on behalf of the user will usually (security best practice) query the user for his/her credentials at run time. Depending on the security policies in place, the credentials may be in the form of username+password, [[smart card]] with PIN code, biometrics, tokens etc. The script should be able to handle (relay) credentials without restricting the credential type to username+password, i.e. it should be able to handle "abstract" credentials without concerns about specific type of the credentials.

PowerShell comes with the <tt>Get-Credential</tt> [[cmdlet]] which prompts for credentials and which can accept other types of credentials, e.g. a [[smart card]] with a [[PIN code]] depending on the security providers available at run time. Scripts that need to obtain credentials to access resources on behalf of the user can use this cmdlet to obtain credentials without specifying which form they must take. The <tt>Get-Credential</tt> cmdlet returns credentials in [[Common Criteria]] compliant encrypted form.<ref>http://blogs.msdn.com/b/powershell/archive/2008/06/20/getting-credentials-from-the-command-line.aspx</ref>

=== Encrypted variables/parameters ===
If a script reads a password into an environment variable it is in memory in plain text, and thus may be accessed via a core dump. It is also in the process environment, which may be accessible by other processes started by the script.<ref>{{cite book|last=Albing|first=Carl|title=Bash cookbook|year=2007|publisher=O'Reilly|location=Sebastopol, Calif.|isbn=978-0-596-52678-8|edition=1. ed.|coauthors=Vossen, J.P.; Newham, Cameron|accessdate=19 December 2012|page=65|chapter=3.8. Prompting for a Password|quote=Be aware that if you read a password into an environment variable it is in memory in plain text, and thus may be accessed via a core dump or /proc/core. It is also in the process environment, which may be accessible by other processes.}}</ref>

PowerShell can work with encrypted string variables/parameters.<ref>{{cite web|last=Holmes|first=Lee|title=SecureStrings in PowerShell|url=http://www.leeholmes.com/blog/2006/06/01/securestrings-in-powershell/|accessdate=18 December 2012}}</ref> Encrypted variables ensure that values are not inadvertently disclosed through e.g. transcripts, echo'ing, logfiles, memory or crash dumps or even malicious memory scanning. PowerShell also supports saving of such encrypted strings in text files, protected by a key owned by the current user.

=== General execution restriction ===
Some operating systems define an ''execute'' permission which can be granted to users/groups for a script file. The Linux/Unix shells in general require that this bit be set if a file is invoked as a script file to be executed by the shell. Although Windows also specifies an ''execute'' permission, none of the Windows specific shells block script execution if the permission has not been granted. PowerShell protects against inadvertently executing scripts obtained from untrusted sources through other means (described in the following sections).

=== Script origin execution restriction ===
PowerShell can be set to block execution of scripts which has been marked as obtained from an unknown/untrusted origin (e.g. the Internet).<ref>http://www.windowsecurity.com/articles/PowerShell-Security.html</ref> Internet facing applications such as web browsers, IM clients, mail readers etc. mark files downloaded from the internet with the origin zone in an alternate data stream which is understood by PowerShell. The Unix/Linux shell in general block on the specific ''execute'' permission (see [[#General execution restriction|General execution restriction]] above), not based on origin zone.

=== Signed script restriction ===
Script/code signing policies can be used to ensure that an operations department only run approved scripts/code which have been reviewed and signed by a trusted reviewer/approver. Signing regimes also protects against tampering. If a script is sent from vendor to a client, the client can use signing to ensure that the script has not been tampered with during transit and that the script indeed originates from the vendor and not an attacker trying to social engineer an operator into running an attack script.

PowerShell can be set to allow execution of otherwise blocked scripts (e.g. originating from an untrusted zone) if the script has been digitally signed using a trusted digital certificate.<ref>http://www.hanselman.com/blog/SigningPowerShellScripts.aspx</ref><ref>http://blogs.technet.com/b/heyscriptingguy/archive/2010/06/17/hey-scripting-guy-how-can-i-sign-windows-powershell-scripts-with-an-enterprise-windows-pki-part-2-of-2.aspx</ref><ref>http://technet.microsoft.com/en-us/library/ee176949.aspx</ref>

=== Multilevel execution policies ===
A company may want to enforce execution restriction globally within the company and/or certain parts of the company. It may want to set a policy for running signed scripts but allow certain parts of the company to set their own policies for zoned restrictions.

PowerShell allows script blocking policies to be enforced at multiple levels: Local machine, current user etc. A higher level policy overrides a lower level policy, e.g. if a policy is defined for the local machine it is in place for all users of the local machine, only if it is left ''undefined'' at the higher level can it be defined for the lower levels.

=== Restricted shell subset ===
Several shells can be started or be configured to start in a mode where only a limited set of commands and actions is available to the user. While not a security ''boundary'' (the command accessing a resource is blocked rather than the resource) this is nevertheless typically used to restrict users' actions before logging in.

A restricted mode is part of the [[POSIX]] specification for shells, and most of the Linux/Unix shells support such a mode where several of the built-in commands are disabled and only external commands from a certain directory can be invoked.<ref>http://pwet.fr/man/linux/commandes/posix/sh</ref><ref>http://www.gnu.org/software/bash/manual/html_node/The-Restricted-Shell.html</ref>

PowerShell supports restricted modes through ''session configuration files'' or session configurations. A session configuration file can define visible (available) cmdlets, aliases, functions, path providers and more.<ref>http://technet.microsoft.com/en-us/library/hh849712.aspx</ref>

=== Safe data subset ===
Scripts that invoke other scripts can be a security risk as they can potentially execute foreign code in the context of the user who launched the initial script. Scripts will usually be designed to exclusively include scripts from known safe locations; but in some instances, e.g. when offering the user a way to configure the environment or loading localized messages, the script may need to include other scripts/files.<ref>{{cite book|last=Albing|first=Carl|title=Bash cookbook|year=2007|publisher=O'Reilly|location=Sebastopol, Calif.|isbn=978-0-596-52678-8|edition=1. ed.|coauthors=Vossen, J.P.; Newham, Cameron|quote=[...] is hardly what one thinks of as a passive list of configured variables. It can run other commands (e.g.,cat) and use if statements to vary its choices. It even ends by echoing a message. Be careful when you source something, as it?s a wide open door into your script.}}</ref> One way to address this risk is for the shell to offer a safe subset of commands which can be executed by an included script.

PowerShell [http://technet.microsoft.com/en-us/library/hh848302.aspx data sections] can contain constants and expressions using a restricted subset of operators and commands.<ref>{{cite web|title=about_Data_Sections|url=http://technet.microsoft.com/en-us/library/hh848302.aspx|publisher=Microsoft|accessdate=18 December 2012}}</ref> PowerShell data sections are used when e.g. localized strings needs to be read from an external source while protecting against unwanted side effects.

=== Notes ===
{{reflist|close}}

==External links==
*[http://w3.linux-magazine.com/issue/78/Bash_vs._Vista_PowerShell.pdf Linux Magazine: Bash vs. Vista PowerShell]
*[http://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html IEEE. 1003.1 Standard for Information Technology ? Portable Operating System Interface (POSIX): Shell and Utilities, Issue 7]
{{Use dmy dates|date=April 2012}}

{{DEFAULTSORT:Comparison Of Command Shells}}
[[Category:Command shells]]
[[Category:Software comparisons|Shells]]