This is a comparison between the two primary database engines ([[InnoDB]] and [[MyISAM]]) for the [[MySQL]] [[database management system]] (DBMS). A '''database engine''' (or "storage engine") is the underlying software component that a DBMS uses to [[create, read, update and delete]] (CRUD) [[data]] from a [[database]].
{{POV|date=October 2011}}
{{refimprove|date=March 2010}}

{| class="wikitable"
|-
! Name !! Free !! Transactional
|-
| [[Aria (storage engine)|Aria]] || GPL || {{No}}
|-
| BlitzDB || GPL || {{No}}
|-
| [[Falcon (storage engine)|Falcon]] || GPL || {{Yes}}
|-
| [[InnoDB]] || GPL || {{Yes}}
|-
| [[MyISAM]] || GPL || {{No}}
|-
| [[InfiniDB]] || CPL || {{No}}
|-
| [[TokuDB]] || Modified GPL || {{Yes}}
|-
| [[XtraDB]] || GPL || {{Yes}}
|}

==Comparison between InnoDB and MyISAM==
#InnoDB recovers from a crash or other unexpected shutdown by replaying its logs. MyISAM must fully scan and repair or rebuild any indexes or possibly tables which had been updated but not fully flushed to disk. Since the InnoDB approach is approximately fixed time while the MyISAM time grows with the size of the data files, InnoDB offers greater availability as database sizes grow.
#InnoDB, with innodb_flush_log_at_trx_commit set to 1, flushes the transaction log after each transaction, greatly improving reliability.<ref name=trx_commit>[http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_flush_log_at_trx_commit MySQL 5.5 Reference Manual - InnoDB Startup Options and System Variables]</ref> MyISAM has to be run on top of a fully journaled filesystem, such as ext4 mounted with data=journal, to provide the same resilience against data file corruption. (The journal can be put on an [[Solid-state drive|SSD]] device for improved MyISAM performance, similarly, the InnoDB log can be placed on a non-journaled filesystem such as ext2 running on an SSD for a similar performance boost. Reliability is not sacrificed in either case.)
#InnoDB can be run in a mode where it has lower reliability but in some cases higher performance. Setting innodb_flush_log_at_trx_commit to 0 switches to a mode where transactions are not committed to disk before control is returned to the caller. Instead, disk flushes happen on a timer.<ref name=trx_commit/>
#InnoDB automatically groups together multiple concurrent inserts and flushes them to disk at the same time.<ref>[http://dev.mysql.com/doc/refman/5.5/en/innodb-performance-group_commit.html MySQL 5.5 Reference Manual - InnoDB Group Commit]</ref>
#MyISAM relies on the filesystem block cache for caching reads to the data rows and indexes, while InnoDB does this within the engine itself, combining the row caches with the index caches.<ref>[http://dev.mysql.com/doc/refman/5.5/en/innodb-storage-engine.html MySQL 5.5 Reference Manual - The InnoDB Storage Engine]</ref>
#InnoDB will store rows in [[primary key]] order if present, else first [[unique key]] order. This can be significantly faster if the key is chosen to be good for common operations.{{Citation needed|date=May 2009}} If there is no primary key or unique key InnoDB will use an internally generated unique integer key and will physically store records in roughly insert order, as MyISAM does. Alternatively, an autoincrementing primary key field can be used to achieve the same effect.
#InnoDB provides updatable [[Lempel?Ziv?Welch|LZW]] compressed page storage for both data and indexes. MyISAM compressed tables can't be updated.<ref>[http://dev.mysql.com/doc/refman/5.5/en/myisampack.html MySQL 5.5 Reference Manual - myisampack ? Generate Compressed, Read-Only MyISAM Tables]</ref>
#When operating in fully [[ACID]]-compliant modes, InnoDB must do a flush to disk at least once per transaction, though it will combine flushes for inserts from multiple connections.  For typical hard drives or arrays, this will impose a limit of about 200 update transactions per second.  For applications which require higher transaction rates, disk controllers with write caching and battery backup will be required in order to maintain transactional integrity. InnoDB also offers several modes which reduce this effect, naturally leading to a loss of transactional integrity guarantees, though still retaining greater reliability than MyISAM.  MyISAM has none of this overhead, but only because it does not support transactions.
#MyISAM uses table-level locking on updates and deletes to any existing row, with an option to append new rows instead of taking a lock and inserting them into free space. InnoDB uses row-level locking.  For large database applications where many rows are often updated, row-level locking is crucial because a single table-level lock significantly reduces concurrency in the database.
#Both InnoDB and MyISAM support [[Full text search|full-text search]], with InnoDB gaining full-text index support in MySQL 5.6.4.<ref>{{cite web|url=https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-4.html|title=Changes in MySQL 5.6.4 (2011-12-20, Milestone 7)|publisher=Oracle|date=December 12, 2011}}</ref>

==Notes==
{{Reflist}}

==External links==
* [http://dev.mysql.com/doc/mysql/en/myisam-storage-engine.html MySQL Documentation on MyISAM Storage Engine]
* [http://www.geeksww.com/tutorials/database_management_systems/mysql/installation/mysql_tablecache_informationschema_and_open_files_limit.php MyISAM's open files limit and table-cache problem explained]
* [http://www.mysqlperformanceblog.com/2006/06/17/using-myisam-in-production/ The article about problems which will occur in using MyISAM]

{{MySQL}}

[[Category:Database engines| ]]
[[Category:MySQL]]
[[Category:Database software comparisons|MySQL]]

{{database-software-stub}}