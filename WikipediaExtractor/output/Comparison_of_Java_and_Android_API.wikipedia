This article compares the [[Java (programming language)|Java]] and [[Android (operating system)|Android]] [[Application programming interface|API]] and [[virtual machine]]s.

While most [[Android (operating system)|Android]] applications are written in [[Java (programming language)|Java]], there are many differences between the Java API and the Android API, and Android does not use a [[Java Virtual Machine]] but another one called [[Dalvik (software)|Dalvik]].

==Android's Process Virtual machine==
There is no [[Java Virtual Machine]] in the Android platform. Java byte code is not executed. Instead Java classes are compiled into Dalvik executables and run on [[Dalvik (software)|Dalvik]], a specialized virtual machine (VM) designed specifically for Android. Unlike [[Java Virtual Machine|Java VMs]], which are [[stack machine]]s, the Dalvik VM is a  [[Register machine|register-based architecture]].

Dalvik has some specific characteristics that differentiate it from other standard VMs:<ref>{{cite web
| url=http://blogs.sun.com/jrose/entry/with_android_and_dalvik_at
| title=with Android and Dalvik at Google I/O
| last=Rose|first=John
| date=2008-05-31
| accessdate=2008-06-08}}</ref>
* The VM was designed to use less space.
* The [[Class (file format)#The constant pool|constant pool]] has been modified to use only [[32-bit]] indexes to simplify the [[Interpreter (computing)|interpreter]].
* Standard [[Java bytecode]] executes 8-bit stack instructions.  Local variables must be copied to or from the operand stack by separate instructions.  Dalvik instead uses its own 16-bit instruction set that works directly on local variables.  The local variable is commonly picked by a 4-bit 'virtual register' field.

Because of the fact that the bytecode loaded by the Dalvik virtual machine is not [[Java bytecode]], and of the specific way Dalvik load classes, it is not possible to load Java libraries packages as [[JAR (file format)|jar files]], and even a specific logic must be used to load Android libraries (specifically the content of the underlying dex file must be copied in the application private internal storage area, before being able to be loaded).<ref>{{cite web
| url=http://android-developers.blogspot.com/2011/07/custom-class-loading-in-dalvik.html
| title=Custom Class Loading in Dalvik 
| publisher=[[Google]]
| author=Fred Chung
| date=2011-07-28
| accessdate=2011-11-27}}</ref>

==System properties==
As it is the case for the [[Java SE]] class {{Javadoc:SE|java/lang|System}}, the Android {{Javadoc:Android|java/lang|System}} class allows the retrieval of system properties. However, some mandatory properties defined with the Java Virtual Machine have no meaning or a different meaning on Android. For example:
* "java.version" property returns 0 because it is not used on Android,
* "java.specification.version" invariably returns 0.9 independently of the version of Android used,
* "java.class.version" invariably returns 50 independently of the version of Android used,
* "user.dir" has a different meaning on Android,
* "user.home" and "user.name" properties do not exist on Android

==Class library==
Dalvik does not align to [[Java SE]] nor [[Java ME]] [[Java Class Library|class library]] profiles<ref>{{cite web
| url= http://www.infoq.com/news/2007/11/android-java
| title= Google's Android SDK Bypasses Java ME in Favor of Java Lite and Apache Harmony
| publisher= infoq.com
| date= 2007-11-12
| quote=''Instead of providing a full version of the Java SE or Java ME Google has diverged on two fronts. First, a limited subset of the core Java packages is provided. (...) By going this route Android is following in the footsteps of another Google project GWT which uses Java as its development language but does not support the full JDK''
| accessdate= 2009-05-31}}</ref><ref>{{cite web
| url= http://droidtutorials.blogspot.com/2010/02/alternative-to-point2d.html
| title= Alternative to Point2D
| publisher= Droid Tutorials
| date= 2010-02-12
| quote=''Given that AWT is not supported in Android API, the Point2D class, which is useful for writing 2D graphics, is missing either''
| accessdate=2010-02-17}}</ref> (e.g., [[Java ME]] classes, [[Abstract Window Toolkit|AWT]] or [[Swing (Java)|Swing]] are not supported). Instead it uses its own library<ref>{{cite web
| url=http://developer.android.com/reference/packages.html
| title=Package Index
| publisher=[[Google]]
| accessdate=2011-11-27}}</ref> built on a subset of the [[Apache Harmony]] Java implementation.

===java.lang package===
By default, the default output streams {{Javadoc:Android|member=out|java/lang|System|out}} and {{Javadoc:Android|member=err|java/lang|System|err}} do not output anything,<ref>{{cite web
| url=http://developer.android.com/guide/developing/tools/adb.html
| title=Android Debug Bridge
| quote=''By default, the Android system sends stdout and stderr (System.out and System.err) output to /dev/null.''
| publisher=[[Google]]
| accessdate=2009-05-31}}</ref> and developers are encouraged to use the {{Javadoc:Android|android/util|Log}} class, which logs Strings on the LogCat tool.<ref>{{cite web
| url=http://developer.android.com/guide/developing/debugging/debugging-log.html
| title=Reading and Writing Logs
| publisher=[[Google]]
| accessdate=2011-11-27}}</ref>

===Graphics and Widget library===
Android does not use the [[Abstract Window Toolkit]] nor the [[Swing (Java)|Swing]] library. User Interface is built using View objects.  Android uses a framework similar to Swing based around {{Javadoc:Android|android/view|View}}s rather than {{Javadoc:SE|javax/swing|JComponent}}s. However, Android widgets are not [[JavaBean]]s: the Android application {{Javadoc:Android|android/content|Context}} must be provided to the widget at creation.

====Look and feel====
Android widget library does not support a [[Pluggable look and feel]] architecture; The Look and Feel of Android widgets must be embedded in the widgets themselves. There is, however, a limited capability to set styles and themes for an application.<ref>{{cite web
| url=http://developer.android.com/guide/topics/ui/themes.html#ApplyAStyle
| title=Applying Styles and Themes
| publisher=[[Google]]
| accessdate=2011-09-03}}</ref>

====Layout manager====
Contrary to Java where [[Layout manager]]s can be applied to any [[Container (data structure)|container widget]], Android layout behavior is encoded in the containers.<ref>{{cite web
| url=http://developer.android.com/guide/topics/ui/layout-objects.html
| title=Common Layout Objects
| publisher=[[Google]]
| accessdate=2011-09-03}}</ref>

==See also==
* [[Android (operating system)]]
* [[Dalvik (software)]]
* [[Java (programming language)]]

==References==
{{Reflist|2}}

{{Android}}

[[Category:Android (operating system)]]
[[Category:Programming language comparisons|Java and Android]]
[[Category:Java programming language]]