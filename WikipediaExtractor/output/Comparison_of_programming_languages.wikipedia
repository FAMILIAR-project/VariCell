{{ProgLangCompare}}
[[Programming language]]s are used for controlling the behavior of a machine (often a [[computer]]). Like [[natural language]]s, programming languages conform to rules for [[syntax]] and [[semantics]].

There are [[list of programming languages|thousands of programming languages]]<ref>As of May 2006 Diarmuid Pigott's [http://hopl.murdoch.edu.au/ Encyclopedia of Computer Languages] hosted at [[Murdoch University]], [[Australia]] lists 8512 computer languages.</ref> and new ones are created every year. Few languages ever become sufficiently popular that they are used by more than a few people, but professional [[programmer]]s may use dozens of languages in a career.

__TOC__
{{-}}

==General comparison==
The following table compares general and technical information for a selection of commonly used [[programming language]]s. See the individual languages' articles for further information. Please note that the following table may be missing some information.
<!-- Per [[WP:REPEATLINK]]: Wikilink terms on 1st instance only, remove later repeat links. -->
{| class="wikitable sortable"
|- 
! Language
! Intended use <!--What this was to be used for originally. Not what it is used for now, which is hard to verify.-->
! [[programming paradigm|Paradigm]](s)
! [[standardization|Standardized]]?
|-
! [[ActionScript]] 3.0
| Application, client-side, Web
| [[event-driven programming|event-driven]], [[imperative programming|imperative]], [[object-oriented programming|object-oriented]]
| {{yes|1996}}, ECMA
|-
! [[Ada (programming language)|Ada]]
| Application, embedded, realtime, system
| [[concurrent programming language|concurrent]],<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-9.html Section 9: Tasks and Synchronization]</ref> [[distributed programming|distributed]],<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3] [http://www.adaic.org/standards/05rm/html/RM-E.html Annex E: Distributed Systems]</ref> [[generic programming|generic]],<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-12.html Section 12: Generic Units]</ref> imperative object-oriented,<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-3-9.html 3.9 Tagged Types and Type Extensions]</ref> [[procedural programming|procedural]],<ref>[http://www.adaic.org/standards/05rm/html/RM-TTL.html Ada Reference Manual, ISO/IEC 8652:2005(E) Ed. 3], [http://www.adaic.org/standards/05rm/html/RM-6.html Section 6: Subprograms]</ref> 
| {{yes|1983}}, 2005, 2012, ANSI, ISO, [[GOST]] 27831-88<ref>[http://vak.ru/lib/exe/fetch.php/book/gost/pdf/gost-27831-88.pdf Vak.ru]</ref>
|-
! [[Aldor]]
| Highly domain-specific, symbolic computing
| imperative, [[functional programming|functional]], object-oriented
| {{no}}
|-
! [[ALGOL 58]]
| Application
| imperative
| {{no}}
|-
! [[ALGOL 60]]
| Application
| imperative
| {{yes|1960}}, [[IFIP WG 2.1]], ISO<ref>[http://www.open-std.org/jtc1/sc22/docs/oldwgs/wg6.html ISO 1538:1984]</ref>
|-
! [[ALGOL 68]]
| Application
| concurrent, imperative
| {{yes|1968}}, [[IFIP WG 2.1]], [[GOST 27974-88]],<ref>[http://vak.ru/lib/exe/fetch.php/book/gost/pdf/gost-27974-88.pdf Vak.ru]</ref>
|-
! [[Ateji PX]]
| Parallel application
| object-oriented, [[pi calculus]]
| {{no}}
|-
! [[APL (programming language)|APL]]
| Application, data processing
| [[array programming|array-oriented]], [[tacit programming|tacit]]
| {{yes|1989}}, ISO
|-
! [[Assembly language]]
| General
| any, imperative, syntax is usually highly specific, related to the target processor
| {{no}}
|-

! [[AutoHotkey]]
| GUI automation (macros), highly domain-specific
| imperative
| {{no}}
|-
! [[AutoIt]]
| GUI automation (macros), highly domain-specific
| event-driven, imperative, [[procedural programming|procedural]]
| {{no}}
|-
! [[BASIC]]
| Application, education
| imperative, procedural
| {{yes|1983}}, [http://portal.acm.org/citation.cfm?id=988221 ANSI], ISO
|-
! [[BBj]]
| Application, business, Web
| object-oriented, procedural
| {{no}}
|-
! [[BeanShell]]
| Application, scripting
| functional, imperative, object-oriented, [[reflective programming|reflective]]
| {{no|In progress}}, [[Java Community Process|JCP]]<ref>[http://jcp.org/en/jsr/detail?id=274 JSR 274]</ref>
|-
! [[BLISS]]
| System
| procedural
| {{no}}
|-
! [[BlitzMax]]
| Application, game
| imperative, object-oriented, procedural
| {{no}}
|-
! [[Boo (programming language)|Boo]]
| Application
| 
| {{no}}
|-
! [[C (programming language)|C]]
| System<ref>[http://cm.bell-labs.com/cm/cs/who/dmr/chist.html CM.bell-labs.com]</ref>
| imperative, procedural
| {{yes|1989}}, [[ANSI C|ANSI C89, ISO C90, ISO C99, ISO C11]]<ref>[http://www.open-std.org/JTC1/SC22/WG14/ ANSI C89, ISO/IEC 9899:1990, 1999, 2011]</ref>
|-
! [[C++]]
| Application, system
| [[generic programming|generic]], imperative, object-oriented, procedural, functional
| {{yes|1998}}, ISO/IEC 1998, ISO/IEC 2003, ISO/IEC 2011<ref>[http://www.open-std.org/JTC1/SC22/WG21/ ISO/IEC 14882:1998, 2003, 2011]</ref>
|-
! [[C Sharp (programming language)|C#]]
| Application, business, client-side, general, server-side, Web, Robotics
| structured, functional,<ref>[http://www.codeproject.com/KB/cs/intro_functional_csharp.aspx Codeproject.com: Functional Programming in C# 3.0 using Lambda Expression]</ref> generic, imperative, object-oriented, reflective, concurrent, event-driven
| {{yes|2000}}, ECMA, ISO<ref>ECMA-334; ISO/IEC 23270:2006</ref>
|-
! [[Clarion (programming language)|Clarion]]
| General, business, Web
| functional,<ref>[http://www.softvelocity.com Softvelocity.com]</ref> imperative, object-oriented
|{{unknown}}
|-
! [[Clean (programming language)|Clean]]
| General
| functional, generic
| {{no}}
|-
! [[Clojure]]
| General
| concurrent, functional
| {{no}}
|-
! [[CLU (programming language)|CLU]]
| General
| generic, imperative, object-oriented, procedural
| {{no}}
|-
! [[COBOL]]
| Application, business 
| imperative, object-oriented
| {{yes|2002 (ISO/IEC 1989)}}
|-
! [[Cobra (programming language)|Cobra]]
| Application, business, general, Web
| functional, generic, imperative, object-oriented, reflective
| {{no}}
|-
! [[ColdFusion Markup Language|ColdFusion]] (CFML)
| Web
| object-oriented, procedural
| {{no}}
|-
! [[Common Lisp]]
| General
| functional, generic, imperative, object-oriented, reflective
| {{yes|1994}}, ANSI
|-
! [[COMAL]] 80
| Education
| imperative, procedural
| {{no}}
|-
! Crystal 1.0.0
| Education
| functional, imperative, procedural
| {{no}}
|-
<!-- If there really is a language named "?" please uncomment this and verify it. If else, please remove.
! ?
| ?
| event-driven, functional, generic, imperative, object-oriented, reflective
| {{no}}-->
|-
! [[Cython]]
| Application, general, numerical computing
| [[aspect-oriented programming|aspect-oriented]], functional, imperative, object-oriented, reflective
| {{no}}
|-
! [[D (programming language)|D]]
| Application, system
| generic, generative, imperative, object-oriented, functional, concurrent
| {{no}}
|-
! [[Dart (programming language)|Dart]]
| Application, Web
| imperative, structured, object-oriented
| {{no}}
|-
! [[Dylan (programming language)|Dylan]]
| Application
| functional, object-oriented
| {{no}}
|-
! [[DYL-280]]
| Application, system
| imperative, procedural
| {{no}}
|-
! [[Eiffel (programming language)|Eiffel]]
| Application
| generic, imperative, object-oriented
| {{yes|2005}}, ECMA, ISO<ref>ECMA-367; ISO/IEC 25436:2006</ref>
|-
! [[Erlang (programming language)|Erlang]]
| Application, distributed, telecom
| concurrent, [[distributed programming|distributed]], functional
| {{no}}
|-
! [[Euphoria (programming language)|Euphoria]]
| Application. Since the interpreter is shared for system and application code, system is not an intended use because application crashes would affect the whole system. 
| procedural, reflective
| {{no}}
|-
! [[Factor (programming language)|Factor]]
|
| [[stack-oriented programming language|stack-oriented]]
| {{no}}
|-
! [[Falcon (programming language)|Falcon]]
| General, Application
| procedural, functional, object oriented, prototype OOP, message oriented, tabular programming
| {{no}}
|-
! [[FP (programming language)|FP]]
|
| functional
| {{no}}
|-
! [[F Sharp (programming language)|F#]]
| Application
| functional, generic, imperative, object-oriented
| {{no}}
|-
! [[Forth (programming language)|Forth]]
| General
| imperative, stack-oriented
| {{yes|1994}}, ANSI
|-
! [[Fortran]]
| Application, numerical computing
| generic, imperative, object-oriented, procedural
| {{yes|1966}}, ANSI 66, ANSI 77, MIL-STD-1753, ISO 90, ISO 95, ISO 2003
|-
! G2
| Application, inference, expert system
| common graphical development and runtime environment, event-driven, imperative, object-oriented
| {{no}}
|-
! [[Gambas]]
| Application
| event-driven, imperative, object-oriented
| {{no}}
|-
! [[Game Maker Language]]
| Application, games
| event-driven, imperative, object-oriented
| {{no}}
|-
! [[GLBasic]]
| Application, games
| imperative, procedural, simple object-oriented
| {{no}}
|-
! [[Go (programming language)|Go]]
| Application, system
| concurrent, imperative
| {{no}}
|-
! [[Gosu (programming language)|Gosu]]
| Application, general, scripting, Web
| generic, imperative, object-oriented, reflective
| {{no}}
|-
! [[GraphTalk]]
| Application
| logic, object-oriented
| {{no}}
|-
! [[Groovy (programming language)|Groovy]]
| Application, Web
| aspect-oriented, imperative, object-oriented, functional
| {{no|In progress}}, [[Java Community Process|JCP]]<ref>[http://jcp.org/en/jsr/detail?id=241 JSR 241]</ref>
|-
! [[Harbour (programming language)|Harbour]]
| Application, business, data processing, general, Web
| [[declarative programming|declarative]], functional, generic, imperative, object-oriented, procedural, reflective
| {{no}}
|-
! [[Haskell (programming language)|Haskell]]
| Application
| functional, generic, [[lazy evaluation]]
| {{yes|2010}}, Haskell 2010<ref>{{cite web|url=http://www.haskell.org/onlinereport/haskell2010/ |title=The Haskell 2010 Language Report |accessdate=2011-12-07}} Most Haskell implementations extend the Haskell 2010 standard.</ref>
|-
! [[Haxe]]
| Application, general, Web
| imperative, object-oriented, functional, generic, reflective
| {{no}}
|-
! [[HyperNext]]
| Application, education
| event-driven, procedural, [[weak typing|weakly typed]]
| {{no}}
|-
! [[Io (programming language)|Io]]
| Application, host-driven scripting
| imperative, object-oriented
| {{no}}
|-
! [[ISLISP]]
| General
| functional, generic, imperative, object-oriented
| {{yes|1997}}, [[International Organization for Standardization|ISO]]
|-
! [[J (programming language)|J]]
| Data processing
| array-oriented, [[function-level programming|function-level]], tacit
| {{no}}
|-
! [[JADE (programming language)|JADE]]
| Application, distributed
| imperative, object-oriented
| {{no}}
|-
! [[Java (programming language)|Java]]
| Application, business, client-side, general, server-side, Web
| generic, imperative, object-oriented, reflective
| {{yes|''De facto'' standard}} via [http://docs.oracle.com/javase/specs/jls/se7/html/index.html Java Language Specification]
|-
! [[JavaScript]]
| Client-side, Server-side, Web 
| functional, imperative, [[prototype-based]], reflective
| {{yes|1997}}, ECMA
|-
! [[Joy (programming language)|Joy]]
| Research
| functional, stack-oriented
| {{no}}
|-
! [[K (programming language)|K]]
| Data processing, business
| array-oriented, tacit
| {{unk}}
|-

! [[LabVIEW]] (G)
| Application, industrial instrumentation-automation
| [[dataflow programming|dataflow]], [[visual programming language|visual]]
| {{no}}
|-
! [[Lisp (programming language)|Lisp]]
| General
| functional
| {{unk}}
|-
! [[Logtalk]]
| Artificial intelligence, application
| event-driven, logic, object-oriented, reflective
| {{no}}
|-
! [[Lua (programming language)|Lua]]
| Application, embedded scripting
| aspect-oriented, functional, imperative, object-oriented,<!-- Lua doesn't have explicit "object" type (more general type of "table" is used for object definition), but does have explicit syntax for object method calling --> procedural, reflective
| {{no}}<ref>Version releases are accompanied with a definitive Lua Reference Manual showing full syntax and semantics; a reference implementation, and a test suite. These are used to generate other Lua [[virtual machine|VM]] implementations and compilers such as [[Kahlua (software)|Kahlua]] and [[LLVM-Lua]].</ref>
|-
! [[Maple (software)|Maple]]
| Symbolic computation, numerical computing
| procedural, functional, [[imperative programming|imperative]], [[object-oriented programming|object-oriented]], [[distributed programming|distributed]]
| {{no}}
|-
! [[Mathematica]]
| Symbolic language
| functional, procedural, imperative, logic, distributed, object-oriented
| {{no}}
|-
! [[MATLAB]]
| Highly domain-specific, numerical computing
| imperative, object-oriented, procedural
| {{no}}
|-
! [[Modula-2]]
| Application, system
| generic, imperative
| {{yes|1996}}, ISO<ref>ISO/IEC 10514-1:1996</ref>
|-
! [[Modula-3]]
| Application
| generic, imperative, object-oriented
| {{no}}
|-
! [[Oberon (programming language)|Oberon]]
| Application, system
| imperative, object-oriented
| {{no}}
|-
! [[Objective-C]]
| Application
| imperative, object-oriented, reflective
| {{no}}<ref>[http://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Standards.html GCC.GNU.org]</ref>
|-
! [[OCaml]]
| Application
| functional, generic, imperative, object-oriented
| {{no}}
|-
! [[Object Pascal]] ([[Borland Delphi|Delphi]])
| Application, business, client-side, general, server-side, Web
| aspect-oriented,<ref>[http://prismwiki.embarcadero.com/en/RemObjects_Cirrus Cirrus: Aspect-oriented programming in Delphi Prism]</ref> event-driven, functional, generic, imperative, object-oriented, procedural, reflective
| {{no}}
|-
! [[Occam (programming language)|Occam]] 
| General
| concurrent, imperative, procedural, [[process-oriented programming|process-oriented]]
| {{no}}
|-
! [[Opa (programming language)|Opa]]
| Web applications
| functional, generic, imperative, [[distributed programming|distributed]]
| {{no}}
|-
! [[Oxygene (programming language)|Oxygene]]
| Application
| generic, imperative, object-oriented
| {{no}}
|-
! [[Oz (programming language)|Oz]]
| Application, distribution, education
| concurrent, functional, imperative, logic, object-oriented
| {{no}}
|-
! [[Pascal (programming language)|Pascal]]
| Application, education
| imperative, procedural
| {{yes|1983}}, ISO<ref>ISO 7185</ref>
|-
! [[Pawn (programming language)|Pawn]]
| Embedded, host-driven scripting
| imperative
| {{no}}
|-
! [[Perl]]
| Application, scripting, text processing, Web
| functional, generic, imperative, object-oriented, procedural, reflective
| {{no}}
|-
! [[PHP]]
| Server-side, Web Application, Web
| imperative, object-oriented,<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.oop5.php Chapter 19. Classes and Objects (PHP 5)],</ref> procedural,<ref>[http://php.net/manual/en/index.php PHP Manual], [http://php.net/manual/en/language.functions.php Chapter 17. Functions]</ref> reflective
| {{no}}
|-
! [[PL/I]]
| Application
| imperative, object-oriented, procedural
| {{yes|1969}}
|-
! [[Plus (programming language)|Plus]]
| Application, system development
| imperative, procedural
| {{no}}
|-
! [[Prolog]]
| Application, artificial intelligence
| logic
| {{yes|1995}}, ISO
|-
! [[PureBasic]]
| Application
| procedural
| {{no}}
|-
! [[Python (programming language)|Python]]
| Application, general, Web, scripting
| aspect-oriented, functional, imperative, object-oriented, reflective
| {{yes|''De facto'' standard}} via [[Python Enhancement Proposal#Development|Python Enhancement Proposals]] (PEP)s.
|-
! [[Racket (programming language)|Racket]]
| Education, general, scripting
| functional, procedural, modular, object-oriented, logic, reflective, meta
| {{no}}
|-
! [[REALbasic]]
| Application
| procedural
| {{unk}}
|-
! [[REBOL]]
| Distributed
| [[dialecting|dialected]], functional, imperative, object-oriented
| {{no}}
|-
! [[IBM RPG|RPG (IBM)]]
| Application, system
| imperative, procedural
| {{no}}
|-
! [[Ruby (programming language)|Ruby]]
| Application, scripting, Web
| aspect-oriented, functional, imperative, object-oriented, reflective
| {{yes|2011(JIS X 3017), 2012(ISO/IEC 30170)}}
|-
! [[Rust (programming language)|Rust]]
| Application, system
| concurrent, functional, generic, imperative, object-oriented, reflective
| {{no}}
|-
! [[S (programming language)|S]]
| Application, statistics
| functional, imperative, object-oriented, procedural
| {{no}}
|-
! [[S-Lang (programming library)|S-Lang]]
| Application, numerical, scripting
| imperative, procedural
| {{no}}
|-
! [[Scala (programming language)|Scala]]
| Application, distributed, Web
| functional, generic, imperative, object-oriented
| {{yes|''De facto'' standard}} via [http://www.scala-lang.org/sites/default/files/linuxsoft_archives/docu/files/ScalaReference.pdf Scala Language Specification (SLS)]
|-
! [[Scheme (programming language)|Scheme]]
| Education, general
| functional
| {{yes|1998}}, R<sup>6</sup>RS
|-
! [[Simula]]
| Education, general
| [[discrete event simulation]], event-driven, imperative, [[multi-threaded]] (quasi-parallel) program execution, object-oriented
| {{yes|1968}}
|-
! [[Microsoft Small Basic | Small Basic]]
| Application, education, games
| [[component-oriented programming|component-oriented]], event-driven, imperative
| {{no}}
|-
! [[Smalltalk]]
| Application, education
| concurrent, declarative, event-driven, object-oriented, reflective
| {{yes|1998}}, [http://www.techstreet.com/cgi-bin/detail?product_id=56122 ANSI]
|-
! [[SNOBOL]]
| Text processing
|
| {{unk}}
|-
! [[Standard ML]]
| Application
| functional, generic, imperative
| {{yes|1997}}, SML '97<ref>[http://www.smlnj.org/sml97.html SMLNJ.org]</ref>
|-
! [[Tcl]]
| Application, scripting, Web
| event-driven, imperative, procedural, reflective
| {{no}}
|-
! [[Visual Basic]]
| Application, education
| [[component-oriented programming|component-oriented]], event-driven, imperative
| {{no}}
|-
! {{nowrap|[[Visual Basic .NET]]}}
| Application, education, Web
| event-driven, imperative, object-oriented
| {{no}}
|-
! [[Visual Prolog]]
| Application
| declarative, event-driven, functional, imperative, logic, object-oriented
| {{no}}
|-
! [[Windows PowerShell]]
| Administration
| functional, imperative, object-oriented, [[pipeline programming|pipeline]], reflective
| {{no}}
|-
! [[XL (programming language)|XL]]
|
| [[concept programming]], imperative, object-oriented
| {{no}}
|-class="sortbottom"
! Language
! Intended use <!--What was this supposed to be used for? Not what is this used for now (that would be hard to verify).-->
! [[Programming paradigm|Paradigm]](s)
! [[Standardization|Standardized]]?
|}

==Type systems==

Brief definitions
*''Compatibility among composite types'' describes the behavior of functions applied to data typed similarly to its intended type. Name-based compatibility means that functions work only on data of its intended type and declared subtypes. Property-based compatibility means that functions work on any data that has the same properties as its intended type.
*''Type checking'' determines whether and when types are verified. Static checking occurs at compile-time. Dynamic checking occurs at run-time.
{| class="wikitable sortable"
|-
! Language
! [[Type system#Strong and weak typing|Type strength]]
! [[Type system#Safely and unsafely typed systems|Type safety]]
! [[Type system#Explicit or implicit declaration and inference|Type expression]]
! [[Type system#Compatibility: equivalence and subtyping|Type compatibility among composites]] <!-- dynamic typing doesn't automatically mean it has property-based compatibility -->
! [[Type system#Type checking|Type checking]]
|-
! [[ActionScript]] 3.0
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
|
| static
|-
! [[Ada (programming language)|Ada]]
| strong
| {{Yes|safe}}<ref group=TS>Unsafe operations are well isolated by a "Unchecked_" prefix.</ref>
| explicit
| name-based
| partially dynamic<ref group=TS>Dynamic type checking is used when type safety can not be determined statically, i.e., for tagged types (type extension / [[Inheritance (computer science)|inheritance]]), numeric ranges and array bounds.</ref>
|-
! [[Aldor]]
| strong
| {{No|unsafe}}
| implicit
| 
| static
|-
! [[ALGOL 58]]
| strong
| {{Yes|safe}}
| explicit
|
| static
|-
! [[ALGOL 60]]
| strong
| {{Yes|safe}}
| explicit
|
| static
|-
! [[ALGOL 68]]
| strong
| {{Yes|safe}}
| explicit
| property-based
| static
|-
! [[APL (programming language)|APL]]
| strong
| {{Yes|safe}}
|
|
| dynamic
|-
! [[AutoHotkey]]
| none
| 
|
| 
|
|-
! [[Ateji PX]]
| strong
| {{Yes|safe}}
| explicit
| name-based
| static
|-
! [[BASIC]]
| varies by dialect
|
|
|
|
|-
! [[BLISS]]
| none
| n/a
| n/a
| n/a
| n/a
|-
! [[BeanShell]]
| strong
| {{Yes|safe}}
|
| name-based
| dynamic
|-
! [[Boo (programming language)|Boo]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
|
| static with optional dynamic typing
|-
! [[C (programming language)|C]]
| weak
| {{No|unsafe}}
| explicit
| name-based
| static
|-
! [[C++]] ([[ISO/IEC 14882]])
| strong
| {{No|unsafe}}
| explicit
| name-based
| static<ref group=TS>with optional dynamic type casting (see [[dynamic_cast]])</ref>
|-
! [[C Sharp (programming language)|C#]]
| strong
| {{Yes|safe}}<ref group=TS>Safe, but supports unsafe code through an explicit declaration</ref>
| implicit with optional explicit typing
| name-based
| static<ref group=TS>with optional dynamic type (see [[C Sharp syntax#Dynamic|dynamic member lookup]])</ref>
|-
! [[Clean (programming language)|Clean]]
| strong
| {{Yes|safe}}
| implicit
|
| static
|-
! [[Clojure]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
|
| dynamic
|-
! [[COBOL]]
| strong
|
|
|
| static
|-
! [[ColdFusion Markup Language|ColdFusion]] (CFML)
| strong
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Common Lisp]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing	
|
| dynamic
|-
! [[Curl (programming language)|Curl]]
| strong
| {{Yes|safe}}
|
| name-based
|
|-
! [[Cython]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| name-based (extension types) and property-based (Python)
| dynamic with optional static typing
|-
! [[D (programming language)|D]]
| strong
| {{No|unsafe}}<ref group=TS name=r2>It is almost safe, unsafe features are not commonly used.</ref>
| explicit
| name-based
| static
|-
! [[Dylan (programming language)|Dylan]]
| strong
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Eiffel (programming language)|Eiffel]]
| strong
| {{Yes|safe}}
|
| name-based
| static
|-
! [[Erlang (programming language)|Erlang]]
| strong
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Euphoria (programming language)|Euphoria]]
| strong
| {{Yes|safe}}
| explicit, implicit with objects
| name-based
| static, dynamic with objects
|-
! [[F Sharp (programming language)|F#]]
| strong
| {{Yes|safe}}
| implicit
| name-based
| static
|-
! [[Falcon (programming language)|Falcon]]
| strong
| {{Yes|safe}}
| implicit
| property-based
| dynamic
|-
! [[Forth (programming language)|Forth]]
| none
| n/a
| n/a
| n/a
| n/a
|-
! [[Fortran]]
| strong
| {{Yes|safe}}
| explicit<ref group=TS>Optionally, typing can be ''explicitly implied'' by the first letter of the identifier (known as implicit typing within the Fortran community).</ref>
| name-based
| static
|-
! [[Gambas]]
| strong
| {{Yes|safe}}
| explicit
| name-based
|
|-
! [[GLBasic]]
| strong
| {{Yes|safe}}
| explicit.  Non-explicit declarations available through project options
| name-based
| static
|-
! [[Go (programming language)|Go]]<ref>[http://golang.org/doc/go_spec.html The Go Programming Language Specification]</ref>
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| property-based
| static
|-
! [[Gosu (programming language)|Gosu]]
| strong
| {{Yes|safe}}
| partially implicit (local type inference)
| name-based (subclassing) and property-based (structural)
| static
|-
! [[GraphTalk]]
| weak
|
|
|
|
|-
! [[Groovy (programming language)|Groovy]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
|
| dynamic with optional static typing
|-
! [[Harbour (programming language)|Harbour]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| 
| dynamic
|-
! [[Haskell (programming language)|Haskell]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| property-based
| static
|-
! [[Haxe]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| name-based (subclassing) and property-based (structural)
| static with optional dynamic typing
|-
! [[Io (programming language)|Io]]
| strong
|  {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[ISLISP]]
| strong
| {{Yes|safe}}
|	
|
| dynamic
|-
! [[J (programming language)|J]]
| strong
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Java (programming language)|Java]]
| strong
| {{Yes|safe}}<ref>Sheng Liang, Gilad Bracha. [http://doi.acm.org/10.1145/286942.286945 Dynamic class loading in the Java virtual machine]. Volume 33, Issue 10 of ACM SIGPLAN Notices, October 1998.</ref>
| explicit
| name-based
| static
|-
! [[JavaScript]]
| weak
|
| implicit
|
| dynamic
|-
! [[Joy (programming language)|Joy]]
| strong
| {{Yes|safe}}
|
|
| dynamic
|-
! [[Lua (programming language)|Lua]]
| weak
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Maple (programming language)|Maple]]
| weak
| {{Yes|safe}}
|
| 
| dynamic
|-
! [[Mathematica]]
| strong
|
|
|
| dynamic
|-
! [[MATLAB]] M-code
|
|
|
|
| dynamic
|-
! [[Modula-2]]
| strong
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
| name-based
| static
|-
! [[Modula-3]]
| strong
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
| property-based
| static
|-
! [[Oberon (programming language)|Oberon]]
| strong
| {{Yes|safe}}
| explicit
| name-based
| static and partially dynamic<ref group=TS>dynamic checking of type extensions i.e. inherited types</ref>
|-
! [[Objective-C]]
| weak
| {{Yes|safe}}
| explicit
| name-based (subclassing) and property-based (protocols)
| dynamic with optional static typing<ref>[http://developer.apple.com/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocStaticBehavior.html Developer.apple.com]</ref>
|-
! [[OCaml]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| property-based
| static
|-
! [[Object Pascal]] ([[Embarcadero Delphi|Delphi]])
| strong
| {{Yes|safe}}
| explicit
| name-based
| static
|-
! [[Opa (programming language)|Opa]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| property-based
| static
|-
|-
! [[Oxygene (programming language)|Oxygene]]
| strong
| {{No|unsafe}}
| implicit
|
| static
|-
! [[Oz (programming language)|Oz]]
| strong
| {{Yes|safe}}
| implicit
| property-based
| dynamic
|-
! [[Pascal (programming language)|Pascal]]
| strong
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
| name-based
| static
|-
! [[Perl]] 5
| weak
|
| implicit
|
| dynamic
|-
! [[Perl 6]]
|
|
| partially implicit<ref group=TS>explicit for static types</ref>
|
| dynamic with optional static typing
|-
! [[PHP]]
| weak
|
| implicit
|
| dynamic
|-
! [[Plus (programming language)|Plus]]
| strong
| {{Yes|safe}}
| explicit
| property-based
| static, dynamic (optional)
|-
! [[Prolog]]
| strong
|
|
|
| dynamic
|-
! [[Pure (programming language)|Pure]]
|
|
|
|
| dynamic
|-
! [[Python (programming language)|Python]]
| strong
| {{Yes|safe}}
| implicit
| property-based
| dynamic
|-
! [[REBOL]]
| strong
| {{Yes|safe}}
| implicit
| 
| dynamic
|-
! [[RPG (IBM)]]
| strong
| {{No|unsafe}}
|
|
| static
|-
! [[Ruby (programming language)|Ruby]]
| strong
| {{Yes|safe}}
| implicit
| property-based
| dynamic
|-
! [[Rust (programming language)|Rust]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
|
| static with optional dynamic typing
|-
! [[S (programming language)|S]]
| strong
|
|
|
| dynamic
|-
! [[S-Lang (programming library)|S-Lang]]
| strong
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Scala (programming language)|Scala]]
| strong
| {{Yes|safe}}
| partially implicit (local type inference)
| name-based (subclassing) and property-based (structural)
| static
|-
! [[Scheme (programming language)|Scheme]]
| strong
|
| implicit
|
| dynamic (latent)
|-
! [[Simula]]
| strong
| {{Yes|safe}}
|
|
| static<ref group=TS>optional for formal and virtual procedures</ref>
|-
! [[Smalltalk]]
| strong
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[Standard ML]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| property-based
| static
|-
! [[Tcl]]
|
|
|
|
| dynamic
|-
! [[Visual Basic]]
| strong
| {{Yes|safe}}
| implicit with optional explicit typing
| name-based
| static
|-
! {{nowrap|[[Visual Basic .NET]]}}
| strong
| {{No|unsafe}}<ref group=TS name=r2 />
| explicit
|
| static
|-
! [[Visual Prolog]]
| strong
| {{Yes|safe}}
| partially implicit
| name-based
| static
|-
! [[Windows PowerShell]]
| strong
| {{Yes|safe}}
| implicit
|
| dynamic
|-
! [[XL (programming language)|XL]]
| strong
| {{Yes|safe}}
|
| name-based
| static
|-class="sortbottom"
! Language
! [[Type system#Strong and weak typing|Type strength]]
! [[Type system#Safely and unsafely typed systems|Type safety]]
! [[Type system#Explicit or implicit declaration and inference|Type expression]]
! [[Type system#Compatibility: equivalence and subtyping|Type compatibility among composites]]
! [[Type system#Type checking|Type checking]]
|}

{{Reflist|group=TS}}

== Failsafe I/O and system calls ==

Most programming languages will print an [[error message]] and/or throw an
[[exception handling|exception]] if an [[input/output]] operation or other
[[system call]] (e.g., [[chmod]], [[kill (Unix)|kill]]) fails, unless the
programmer has explicitly arranged for different handling of these events.
Thus, these languages [[failsafe|fail safely]] in this regard.

Some (mostly older) languages require that the programmer explicitly add
checks for these kinds of errors.  It is common for novice programmers to
forget to add these checks, and even experts occasionally do so{{fact|date=March 2013}}?these
omissions can lead to [[software bug|erroneous behavior]].

{| class="wikitable sortable"
|-
! Language
! Failsafe I/O
|-
! [[Ada (programming language)|Ada]]
| {{yes}} (exceptions)
|-
! [[AutoHotkey]]
| {{no}} (global ErrorLevel must be explicitly checked)
|-
! [[C (programming language)|C]]
| {{no}}<ref group="FSIO">[[GNU compiler collection|gcc]] can warn on unchecked error status. Newer versions of [[Visual Studio]] usually throw exceptions on failed I/O when using stdio.</ref>
|-
! [[C++]]
| {{no}}<ref name="VS" group="FSIO">[[GNU compiler collection|g++]] can warn on unchecked error status. Newer versions of [[Visual Studio]] usually throw exceptions on failed I/O when using stdio.</ref>
|-
! [[C Sharp (programming language)|C#]]
| {{yes}}
|-
! [[Common Lisp]]
| {{yes}}
|-
! [[D (programming language)|D]]
| {{yes}} {{citation needed|date=February 2011}}
|-
! [[Eiffel (programming language)|Eiffel]]
| {{yes}} - It actually depends on the library and it is not defined by the language
|-
! [[Erlang (programming language)|Erlang]]
| {{yes}}
|-
! [[Falcon (programming language)|Falcon]]
| {{yes}}
|-
! [[Fortran]]
| {{yes}}
|-
! [[GLBasic]]
| {{no}} - Will generally cause program to crash
|-
! [[Go (programming language)|Go]]
| {{no}}
|-
! [[Gosu (programming language)|Gosu]]
| {{yes}}
|-
! [[Harbour (programming language)|Harbour]]
| {{yes}}
|-
! [[Haskell (programming language)|Haskell]]
| {{yes}}
|-
! [[ISLISP]]
| {{yes}}
|-
! [[Java (programming language)|Java]]
| {{yes}}
|-
! [[Lua (programming language)|Lua]]
| {{no}} (some functions do not warn or throw exceptions)
|-
! [[Mathematica]]
| {{yes}}
|-
! [[Object Pascal]] ([[Embarcadero Delphi|Delphi]])
| {{some}}
|-
! [[Objective-C]]
| {{yes}} (exceptions)
|-
! [[OCaml]]
| {{yes}} (exceptions)
|-
! [[Perl]]
| {{no}}<ref group="FSIO">Considerable error checking can be enabled optionally, but by default Perl is not failsafe.</ref>
|-
! [[PHP]]
| {{yes}}
|-
! [[Python (programming language)|Python]]
| {{yes}}
|-
! [[REBOL]]
| {{yes}}
|-
! [[Ruby (programming language)|Ruby]]
| {{yes}}
|-
! [[Rust (programming language)|Rust]]
| {{yes}}
|-
! [[S (programming language)|S]]
| {{unknown}}
|-
! [[Scala (programming language)|Scala]]
| {{yes}}<ref>Scala runs on the Java Virtual Machine from which it inherits the runtime exception handling.</ref>
|-
! [[Standard ML]]
| {{yes}} {{citation needed|date=February 2011}}
|-
! [[Tcl]]
| {{yes}}
|-
! [[Visual Basic]]
| {{yes}}
|-
! [[Visual Prolog]]
| {{yes}}
|-class="sortbottom"
! Language
! Failsafe I/O
|}

{{Reflist|group=FSIO}}

==Expressiveness==
{| id="Expressiveness" class="wikitable" align="right"
|-
! Language !! Statements ratio<ref>Data from [http://books.google.at/books?id=3JfE7TGUwvgC&pg=PT100 Code Complete, p. 100]. The ''Statements ratio'' column "shows typical ratios of source statements in several high-level languages to the equivalent code in C. A higher ratio means that each line of code in the language listed accomplishes more than does each line of code in C.</ref>
! Lines ratio<ref>The ratio of line count tests won by each language to the number won by C when using the ''Compare to'' feature at [http://benchmarksgame.alioth.debian.org/debian/c.php benchmarksgame.alioth.debian.org]. Last updated May, 2006. C gcc was used for C, C++ g++ was used for C++, FORTRAN G95 was used for FORTRAN, Java JDK Server was used for Java, and Smalltalk GST was used for Smalltalk.</ref>
|-
| C || 1 || 1 
|-
| C++ || 2.5 || 1
|-
| Fortran || 2 || 0.8
|-
| Java || 2.5 || 1.5
|-
| Perl || 6 || 6
|-
| Smalltalk || 6 || 6.25
|-
| Python || 6 || 6.5
|}

The literature on programming languages contains an abundance of informal claims about their relative [[expressive power]], but there is no framework for formalizing such statements nor for deriving interesting consequences.<ref>From [http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.51.4656 On the Expressive Power of Programming Languages], Matthias Felleisen, ESOP '90 3rd European Symposium on Programming.</ref> This table provides two measures of expressiveness from two different sources. An additional measure of expressiveness, in [[GZip]] bytes, can be found on the Computer Language Benchmarks Game.<ref>[http://benchmarksgame.alioth.debian.org/u32/which-language-is-best.php?xfullcpu=0&xmem=0&xloc=1&binarytrees=1&chameneosredux=1&fannkuch=1&fasta=1&knucleotide=1&mandelbrot=1&meteor=1&nbody=1&pidigits=1&regexdna=1&revcomp=1&spectralnorm=1&threadring=1&calc=calculate Computer Language Benchmarks Game ranking]</ref>

The same concepts applied to measuring the expressiveness of computer programming languages can be applied to markup languages like [[HTML]]. [http://blog.gmarceau.qc.ca/2009/05/speed-size-and-dependability-of.html]  

<br clear="all" />

==Benchmarks==
[[benchmark (computing)|Benchmarks]] are designed to mimic a particular type of workload on a component or system. The computer programs used for compiling some of the benchmark data in this section may not have been fully optimized, and the relevance of the data is disputed. The most accurate benchmarks are those that are customized to your particular situation. Other people's benchmark data may have some value to others, but proper interpretation brings many [[benchmark (computing)#Challenges|challenges]]. See [http://benchmarksgame.alioth.debian.org/dont-jump-to-conclusions.php this] page about over-generalizing from benchmark data.  [http://benchmarksgame.alioth.debian.org/ The Computer Language Benchmarks Game] site contains a large number of micro-benchmarks of reader-contributed code snippets, with an interface that generates various charts and tables comparing specific programming languages and types of tests.

==Timeline of specific language comparisons==
* 1973 - [http://comjnl.oxfordjournals.org/cgi/content/abstract/17/4/325 Comparative Notes on Algol 68 and PL/I] - S. H. Valentine - February 1973
* 1976 - Evaluation of [[ALGOL 68]], [[JOVIAL]] J3B, [[Pascal (programming language)|Pascal]], [[Simula]] 67, and [[TACPOL]] Versus TINMAN - Requirements for a Common High Order Programming Language. <!-- [http://www.dtic.mil/srch/doc?collection=t2&id=ADA037637 Report Number: 1021-14] -->
* 1977 - [http://comjnl.oxfordjournals.org/cgi/content/abstract/21/4/316 A comparison of PASCAL and ALGOL 68][http://dare.ubvu.vu.nl/bitstream/1871/2609/1/11054.pdf] - [[Andrew S. Tanenbaum]] - June 1977.
* 1993 - [http://cm.bell-labs.com/cm/cs/who/dmr/hopl.html Five Little Languages and How They Grew] - [[BLISS]], [[Pascal (programming language)|Pascal]], [[ALGOL 68]], [[BCPL]] & [[C (programming language)|C]] - [[Dennis M. Ritchie]] - April 1993.
* 2009 - [http://www.cowlark.com/2009-11-15-go On Go - oh, go on] - How well will Google's [[Go (programming language)|Go]] stand up against Brand X programming language? - David Given - November 2009

==See also==
*[[Alphabetical list of programming languages]]
*[[Comparison of basic instructions of programming languages]]
*[[Comparison of programming languages (string functions)]]
*[[Comparison of programming languages (strings)]]
*[[Comparison of programming languages (syntax)]]
*[[Comparison of programming languages (array)]]
*[[Comparison of programming languages (object-oriented programming)]]
*[[Comparison of programming languages (list comprehension)]]
*[[Comparison of programming languages (mapping)]]
*[[Comparison of programming paradigms]]
*[[Educational programming language]]
*[[Hello world program examples]]
*[[Measuring programming language popularity]]
*[[Programming language]]
*[[List of multi-paradigm programming languages]]

==References==
{{Reflist|2}}

==Further reading==
*{{cite book|title=A Guide to Programming Languages: Overview and Comparison|first=Ruknet|last=Cezzar|isbn=978-0-89006-812-0}}

==External links==
* [http://99-bottles-of-beer.net/ 99-bottles-of-beer.net] ? one program in over a thousand variations and multiple languages.
* [http://gmarceau.qc.ca/blog/2009/05/speed-size-and-dependability-of.html The speed, size and dependability of programming languages] ? charts and narrative based on The Computer Language Benchmarks Game data.
* [http://benchmarksgame.alioth.debian.org/u32/code-used-time-used-shapes.php  Shapes: Source Code Size and Run Time] - charts based on current Benchmarks Game data.
* [http://www.scriptol.com/programming/choose.php Comparison of syntaxes] with sample codes.
* [http://rigaux.org/language-study/syntax-across-languages.html Syntax Across Languages]
* [http://merd.sourceforge.net/pixel/language-study/scripting-language/ Scriptometer scores] ? multiple comparisons of 26 programming languages.
* [http://pleac.sourceforge.net/ PLEAC] ? Programming Language Examples Alike Cookbook.
* [http://www.ohloh.net/languages OHLOH Language Statistics] ? gives an indication of the popularity of programming languages in open-source projects.
* [http://hhh.gavilan.edu/dvantassel/history/history.html History of Programming Language Statements] ? history and comparison of programming languages.

{{DEFAULTSORT:Comparison of programming languages}}
[[Category:Programming language comparisons]]