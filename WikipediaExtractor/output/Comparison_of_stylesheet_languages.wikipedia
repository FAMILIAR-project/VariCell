{{CSS}}
In [[computing]] the two primary [[stylesheet language]]s are [[Cascading Style Sheets]] (CSS) and the [[Extensible Stylesheet Language]] (XSL). While they are both called stylesheet languages, they have very different purposes and ways of going about their tasks.

== Cascading Style Sheets ==
{{main|Cascading Style Sheets}}

CSS is designed around styling a document, structured in a [[markup language]], [[HTML]] and [[XML]] (including [[XHTML]] and [[SVG]]) documents. It was created for that purpose. The code CSS is non-XML syntax to define the style information for the various elements of the document that it styles.

The language to structure a document ([[markup language]]) is a prelimit to CSS.  A markup language, like HTML and less XUL, may define some primitive elements to style a document, for example <emphasis> to bold.  CSS post styles a document to "screen media" or "paged media".

Screen media, displayed as a single page (possibly with hyperlinks), that has a fixed horizontal width but a virtually unlimited vertical height. Scrolling is often the method of choice for viewing parts of screen media. This is in contrast to "paged media", which has multiple pages, each with specific fixed horizontal and vertical dimensions.  To style paged media involves a variety of complexities that screen media does not. Since CSS was designed originally for screen media, its paged facilities lacked.

CSS version 3.0 provides new features that allow CSS to more adequately style documents for paged display.

== Extensible Stylesheet Language ==
{{main|Extensible Stylesheet Language}}

XSL has evolved drastically from its initial design into something very different from its original purpose. The original idea for XSL was to create an XML-based styling language directed toward paged display media. The mechanism they used to accomplish this task was to divide the process into two distinct steps.

First, the XML document would be transformed into an intermediate form. The process for performing this transformation would be governed by the XSL stylesheet, as defined by the XSL specification. The result of this transformation would be an XML document in an intermediate language, known as [[XSL Formatting Objects|XSL-FO]] (also defined by the XSL specification).

However, in the process of designing the transformation step, it was realized that a generic XML transformation language would be useful for more than merely creating a presentation of an XML document. As such, a new working group was split off from the XSL working group, and the [[XSL Transformations]] (XSLT) language became something that was considered separate from the styling information of the XSL-FO document. Even that split was expanded when [[XPath]] became its own separate specification, though still strongly tied to XSLT.

The combination of XSLT and XSL-FO creates a powerful styling language, though much more complex than CSS. XSLT is a [[Turing complete]] language, while CSS is not; this demonstrates a degree of power and flexibility not found in CSS. Additionally, XSLT is capable of creating content, such as automatically creating a table of contents just from chapters in a book, or removing/selecting content, such as ''only'' generating a glossary from a book. XSLT version 1.0 with the [[EXSLT]] extensions, or XSLT version 2.0 is capable of generating multiple documents as well, such as dividing the chapters in a book into their own individual pages. By contrast, a CSS can only selectively remove content by not displaying it.

XSL-FO is unlike CSS in that the XSL-FO document stands alone. CSS modifies a document that is attached to it, while the XSL-FO document (usually the result of the transformation by XSLT of the original document) contains all of the content to be presented in a purely presentational format. It has a wide range of specification options with regard to paged formatting and higher-quality typesetting. But it does not specify the pages themselves. The XSL-FO document must be passed through an XSL-FO processor utility that generates the final paged media, much like HTML+CSS must pass through a [[web browser]] to be displayed in its formatted state.

The complexity of XSL-FO is a problem, largely because implementing an FO processor is very difficult. CSS implementations in web browsers are still not entirely compatible with one another, and it is much simpler to write a CSS processor than an FO processor. However, for richly specified paged media, such complexity is ultimately required in order to be able to solve various [[typesetting]] problems.

==See also==
*[[Extensible Stylesheet Language]]
**[[XSL Transformations]]
**[[XSL Formatting Objects]]
**[[XPath]]

==External links==
*[http://www.w3.org/Style/ Why is the W3 producing 2 Style Sheet Languages?] W3 article
*[http://www.w3.org/TR/NOTE-XSL-and-CSS Using CSS and XSL together] W3 article
*[http://www.xml.com/pub/a/2005/01/19/print.html Printing XML]  Why CSS is better than XSL.
*[http://www.xml.com/pub/a/2005/02/09/cssorxsl.html Article on XSLT for transformations and CSS for web presentation]
*[http://blogs.msdn.com/XmlTeam/archive/2005/01/24/359849.aspx MS XML Team Blog] CSS vs. XSL

{{Stylesheet languages}}
[[Category:Stylesheet languages| Comparison of stylesheet languages]]
[[Category:Markup language comparisons|Stylesheet languages]]