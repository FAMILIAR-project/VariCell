FinalFM = FM(File_Synchronization_Software: General_features ; 
General_features: (Detectconflict|Scheduling)+ (Windows|Protocol)+ (MacOSX|Programminglanguage)+ (License|Linux)+ (License|Windows)+ (Detectconflict|Programminglanguage)+ [Detectmove] [Portable] [Undo] [OtherOS] [Detectrename] ; 
License: (GPL|GPLv3)? ; 
Protocol: (Network_webapp|Filesystem)? ; 
Linux: [UsingMono] ; 
Undo: (Recycler|Createsbackups|Versioning)? ; 
OtherOS: [Crossplatform] ; 
Scheduling: (ViaOS|Native)? ; 
Programminglanguage: (VisualBasic_NET|Java|Python|C)? ; 
(MacOSX -> !GPL);
(GPL -> Linux);
(OtherOS -> Linux);
(VisualBasic_NET <-> UsingMono);
(Native -> Portable);
(VisualBasic_NET -> !Detectmove);
(Recycler -> Detectrename);
(Linux -> Protocol);
(ViaOS -> License);
(Network_webapp -> GPL);
(Java -> MacOSX);
(OtherOS -> License);
(OtherOS -> Programminglanguage);
(ViaOS -> Filesystem);
(Recycler -> OtherOS);
(Crossplatform -> !Detectmove);
(Windows -> Detectconflict);
(C -> !MacOSX);
(C -> !ViaOS);
(Network_webapp -> Scheduling);
(MacOSX -> Filesystem);
(Versioning -> GPL);
(Native -> Programminglanguage);
(Recycler -> Scheduling);
(Versioning -> C);
(Crossplatform -> !Detectrename);
(Detectmove -> !ViaOS);
(Native -> Linux);
(Detectmove -> !Native);
(Recycler -> GPL);
(Network_webapp <-> Python);
(Versioning -> Detectmove);
(Native -> Filesystem);
(Versioning -> Detectrename);
(OtherOS -> Filesystem);
(OtherOS -> Portable);
(GPLv3 -> Programminglanguage);
(Detectrename -> !Native);
(ViaOS -> Programminglanguage);
(GPLv3 -> Windows);
(ViaOS -> Linux);
(Createsbackups <-> Crossplatform);
(Detectrename -> !ViaOS);
(Windows -> !Network_webapp);
(UsingMono -> !OtherOS);
(Filesystem -> Windows);
(C -> License);
(Recycler -> C);
(VisualBasic_NET -> Portable);
(UsingMono -> Filesystem);
(Recycler -> Detectmove);
(Crossplatform <-> Java);
(Versioning -> OtherOS);
(UsingMono -> GPL);
(ViaOS -> Portable);
(Native -> License);
(Createsbackups -> GPLv3);
(MacOSX -> Linux);
(C -> !Native);
(Versioning -> Scheduling);
(UsingMono -> !Detectrename);
(C -> Windows);)