/*
* generated by Xtext
*/
grammar InternalVariCell;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.VariCellGrammarAccess;

}

@parser::members {

 	private VariCellGrammarAccess grammarAccess;
 	
    public InternalVariCellParser(TokenStream input, VariCellGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SToFMModel";	
   	}
   	
   	@Override
   	protected VariCellGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSToFMModel
entryRuleSToFMModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSToFMModelRule()); }
	 iv_ruleSToFMModel=ruleSToFMModel 
	 { $current=$iv_ruleSToFMModel.current; } 
	 EOF 
;

// Rule SToFMModel
ruleSToFMModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSToFMModelAccess().getImportViewsImportViewsParserRuleCall_0_0()); 
	    }
		lv_importViews_0_0=ruleImportViews		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSToFMModelRule());
	        }
       		set(
       			$current, 
       			"importViews",
        		lv_importViews_0_0, 
        		"ImportViews");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSToFMModelAccess().getSplNameSPLNameParserRuleCall_1_0()); 
	    }
		lv_splName_1_0=ruleSPLName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSToFMModelRule());
	        }
       		set(
       			$current, 
       			"splName",
        		lv_splName_1_0, 
        		"SPLName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSToFMModelAccess().getSchemaStructuringInformationParserRuleCall_2_0()); 
	    }
		lv_schema_2_0=ruleStructuringInformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSToFMModelRule());
	        }
       		set(
       			$current, 
       			"schema",
        		lv_schema_2_0, 
        		"StructuringInformation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSToFMModelAccess().getDefaultDefaultParserRuleCall_3_0()); 
	    }
		lv_default_3_0=ruleDefault		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSToFMModelRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_3_0, 
        		"Default");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSToFMModelAccess().getScopingScopingViewParserRuleCall_4_0()); 
	    }
		lv_scoping_4_0=ruleScopingView		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSToFMModelRule());
	        }
       		add(
       			$current, 
       			"scoping",
        		lv_scoping_4_0, 
        		"ScopingView");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImportViews
entryRuleImportViews returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportViewsRule()); }
	 iv_ruleImportViews=ruleImportViews 
	 { $current=$iv_ruleImportViews.current; } 
	 EOF 
;

// Rule ImportViews
ruleImportViews returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportViewsAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportViewsAccess().getViewsDataViewParserRuleCall_1_0()); 
	    }
		lv_views_1_0=ruleDataView		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportViewsRule());
	        }
       		add(
       			$current, 
       			"views",
        		lv_views_1_0, 
        		"DataView");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleDataView
entryRuleDataView returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataViewRule()); }
	 iv_ruleDataView=ruleDataView 
	 { $current=$iv_ruleDataView.current; } 
	 EOF 
;

// Rule DataView
ruleDataView returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_file_0_0=RULE_STRING
		{
			newLeafNode(lv_file_0_0, grammarAccess.getDataViewAccess().getFileSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataViewRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"file",
        		lv_file_0_0, 
        		"STRING");
	    }

)
)(	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataViewAccess().getAsKeyword_1_0());
    }
(
(
		lv_viewname_2_0=RULE_ID
		{
			newLeafNode(lv_viewname_2_0, grammarAccess.getDataViewAccess().getViewnameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataViewRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"viewname",
        		lv_viewname_2_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleSPLName
entryRuleSPLName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSPLNameRule()); }
	 iv_ruleSPLName=ruleSPLName 
	 { $current=$iv_ruleSPLName.current; } 
	 EOF 
;

// Rule SPLName
ruleSPLName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='name:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSPLNameAccess().getNameKeyword_0());
    }
(
(
(
		lv_name_1_1=RULE_STRING
		{
			newLeafNode(lv_name_1_1, grammarAccess.getSPLNameAccess().getNameSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSPLNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_1, 
        		"STRING");
	    }

    |		lv_name_1_2=RULE_ID
		{
			newLeafNode(lv_name_1_2, grammarAccess.getSPLNameAccess().getNameIDTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSPLNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_2, 
        		"ID");
	    }

)

)
))
;





// Entry rule entryRuleStructuringInformation
entryRuleStructuringInformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructuringInformationRule()); }
	 iv_ruleStructuringInformation=ruleStructuringInformation 
	 { $current=$iv_ruleStructuringInformation.current; } 
	 EOF 
;

// Rule StructuringInformation
ruleStructuringInformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructuringInformationAccess().getStructuringInformationAction_0(),
            $current);
    }
)	otherlv_1='structure:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructuringInformationAccess().getStructureKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructuringInformationAccess().getRelationsItemRelationParserRuleCall_2_0()); 
	    }
		lv_relations_2_0=ruleItemRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructuringInformationRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_2_0, 
        		"ItemRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStructuringInformationAccess().getAbstractItemGeneralizationParserRuleCall_3_0()); 
	    }
		lv_abstract_3_0=ruleItemGeneralization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructuringInformationRule());
	        }
       		add(
       			$current, 
       			"abstract",
        		lv_abstract_3_0, 
        		"ItemGeneralization");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getStructuringInformationAccess().getMpItemMappingParserRuleCall_4_0()); 
	    }
		lv_mp_4_0=ruleItemMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructuringInformationRule());
	        }
       		add(
       			$current, 
       			"mp",
        		lv_mp_4_0, 
        		"ItemMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleItemRelation
entryRuleItemRelation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemRelationRule()); }
	 iv_ruleItemRelation=ruleItemRelation 
	 { $current=$iv_ruleItemRelation.current; } 
	 EOF 
;

// Rule ItemRelation
ruleItemRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_view1_0_1=RULE_ID
		{
			newLeafNode(lv_view1_0_1, grammarAccess.getItemRelationAccess().getView1IDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRelationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"view1",
        		lv_view1_0_1, 
        		"ID");
	    }

    |		lv_view1_0_2=RULE_STRING
		{
			newLeafNode(lv_view1_0_2, grammarAccess.getItemRelationAccess().getView1STRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRelationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"view1",
        		lv_view1_0_2, 
        		"STRING");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getItemRelationAccess().getRelKindRelationEnumRuleCall_1_0()); 
	    }
		lv_rel_1_0=ruleKindRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemRelationRule());
	        }
       		set(
       			$current, 
       			"rel",
        		lv_rel_1_0, 
        		"KindRelation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_view2_2_1=RULE_ID
		{
			newLeafNode(lv_view2_2_1, grammarAccess.getItemRelationAccess().getView2IDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRelationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"view2",
        		lv_view2_2_1, 
        		"ID");
	    }

    |		lv_view2_2_2=RULE_STRING
		{
			newLeafNode(lv_view2_2_2, grammarAccess.getItemRelationAccess().getView2STRINGTerminalRuleCall_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemRelationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"view2",
        		lv_view2_2_2, 
        		"STRING");
	    }

)

)
))
;





// Entry rule entryRuleItemGeneralization
entryRuleItemGeneralization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemGeneralizationRule()); }
	 iv_ruleItemGeneralization=ruleItemGeneralization 
	 { $current=$iv_ruleItemGeneralization.current; } 
	 EOF 
;

// Rule ItemGeneralization
ruleItemGeneralization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_generalize_0_1=RULE_ID
		{
			newLeafNode(lv_generalize_0_1, grammarAccess.getItemGeneralizationAccess().getGeneralizeIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemGeneralizationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"generalize",
        		lv_generalize_0_1, 
        		"ID");
	    }

    |		lv_generalize_0_2=RULE_STRING
		{
			newLeafNode(lv_generalize_0_2, grammarAccess.getItemGeneralizationAccess().getGeneralizeSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemGeneralizationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"generalize",
        		lv_generalize_0_2, 
        		"STRING");
	    }

)

)
)(	otherlv_1='generalize' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getItemGeneralizationAccess().getGeneralizeKeyword_1_0());
    }

    |	otherlv_2='abstract' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getItemGeneralizationAccess().getAbstractKeyword_1_1());
    }
)(
(
(
		lv_views_3_1=RULE_ID
		{
			newLeafNode(lv_views_3_1, grammarAccess.getItemGeneralizationAccess().getViewsIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemGeneralizationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"views",
        		lv_views_3_1, 
        		"ID");
	    }

    |		lv_views_3_2=RULE_STRING
		{
			newLeafNode(lv_views_3_2, grammarAccess.getItemGeneralizationAccess().getViewsSTRINGTerminalRuleCall_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemGeneralizationRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"views",
        		lv_views_3_2, 
        		"STRING");
	    }

)

)
)+)
;





// Entry rule entryRuleItemMapping
entryRuleItemMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getItemMappingRule()); }
	 iv_ruleItemMapping=ruleItemMapping 
	 { $current=$iv_ruleItemMapping.current; } 
	 EOF 
;

// Rule ItemMapping
ruleItemMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_item_0_1=RULE_ID
		{
			newLeafNode(lv_item_0_1, grammarAccess.getItemMappingAccess().getItemIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemMappingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"item",
        		lv_item_0_1, 
        		"ID");
	    }

    |		lv_item_0_2=RULE_STRING
		{
			newLeafNode(lv_item_0_2, grammarAccess.getItemMappingAccess().getItemSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemMappingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"item",
        		lv_item_0_2, 
        		"STRING");
	    }

)

)
)(
(
(
		lv_act_1_1=	'replace' 
    {
        newLeafNode(lv_act_1_1, grammarAccess.getItemMappingAccess().getActReplaceKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemMappingRule());
	        }
       		setWithLastConsumed($current, "act", lv_act_1_1, null);
	    }

    |		lv_act_1_2=	'correspondsTo' 
    {
        newLeafNode(lv_act_1_2, grammarAccess.getItemMappingAccess().getActCorrespondsToKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getItemMappingRule());
	        }
       		setWithLastConsumed($current, "act", lv_act_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getItemMappingAccess().getPftsPredicateItemParserRuleCall_2_0()); 
	    }
		lv_pfts_2_0=rulePredicateItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getItemMappingRule());
	        }
       		set(
       			$current, 
       			"pfts",
        		lv_pfts_2_0, 
        		"PredicateItem");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePredicateItem
entryRulePredicateItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredicateItemRule()); }
	 iv_rulePredicateItem=rulePredicateItem 
	 { $current=$iv_rulePredicateItem.current; } 
	 EOF 
;

// Rule PredicateItem
rulePredicateItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPredicateItemAccess().getOr_exprParserRuleCall()); 
    }
    this_Or_expr_0=ruleOr_expr
    { 
        $current = $this_Or_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOr_expr
entryRuleOr_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOr_exprRule()); }
	 iv_ruleOr_expr=ruleOr_expr 
	 { $current=$iv_ruleOr_expr.current; } 
	 EOF 
;

// Rule Or_expr
ruleOr_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOr_exprAccess().getAnd_exprParserRuleCall_0()); 
    }
    this_And_expr_0=ruleAnd_expr
    { 
        $current = $this_And_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOr_exprAccess().getOr_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOr_exprAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOr_exprAccess().getRightAnd_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOr_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd_expr
entryRuleAnd_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnd_exprRule()); }
	 iv_ruleAnd_expr=ruleAnd_expr 
	 { $current=$iv_ruleAnd_expr.current; } 
	 EOF 
;

// Rule And_expr
ruleAnd_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnd_exprAccess().getUnary_exprParserRuleCall_0()); 
    }
    this_Unary_expr_0=ruleUnary_expr
    { 
        $current = $this_Unary_expr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAnd_exprAccess().getAnd_exprLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAnd_exprAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAnd_exprAccess().getRightUnary_exprParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUnary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAnd_exprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Unary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnary_expr
entryRuleUnary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnary_exprRule()); }
	 iv_ruleUnary_expr=ruleUnary_expr 
	 { $current=$iv_ruleUnary_expr.current; } 
	 EOF 
;

// Rule Unary_expr
ruleUnary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getNeg_exprParserRuleCall_0()); 
    }
    this_Neg_expr_0=ruleNeg_expr
    { 
        $current = $this_Neg_expr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnary_exprAccess().getPrimary_exprParserRuleCall_1()); 
    }
    this_Primary_expr_1=rulePrimary_expr
    { 
        $current = $this_Primary_expr_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNeg_expr
entryRuleNeg_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNeg_exprRule()); }
	 iv_ruleNeg_expr=ruleNeg_expr 
	 { $current=$iv_ruleNeg_expr.current; } 
	 EOF 
;

// Rule Neg_expr
ruleNeg_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNeg_exprAccess().getNotKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNeg_exprAccess().getExprPrimary_exprParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=rulePrimary_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNeg_exprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Primary_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePrimary_expr
entryRulePrimary_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimary_exprRule()); }
	 iv_rulePrimary_expr=rulePrimary_expr 
	 { $current=$iv_rulePrimary_expr.current; } 
	 EOF 
;

// Rule Primary_expr
rulePrimary_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=RULE_ID
		{
			newLeafNode(lv_name_0_1, grammarAccess.getPrimary_exprAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_exprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_1, 
        		"ID");
	    }

    |		lv_name_0_2=RULE_STRING
		{
			newLeafNode(lv_name_0_2, grammarAccess.getPrimary_exprAccess().getNameSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimary_exprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_2, 
        		"STRING");
	    }

)

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimary_exprAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimary_exprAccess().getOr_exprParserRuleCall_1_1()); 
    }
    this_Or_expr_2=ruleOr_expr
    { 
        $current = $this_Or_expr_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimary_exprAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleDefault
entryRuleDefault returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultRule()); }
	 iv_ruleDefault=ruleDefault 
	 { $current=$iv_ruleDefault.current; } 
	 EOF 
;

// Rule Default
ruleDefault returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDefaultAccess().getDefaultAction_0(),
            $current);
    }
)(	otherlv_1='default:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultAccess().getDefaultKeyword_1_0());
    }

    |	otherlv_2='allviews:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefaultAccess().getAllviewsKeyword_1_1());
    }

    |	otherlv_3='all:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefaultAccess().getAllKeyword_1_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultAccess().getConfigsParsingConfigurationParserRuleCall_2_0()); 
	    }
		lv_configs_4_0=ruleParsingConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultRule());
	        }
       		set(
       			$current, 
       			"configs",
        		lv_configs_4_0, 
        		"ParsingConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultAccess().getProductsScopingProductsParserRuleCall_3_0()); 
	    }
		lv_products_5_0=ruleScopingProducts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultRule());
	        }
       		set(
       			$current, 
       			"products",
        		lv_products_5_0, 
        		"ScopingProducts");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleParsingConfiguration
entryRuleParsingConfiguration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParsingConfigurationRule()); }
	 iv_ruleParsingConfiguration=ruleParsingConfiguration 
	 { $current=$iv_ruleParsingConfiguration.current; } 
	 EOF 
;

// Rule ParsingConfiguration
ruleParsingConfiguration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParsingConfigurationAccess().getParsingConfigurationAction_0(),
            $current);
    }
)	otherlv_1='parsing:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParsingConfigurationAccess().getParsingKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParsingConfigurationAccess().getProductIDKeyParserRuleCall_2_0()); 
	    }
		lv_productID_2_0=ruleKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParsingConfigurationRule());
	        }
       		set(
       			$current, 
       			"productID",
        		lv_productID_2_0, 
        		"Key");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParsingConfigurationAccess().getFormatFormatSpecificationParserRuleCall_3_0()); 
	    }
		lv_format_3_0=ruleFormatSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParsingConfigurationRule());
	        }
       		set(
       			$current, 
       			"format",
        		lv_format_3_0, 
        		"FormatSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParsingConfigurationAccess().getSinterpretSyntacticalInterpretationParserRuleCall_4_0()); 
	    }
		lv_sinterpret_4_0=ruleSyntacticalInterpretation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParsingConfigurationRule());
	        }
       		set(
       			$current, 
       			"sinterpret",
        		lv_sinterpret_4_0, 
        		"SyntacticalInterpretation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParsingConfigurationAccess().getSeparatorCSVSeparatorParserRuleCall_5_0()); 
	    }
		lv_separator_5_0=ruleCSVSeparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParsingConfigurationRule());
	        }
       		set(
       			$current, 
       			"separator",
        		lv_separator_5_0, 
        		"CSVSeparator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParsingConfigurationAccess().getMseparatorCSVMultiSeparatorParserRuleCall_6_0()); 
	    }
		lv_mseparator_6_0=ruleCSVMultiSeparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParsingConfigurationRule());
	        }
       		set(
       			$current, 
       			"mseparator",
        		lv_mseparator_6_0, 
        		"CSVMultiSeparator");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFormatSpecification
entryRuleFormatSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormatSpecificationRule()); }
	 iv_ruleFormatSpecification=ruleFormatSpecification 
	 { $current=$iv_ruleFormatSpecification.current; } 
	 EOF 
;

// Rule FormatSpecification
ruleFormatSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='format:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFormatSpecificationAccess().getFormatKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormatSpecificationAccess().getFileformatFileFormatEnumRuleCall_1_0()); 
	    }
		lv_fileformat_1_0=ruleFileFormat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatSpecificationRule());
	        }
       		set(
       			$current, 
       			"fileformat",
        		lv_fileformat_1_0, 
        		"FileFormat");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSyntacticalInterpretation
entryRuleSyntacticalInterpretation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSyntacticalInterpretationRule()); }
	 iv_ruleSyntacticalInterpretation=ruleSyntacticalInterpretation 
	 { $current=$iv_ruleSyntacticalInterpretation.current; } 
	 EOF 
;

// Rule SyntacticalInterpretation
ruleSyntacticalInterpretation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSyntacticalInterpretationAccess().getSyntacticalInterpretationAction_0(),
            $current);
    }
)	otherlv_1='variability:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSyntacticalInterpretationAccess().getVariabilityKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSyntacticalInterpretationAccess().getOptOptionalParserRuleCall_2_0()); 
	    }
		lv_opt_2_0=ruleOptional		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSyntacticalInterpretationRule());
	        }
       		set(
       			$current, 
       			"opt",
        		lv_opt_2_0, 
        		"Optional");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSyntacticalInterpretationAccess().getYesMandatoryParserRuleCall_3_0()); 
	    }
		lv_yes_3_0=ruleMandatory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSyntacticalInterpretationRule());
	        }
       		set(
       			$current, 
       			"yes",
        		lv_yes_3_0, 
        		"Mandatory");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSyntacticalInterpretationAccess().getNoNotPresentParserRuleCall_4_0()); 
	    }
		lv_no_4_0=ruleNotPresent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSyntacticalInterpretationRule());
	        }
       		set(
       			$current, 
       			"no",
        		lv_no_4_0, 
        		"NotPresent");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSyntacticalInterpretationAccess().getNaUnknownParserRuleCall_5_0()); 
	    }
		lv_na_5_0=ruleUnknown		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSyntacticalInterpretationRule());
	        }
       		set(
       			$current, 
       			"na",
        		lv_na_5_0, 
        		"Unknown");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	 iv_ruleKey=ruleKey 
	 { $current=$iv_ruleKey.current; } 
	 EOF 
;

// Rule Key
ruleKey returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='key:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKeyAccess().getKeyKeyword_0());
    }
(
(
		lv_cid_1_0=RULE_STRING
		{
			newLeafNode(lv_cid_1_0, grammarAccess.getKeyAccess().getCidSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeyRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"cid",
        		lv_cid_1_0, 
        		"STRING");
	    }

)
)+)
;





// Entry rule entryRuleCSVSeparator
entryRuleCSVSeparator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCSVSeparatorRule()); }
	 iv_ruleCSVSeparator=ruleCSVSeparator 
	 { $current=$iv_ruleCSVSeparator.current; } 
	 EOF 
;

// Rule CSVSeparator
ruleCSVSeparator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='separator:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCSVSeparatorAccess().getSeparatorKeyword_0());
    }
(
(
		lv_sep_1_0=RULE_STRING
		{
			newLeafNode(lv_sep_1_0, grammarAccess.getCSVSeparatorAccess().getSepSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCSVSeparatorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sep",
        		lv_sep_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleCSVMultiSeparator
entryRuleCSVMultiSeparator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCSVMultiSeparatorRule()); }
	 iv_ruleCSVMultiSeparator=ruleCSVMultiSeparator 
	 { $current=$iv_ruleCSVMultiSeparator.current; } 
	 EOF 
;

// Rule CSVMultiSeparator
ruleCSVMultiSeparator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multivalued_separator:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCSVMultiSeparatorAccess().getMultivalued_separatorKeyword_0());
    }
(
(
		lv_seps_1_0=RULE_STRING
		{
			newLeafNode(lv_seps_1_0, grammarAccess.getCSVMultiSeparatorAccess().getSepsSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCSVMultiSeparatorRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"seps",
        		lv_seps_1_0, 
        		"STRING");
	    }

)
)+)
;





// Entry rule entryRuleOptional
entryRuleOptional returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionalRule()); }
	 iv_ruleOptional=ruleOptional 
	 { $current=$iv_ruleOptional.current; } 
	 EOF 
;

// Rule Optional
ruleOptional returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='optional:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOptionalAccess().getOptionalKeyword_0());
    }
(
(
		lv_values_1_0=RULE_STRING
		{
			newLeafNode(lv_values_1_0, grammarAccess.getOptionalAccess().getValuesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"STRING");
	    }

)
)+)
;





// Entry rule entryRuleMandatory
entryRuleMandatory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMandatoryRule()); }
	 iv_ruleMandatory=ruleMandatory 
	 { $current=$iv_ruleMandatory.current; } 
	 EOF 
;

// Rule Mandatory
ruleMandatory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mandatory:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMandatoryAccess().getMandatoryKeyword_0());
    }
(
(
		lv_values_1_0=RULE_STRING
		{
			newLeafNode(lv_values_1_0, grammarAccess.getMandatoryAccess().getValuesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMandatoryRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"STRING");
	    }

)
)+)
;





// Entry rule entryRuleNotPresent
entryRuleNotPresent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotPresentRule()); }
	 iv_ruleNotPresent=ruleNotPresent 
	 { $current=$iv_ruleNotPresent.current; } 
	 EOF 
;

// Rule NotPresent
ruleNotPresent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='notpresent:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotPresentAccess().getNotpresentKeyword_0());
    }
(
(
		lv_values_1_0=RULE_STRING
		{
			newLeafNode(lv_values_1_0, grammarAccess.getNotPresentAccess().getValuesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNotPresentRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"STRING");
	    }

)
)+)
;





// Entry rule entryRuleUnknown
entryRuleUnknown returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnknownRule()); }
	 iv_ruleUnknown=ruleUnknown 
	 { $current=$iv_ruleUnknown.current; } 
	 EOF 
;

// Rule Unknown
ruleUnknown returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unknown:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnknownAccess().getUnknownKeyword_0());
    }
(
(
		lv_values_1_0=RULE_STRING
		{
			newLeafNode(lv_values_1_0, grammarAccess.getUnknownAccess().getValuesSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnknownRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"STRING");
	    }

)
)+)
;





// Entry rule entryRuleScopingView
entryRuleScopingView returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopingViewRule()); }
	 iv_ruleScopingView=ruleScopingView 
	 { $current=$iv_ruleScopingView.current; } 
	 EOF 
;

// Rule ScopingView
ruleScopingView returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='view:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScopingViewAccess().getViewKeyword_0());
    }
(
(
		lv_view_1_0=RULE_ID
		{
			newLeafNode(lv_view_1_0, grammarAccess.getScopingViewAccess().getViewIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getScopingViewRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"view",
        		lv_view_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getViewnameViewNameParserRuleCall_2_0()); 
	    }
		lv_viewname_2_0=ruleViewName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"viewname",
        		lv_viewname_2_0, 
        		"ViewName");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getSchemaStructuringInformationParserRuleCall_3_0()); 
	    }
		lv_schema_3_0=ruleStructuringInformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"schema",
        		lv_schema_3_0, 
        		"StructuringInformation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getConfigParsingConfigurationParserRuleCall_4_0()); 
	    }
		lv_config_4_0=ruleParsingConfiguration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"config",
        		lv_config_4_0, 
        		"ParsingConfiguration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getProductsScopingProductsParserRuleCall_5_0()); 
	    }
		lv_products_5_0=ruleScopingProducts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"products",
        		lv_products_5_0, 
        		"ScopingProducts");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getFtsScopingFeaturesParserRuleCall_6_0()); 
	    }
		lv_fts_6_0=ruleScopingFeatures		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"fts",
        		lv_fts_6_0, 
        		"ScopingFeatures");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getAlignmentRewritingParserRuleCall_7_0()); 
	    }
		lv_alignment_7_0=ruleRewriting		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"alignment",
        		lv_alignment_7_0, 
        		"Rewriting");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getScopingViewAccess().getInterpretationMultiValuesInterpretationParserRuleCall_8_0()); 
	    }
		lv_interpretation_8_0=ruleMultiValuesInterpretation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopingViewRule());
	        }
       		set(
       			$current, 
       			"interpretation",
        		lv_interpretation_8_0, 
        		"MultiValuesInterpretation");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleViewName
entryRuleViewName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getViewNameRule()); }
	 iv_ruleViewName=ruleViewName 
	 { $current=$iv_ruleViewName.current; } 
	 EOF 
;

// Rule ViewName
ruleViewName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rootname:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getViewNameAccess().getRootnameKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getViewNameAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getViewNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleScopingProducts
entryRuleScopingProducts returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopingProductsRule()); }
	 iv_ruleScopingProducts=ruleScopingProducts 
	 { $current=$iv_ruleScopingProducts.current; } 
	 EOF 
;

// Rule ScopingProducts
ruleScopingProducts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getScopingProductsAccess().getProductInclusionExclusionParserRuleCall()); 
    }
    this_ProductInclusionExclusion_0=ruleProductInclusionExclusion
    { 
        $current = $this_ProductInclusionExclusion_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleScopingFeatures
entryRuleScopingFeatures returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopingFeaturesRule()); }
	 iv_ruleScopingFeatures=ruleScopingFeatures 
	 { $current=$iv_ruleScopingFeatures.current; } 
	 EOF 
;

// Rule ScopingFeatures
ruleScopingFeatures returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getScopingFeaturesAccess().getFeatureInclusionExclusionParserRuleCall()); 
    }
    this_FeatureInclusionExclusion_0=ruleFeatureInclusionExclusion
    { 
        $current = $this_FeatureInclusionExclusion_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFeatureInclusionExclusion
entryRuleFeatureInclusionExclusion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureInclusionExclusionRule()); }
	 iv_ruleFeatureInclusionExclusion=ruleFeatureInclusionExclusion 
	 { $current=$iv_ruleFeatureInclusionExclusion.current; } 
	 EOF 
;

// Rule FeatureInclusionExclusion
ruleFeatureInclusionExclusion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureInclusionExclusionAccess().getExceptExceptFeatureParserRuleCall_0_0()); 
	    }
		lv_except_0_0=ruleExceptFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureInclusionExclusionRule());
	        }
       		set(
       			$current, 
       			"except",
        		lv_except_0_0, 
        		"ExceptFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureInclusionExclusionAccess().getOnlyOnlyFeatureParserRuleCall_1_0()); 
	    }
		lv_only_1_0=ruleOnlyFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureInclusionExclusionRule());
	        }
       		set(
       			$current, 
       			"only",
        		lv_only_1_0, 
        		"OnlyFeature");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExceptFeature
entryRuleExceptFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptFeatureRule()); }
	 iv_ruleExceptFeature=ruleExceptFeature 
	 { $current=$iv_ruleExceptFeature.current; } 
	 EOF 
;

// Rule ExceptFeature
ruleExceptFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='except_features:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExceptFeatureAccess().getExcept_featuresKeyword_0());
    }
(
(
(
		lv_fts_1_1=RULE_ID
		{
			newLeafNode(lv_fts_1_1, grammarAccess.getExceptFeatureAccess().getFtsIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExceptFeatureRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"fts",
        		lv_fts_1_1, 
        		"ID");
	    }

    |		lv_fts_1_2=RULE_STRING
		{
			newLeafNode(lv_fts_1_2, grammarAccess.getExceptFeatureAccess().getFtsSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExceptFeatureRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"fts",
        		lv_fts_1_2, 
        		"STRING");
	    }

)

)
)+)
;





// Entry rule entryRuleOnlyFeature
entryRuleOnlyFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnlyFeatureRule()); }
	 iv_ruleOnlyFeature=ruleOnlyFeature 
	 { $current=$iv_ruleOnlyFeature.current; } 
	 EOF 
;

// Rule OnlyFeature
ruleOnlyFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='only_features:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnlyFeatureAccess().getOnly_featuresKeyword_0());
    }
(
(
(
		lv_fts_1_1=RULE_ID
		{
			newLeafNode(lv_fts_1_1, grammarAccess.getOnlyFeatureAccess().getFtsIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnlyFeatureRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"fts",
        		lv_fts_1_1, 
        		"ID");
	    }

    |		lv_fts_1_2=RULE_STRING
		{
			newLeafNode(lv_fts_1_2, grammarAccess.getOnlyFeatureAccess().getFtsSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnlyFeatureRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"fts",
        		lv_fts_1_2, 
        		"STRING");
	    }

)

)
)+)
;





// Entry rule entryRuleProductInclusionExclusion
entryRuleProductInclusionExclusion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductInclusionExclusionRule()); }
	 iv_ruleProductInclusionExclusion=ruleProductInclusionExclusion 
	 { $current=$iv_ruleProductInclusionExclusion.current; } 
	 EOF 
;

// Rule ProductInclusionExclusion
ruleProductInclusionExclusion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProductInclusionExclusionAccess().getExceptExceptProductParserRuleCall_0_0()); 
	    }
		lv_except_0_0=ruleExceptProduct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductInclusionExclusionRule());
	        }
       		set(
       			$current, 
       			"except",
        		lv_except_0_0, 
        		"ExceptProduct");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProductInclusionExclusionAccess().getOnlyOnlyProductParserRuleCall_1_0()); 
	    }
		lv_only_1_0=ruleOnlyProduct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductInclusionExclusionRule());
	        }
       		set(
       			$current, 
       			"only",
        		lv_only_1_0, 
        		"OnlyProduct");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExceptProduct
entryRuleExceptProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptProductRule()); }
	 iv_ruleExceptProduct=ruleExceptProduct 
	 { $current=$iv_ruleExceptProduct.current; } 
	 EOF 
;

// Rule ExceptProduct
ruleExceptProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='except_products:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExceptProductAccess().getExcept_productsKeyword_0());
    }
(
(
(
		lv_pds_1_1=RULE_ID
		{
			newLeafNode(lv_pds_1_1, grammarAccess.getExceptProductAccess().getPdsIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExceptProductRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"pds",
        		lv_pds_1_1, 
        		"ID");
	    }

    |		lv_pds_1_2=RULE_STRING
		{
			newLeafNode(lv_pds_1_2, grammarAccess.getExceptProductAccess().getPdsSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExceptProductRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"pds",
        		lv_pds_1_2, 
        		"STRING");
	    }

)

)
)+)
;





// Entry rule entryRuleOnlyProduct
entryRuleOnlyProduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOnlyProductRule()); }
	 iv_ruleOnlyProduct=ruleOnlyProduct 
	 { $current=$iv_ruleOnlyProduct.current; } 
	 EOF 
;

// Rule OnlyProduct
ruleOnlyProduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='only_products:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOnlyProductAccess().getOnly_productsKeyword_0());
    }
(
(
(
		lv_pds_1_1=RULE_ID
		{
			newLeafNode(lv_pds_1_1, grammarAccess.getOnlyProductAccess().getPdsIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnlyProductRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"pds",
        		lv_pds_1_1, 
        		"ID");
	    }

    |		lv_pds_1_2=RULE_STRING
		{
			newLeafNode(lv_pds_1_2, grammarAccess.getOnlyProductAccess().getPdsSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOnlyProductRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"pds",
        		lv_pds_1_2, 
        		"STRING");
	    }

)

)
)+)
;





// Entry rule entryRuleRewriting
entryRuleRewriting returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRewritingRule()); }
	 iv_ruleRewriting=ruleRewriting 
	 { $current=$iv_ruleRewriting.current; } 
	 EOF 
;

// Rule Rewriting
ruleRewriting returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='rewriting:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRewritingAccess().getRewritingKeyword_0_0());
    }

    |	otherlv_1='renaming:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRewritingAccess().getRenamingKeyword_0_1());
    }
)(
(
(
		lv_oft_2_1=RULE_ID
		{
			newLeafNode(lv_oft_2_1, grammarAccess.getRewritingAccess().getOftIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRewritingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"oft",
        		lv_oft_2_1, 
        		"ID");
	    }

    |		lv_oft_2_2=RULE_STRING
		{
			newLeafNode(lv_oft_2_2, grammarAccess.getRewritingAccess().getOftSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRewritingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"oft",
        		lv_oft_2_2, 
        		"STRING");
	    }

)

)
)	otherlv_3='=>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRewritingAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		lv_nft_4_0=RULE_STRING
		{
			newLeafNode(lv_nft_4_0, grammarAccess.getRewritingAccess().getNftSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRewritingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"nft",
        		lv_nft_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleMultiValuesInterpretation
entryRuleMultiValuesInterpretation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiValuesInterpretationRule()); }
	 iv_ruleMultiValuesInterpretation=ruleMultiValuesInterpretation 
	 { $current=$iv_ruleMultiValuesInterpretation.current; } 
	 EOF 
;

// Rule MultiValuesInterpretation
ruleMultiValuesInterpretation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multivalues:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiValuesInterpretationAccess().getMultivaluesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiValuesInterpretationAccess().getMultiMultiValueInterpretationParserRuleCall_1_0()); 
	    }
		lv_multi_1_0=ruleMultiValueInterpretation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiValuesInterpretationRule());
	        }
       		add(
       			$current, 
       			"multi",
        		lv_multi_1_0, 
        		"MultiValueInterpretation");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleMultiValueInterpretation
entryRuleMultiValueInterpretation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiValueInterpretationRule()); }
	 iv_ruleMultiValueInterpretation=ruleMultiValueInterpretation 
	 { $current=$iv_ruleMultiValueInterpretation.current; } 
	 EOF 
;

// Rule MultiValueInterpretation
ruleMultiValueInterpretation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_val_0_1=RULE_ID
		{
			newLeafNode(lv_val_0_1, grammarAccess.getMultiValueInterpretationAccess().getValIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiValueInterpretationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_1, 
        		"ID");
	    }

    |		lv_val_0_2=RULE_STRING
		{
			newLeafNode(lv_val_0_2, grammarAccess.getMultiValueInterpretationAccess().getValSTRINGTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiValueInterpretationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_2, 
        		"STRING");
	    }

)

)
)	otherlv_1='=>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMultiValueInterpretationAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiValueInterpretationAccess().getVariabilityVariabilityInterpretationEnumRuleCall_2_0()); 
	    }
		lv_variability_2_0=ruleVariabilityInterpretation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiValueInterpretationRule());
	        }
       		set(
       			$current, 
       			"variability",
        		lv_variability_2_0, 
        		"VariabilityInterpretation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule KindRelation
ruleKindRelation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='below' 
	{
        $current = grammarAccess.getKindRelationAccess().getBELOWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getKindRelationAccess().getBELOWEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='above' 
	{
        $current = grammarAccess.getKindRelationAccess().getABOVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getKindRelationAccess().getABOVEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='moveIn' 
	{
        $current = grammarAccess.getKindRelationAccess().getMOVEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getKindRelationAccess().getMOVEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='copyIn' 
	{
        $current = grammarAccess.getKindRelationAccess().getCOPYEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getKindRelationAccess().getCOPYEnumLiteralDeclaration_3()); 
    }
));



// Rule FileFormat
ruleFileFormat returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='CSV' 
	{
        $current = grammarAccess.getFileFormatAccess().getCSVEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFileFormatAccess().getCSVEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='RDF' 
	{
        $current = grammarAccess.getFileFormatAccess().getRDFEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFileFormatAccess().getRDFEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='XML' 
	{
        $current = grammarAccess.getFileFormatAccess().getXMLEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFileFormatAccess().getXMLEnumLiteralDeclaration_2()); 
    }
));



// Rule VariabilityInterpretation
ruleVariabilityInterpretation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Alternatives' 
	{
        $current = grammarAccess.getVariabilityInterpretationAccess().getXOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVariabilityInterpretationAccess().getXOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='OR-Alternatives' 
	{
        $current = grammarAccess.getVariabilityInterpretationAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVariabilityInterpretationAccess().getOREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Optional' 
	{
        $current = grammarAccess.getVariabilityInterpretationAccess().getOPTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getVariabilityInterpretationAccess().getOPTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Mandatory' 
	{
        $current = grammarAccess.getVariabilityInterpretationAccess().getMANDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getVariabilityInterpretationAccess().getMANDEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Concat' 
	{
        $current = grammarAccess.getVariabilityInterpretationAccess().getCONCATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getVariabilityInterpretationAccess().getCONCATEnumLiteralDeclaration_4()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


